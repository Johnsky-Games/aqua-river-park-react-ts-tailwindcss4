{
  "src\\app.ts": "import express from 'express';\r\nimport dashboardRoutes from './routes/dashboard.routes';\r\nimport authRoutes from './routes/auth.routes';\r\nimport cors from 'cors';\r\nimport notFound from \"./middlewares/notFound.middleware\";\r\nimport errorHandler from \"./middlewares/errorHandler.middleware\";\r\nimport xss from \"xss-clean\";\r\n\r\n\r\nconst app = express();\r\napp.use(cors({\r\n    origin: 'http://localhost:5173', // üëà Aseg√∫rate que coincida con el frontend\r\n    credentials: true\r\n}));\r\napp.use(express.json());\r\napp.use(xss());\r\n\r\n// Agrupar rutas protegidas bajo /api\r\napp.use('/api', dashboardRoutes);\r\napp.use('/api', authRoutes);\r\napp.use(notFound);      // üëâ Para rutas no encontradas\r\napp.use(errorHandler);  // üëâ Para manejar errores de forma centralizada\r\n\r\nexport default app;",
  "src\\config\\db.ts": "// db.ts\r\nimport mysql from 'mysql2/promise';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nexport const db = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || '',\r\n  database: process.env.DB_NAME || 'aqua_river_park',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0\r\n});\r\n\r\n// console.log('Conectando a la DB con usuario:', process.env.DB_USER);\r\n// console.log('Contrase√±a:', process.env.DB_PASSWORD);\r\n\r\n\r\n\r\nexport default db;\r\n",
  "src\\config\\jwt.ts": "// jwt.ts\r\nimport jwt, { JwtPayload } from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'supersecret';\r\nconst JWT_EXPIRES_IN = '7d';\r\n\r\nexport interface TokenPayload {\r\n  id: number;\r\n  email: string;\r\n  name: string;\r\n  role: 'admin';\r\n}\r\n\r\nexport const generateToken = (payload: TokenPayload): string => {\r\n  return jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });\r\n};\r\n\r\nexport const verifyToken = (token: string): TokenPayload => {\r\n  return jwt.verify(token, JWT_SECRET) as TokenPayload;\r\n};\r\n",
  "src\\config\\mailer.ts": "// backend/config/mailer.ts\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\nimport nodemailer from 'nodemailer';\r\n\r\nexport const transporter = nodemailer.createTransport({\r\n  host: process.env.MAIL_HOST,\r\n  port: Number(process.env.MAIL_PORT),\r\n  auth: {\r\n    user: process.env.MAIL_USER,\r\n    pass: process.env.MAIL_PASS\r\n  }\r\n});\r\n",
  "src\\config\\rateLimit.ts": "// config/rateLimit.ts\r\nimport rateLimit from \"express-rate-limit\";\r\n\r\nexport const loginLimiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutos\r\n  max: 5,\r\n  message: \"Demasiados intentos. Intenta nuevamente en 15 minutos.\",\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n});\r\n",
  "src\\controllers\\admin.controller.ts": "// admin.controller.ts",
  "src\\controllers\\auth.controller.ts": "import { Request, Response } from \"express\";\r\nimport * as authService from \"../services/auth.service\";\r\nimport { resendConfirmationService } from \"../services/confirm.service\";\r\nimport logger from \"../utils/logger\";\r\n\r\n\r\n// ‚úÖ REGISTRO\r\nexport const register = async (req: Request, res: Response) => {\r\n  try {\r\n    await authService.registerUser(req.body);\r\n    res.status(201).json({\r\n      message: \"Registro exitoso. Revisa tu correo para confirmar tu cuenta.\",\r\n    });\r\n  } catch (error: any) {\r\n    logger.error(\"‚ùå Registro:\", error.message);\r\n    res.status(400).json({ message: error.message || \"Error al registrar\" });\r\n  }\r\n};\r\n\r\n// ‚úÖ LOGIN\r\nexport const login = async (req: Request, res: Response) => {\r\n  const { email, password } = req.body;\r\n\r\n  try {\r\n    const data = await authService.loginUser(email, password);\r\n    res.json(data);\r\n  } catch (error: any) {\r\n    if (error.message === \"Debes confirmar tu cuenta\") {\r\n      res.status(401).json({\r\n        message: error.message,\r\n        tokenExpired: error.tokenExpired || false,\r\n      });\r\n    } else {\r\n      res.status(401).json({ message: error.message || \"Error al iniciar sesi√≥n\" });\r\n    }\r\n  }\r\n};\r\n\r\n// ‚úÖ LOGOUT (placeholder si usas JWT)\r\nexport const logout = async (_req: Request, res: Response) => {\r\n  res.json({ message: \"Sesi√≥n cerrada\" });\r\n};\r\n\r\n// ‚úÖ REENVIAR CONFIRMACI√ìN\r\nexport const resendConfirmation = async (req: Request, res: Response) => {\r\n  const { email } = req.body;\r\n\r\n  try {\r\n    await resendConfirmationService(email); // üëà llamado correcto\r\n    res.json({ message: \"Correo de confirmaci√≥n reenviado.\" });\r\n  } catch (error: any) {\r\n    logger.error(\"‚ùå Reenviar confirmaci√≥n:\", error.message);\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// ‚úÖ SOLICITAR RECUPERACI√ìN DE CONTRASE√ëA\r\nexport const sendRecovery = async (req: Request, res: Response) => {\r\n  const { email } = req.body;\r\n\r\n  try {\r\n    await authService.sendResetPassword(email);\r\n    res.json({ message: \"Correo de recuperaci√≥n enviado.\" });\r\n  } catch (error: any) {\r\n    logger.error(\"‚ùå Enviar recuperaci√≥n:\", error.message);\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n\r\n// ‚úÖ CAMBIAR CONTRASE√ëA\r\nexport const resetPassword = async (req: Request, res: Response) => {\r\n  const { token, password } = req.body;\r\n\r\n  try {\r\n    await authService.resetPassword(token, password);\r\n    res.json({ message: \"Contrase√±a actualizada con √©xito.\" });\r\n  } catch (error: any) {\r\n    logger.error(\"‚ùå Reset password:\", error.message);\r\n    res.status(400).json({ message: error.message });\r\n  }\r\n};\r\n",
  "src\\controllers\\cart.controller.ts": "// cart.controller.ts",
  "src\\controllers\\cart_items.controller.ts": "// cart_items.controller.ts",
  "src\\controllers\\confirm.controller.ts": "// src/controllers/confirm.controller.ts\r\nimport { Request, Response } from \"express\";\r\nimport {\r\n    confirmAccountService,\r\n    resendConfirmationService,\r\n  } from \"../services/confirm.service\";  \r\n\r\nexport const confirmUser = async (req: Request, res: Response): Promise<void> => {\r\n    const { token } = req.params;\r\n    const { email } = req.query;\r\n\r\n    try {\r\n        const result = await confirmAccountService(token, email as string | undefined);\r\n        res.status(result.code).json({ message: result.message });\r\n    } catch (error: any) {\r\n        console.error(\"‚ùå Error al confirmar:\", error);\r\n        res.status(500).json({ message: \"Error en el servidor\" });\r\n    }\r\n};\r\n\r\nexport const resendConfirmation = async (req: Request, res: Response): Promise<void> => {\r\n    const { email } = req.body;\r\n\r\n    try {\r\n        await resendConfirmationService(email);\r\n        res.status(200).json({\r\n            message: \"Se envi√≥ un nuevo enlace de confirmaci√≥n a tu correo\",\r\n        });\r\n    } catch (error: any) {\r\n        console.error(\"‚ùå Error al reenviar confirmaci√≥n:\", error.message || error);\r\n        res.status(400).json({\r\n            message: error.message || \"Error al reenviar confirmaci√≥n\",\r\n        });\r\n    }\r\n};\r\n",
  "src\\controllers\\dashboard.controller.ts": "// backend/src/controllers/dashboard.controller.ts\r\nimport { Response } from \"express\";\r\nimport { AuthenticatedRequest } from \"../types/express\";\r\n\r\nexport const getDashboard = async (\r\n  req: AuthenticatedRequest,\r\n  res: Response\r\n): Promise<void> => {\r\n  const user = req.user;\r\n\r\n  res.json({\r\n    message: `Hola ${user.name}, bienvenido al dashboard.`,\r\n    role: user.role,\r\n  });\r\n};\r\n",
  "src\\controllers\\emailLog.controller.ts": "// emailLog.controller.ts",
  "src\\controllers\\freePass.controller.ts": "// freePass.controller.ts",
  "src\\controllers\\invoice.controller.ts": "// invoice.controller.ts",
  "src\\controllers\\permission.controller.ts": "// permission.controller.ts",
  "src\\controllers\\qrScan.controller.ts": "// qrScan.controller.ts",
  "src\\controllers\\recover.controller.ts": "import { Request, Response } from \"express\";\r\nimport * as authService from \"../services/recovery.service\";\r\n\r\n// ‚úÖ 1. Enviar correo de recuperaci√≥n\r\nexport const sendRecovery = async (req: Request, res: Response) => {\r\n  const { email } = req.body;\r\n\r\n  try {\r\n    await authService.sendRecoveryService(email);\r\n    res.json({ message: \"Correo de recuperaci√≥n enviado. Revisa tu bandeja.\" });\r\n  } catch (error: any) {\r\n    console.error(\"‚ùå Error en sendRecovery:\", error.message);\r\n    res.status(error.status || 500).json({ message: error.message || \"Error del servidor\" });\r\n  }\r\n};\r\n\r\n// ‚úÖ 2. Verificar token\r\nexport const checkTokenStatus = async (req: Request, res: Response) => {\r\n  const { token } = req.body;\r\n\r\n  try {\r\n    const isValid = await authService.checkTokenStatusService(token);\r\n    res.json({ valid: isValid });\r\n  } catch (error: any) {\r\n    console.error(\"‚ùå Error en checkTokenStatus:\", error.message);\r\n    res.status(500).json({ message: \"Error al verificar token\" });\r\n  }\r\n};\r\n\r\n// ‚úÖ 3. Cambiar contrase√±a\r\nexport const resetPassword = async (req: Request, res: Response) => {\r\n  const { token } = req.params;\r\n  const { password } = req.body;\r\n\r\n  try {\r\n    await authService.resetPasswordService(token, password);\r\n    res.json({ message: \"Contrase√±a actualizada correctamente\" });\r\n  } catch (error: any) {\r\n    console.error(\"‚ùå Error en resetPassword:\", error.message);\r\n    res.status(500).json({ message: \"Error al cambiar contrase√±a\" });\r\n  }\r\n};\r\n",
  "src\\controllers\\role.controller.ts": "// role.controller.ts",
  "src\\controllers\\rolePermission.controller.ts": "// rolePermission.controller.ts",
  "src\\controllers\\service.controller.ts": "// service.controller.ts",
  "src\\controllers\\user.controller.ts": "// user.controller.ts",
  "src\\controllers\\userPermissions.controller.ts": "// userPermissions.controller.ts",
  "src\\index.ts": "// index.ts\r\nimport app from './app';\r\nimport logger from './utils/logger';\r\n\r\nconst PORT = process.env.PORT || 3000;\r\n\r\napp.listen(PORT, () => {\r\n  logger.info(`‚úÖ Servidor iniciado en http://localhost:${PORT}`);\r\n});",
  "src\\middlewares\\auth.middleware.ts": "import { Request, Response, NextFunction } from \"express\";\r\nimport { verifyToken, TokenPayload } from \"../config/jwt\";\r\nimport { AuthenticatedRequest } from \"../types/express\";\r\n\r\nexport const authMiddleware = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void => {\r\n  const authHeader = req.headers.authorization;\r\n\r\n  if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\r\n    res.status(401).json({ message: \"Token no proporcionado\" });\r\n    return;\r\n  }\r\n\r\n  const token = authHeader.split(\" \")[1];\r\n\r\n  try {\r\n    const decoded = verifyToken(token) as TokenPayload;\r\n    (req as AuthenticatedRequest).user = decoded;\r\n    next();\r\n  } catch {\r\n    res.status(401).json({ message: \"Token inv√°lido o expirado\" });\r\n  }\r\n};\r\n",
  "src\\middlewares\\errorHandler.middleware.ts": "// middlewares/errorHandler.middleware.ts\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport logger from \"../utils/logger\";\r\n\r\nconst errorHandler = (\r\n  err: any,\r\n  _req: Request,\r\n  res: Response,\r\n  _next: NextFunction\r\n) => {\r\n  logger.error(`‚ùå Error global: ${err.stack || err.message}`);\r\n  res.status(err.status || 500).json({ message: err.message || \"Error interno del servidor\" });\r\n};\r\n\r\nexport default errorHandler;\r\n",
  "src\\middlewares\\limiter.ts": "",
  "src\\middlewares\\notFound.middleware.ts": "// middlewares/notFound.middleware.ts\r\nimport { Request, Response } from \"express\";\r\nimport logger from \"../utils/logger\";\r\n\r\nconst notFound = (req: Request, res: Response) => {\r\n  logger.warn(`üö´ Ruta no encontrada: ${req.method} ${req.originalUrl}`);\r\n  res.status(404).json({ message: \"Ruta no encontrada\" });\r\n};\r\n\r\nexport default notFound;\r\n",
  "src\\middlewares\\role.middleware.ts": "// role.middleware.ts\r\nimport { Response, NextFunction } from 'express';\r\nimport { AuthenticatedRequest } from '../types/express'; // Solo importa esto si usas req.user\r\n\r\nexport const checkRole = (allowedRoles: string[]) => {\r\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction): void => {\r\n    const user = req.user;\r\n\r\n    if (!user || !allowedRoles.includes(user.role)) {\r\n      res.status(403).json({ message: 'Acceso denegado: rol insuficiente' });\r\n      return;\r\n    }\r\n\r\n    next();\r\n  };\r\n};\r\n",
  "src\\middlewares\\validateInput.ts": "// middlewares/validateInput.ts\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ZodSchema } from \"zod\";\r\n\r\nexport const validate = (schema: ZodSchema) => async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n) => {\r\n    try {\r\n        req.body = await schema.parseAsync(req.body);\r\n        next();\r\n    } catch (err: any) {\r\n        res.status(400).json({ errors: err.errors });\r\n    }\r\n};\r\n",
  "src\\middlewares\\validation.middleware.ts": "// validation.middleware.ts",
  "src\\models\\cart.model.ts": "// cart.model.ts",
  "src\\models\\emailLog.model.ts": "// emailLog.model.ts",
  "src\\models\\freePass.model.ts": "// freePass.model.ts",
  "src\\models\\index.ts": "// index.ts",
  "src\\models\\invoice.model.ts": "// invoice.model.ts",
  "src\\models\\permission.model.ts": "// permission.model.ts",
  "src\\models\\qrScan.model.ts": "// qrScan.model.ts",
  "src\\models\\role.model.ts": "// role.model.ts",
  "src\\models\\service.model.ts": "// service.model.ts",
  "src\\models\\user.model.ts": "// user.model.ts",
  "src\\repositories\\user.repository.ts": "// src/repositories/user.repository.ts\r\nimport db from \"../config/db\";\r\nimport { RowDataPacket, ResultSetHeader } from \"mysql2\";\r\n\r\nexport const findUserByEmail = async (email: string) => {\r\n  const [rows] = await db.query<RowDataPacket[]>(\r\n    \"SELECT u.*, r.name as role_name FROM users u LEFT JOIN roles r ON u.role_id = r.id WHERE u.email = ?\",\r\n    [email]\r\n  );\r\n  return rows[0] || null;\r\n};\r\n\r\nexport const createUser = async (user: {\r\n  name: string;\r\n  email: string;\r\n  password_hash: string;\r\n  phone: string;\r\n  role_id: number;\r\n  confirmation_token: string;\r\n  confirmation_expires: Date;\r\n}) => {\r\n  const {\r\n    name,\r\n    email,\r\n    password_hash,\r\n    phone,\r\n    role_id,\r\n    confirmation_token,\r\n    confirmation_expires,\r\n  } = user;\r\n\r\n  const [result] = await db.query<ResultSetHeader>(\r\n    `INSERT INTO users (name, email, password_hash, phone, role_id, confirmation_token, confirmation_expires)\r\n     VALUES (?, ?, ?, ?, ?, ?, ?)`,\r\n    [\r\n      name,\r\n      email,\r\n      password_hash,\r\n      phone,\r\n      role_id,\r\n      confirmation_token,\r\n      confirmation_expires,\r\n    ]\r\n  );\r\n\r\n  return result.insertId;\r\n};\r\n\r\nexport const updateConfirmationToken = async (\r\n  email: string,\r\n  token: string,\r\n  expires: Date\r\n) => {\r\n  await db.query(\r\n    `UPDATE users SET confirmation_token = ?, confirmation_expires = ? WHERE email = ?`,\r\n    [token, expires, email]\r\n  );\r\n};\r\n\r\nexport const updateResetToken = async (\r\n  email: string,\r\n  token: string,\r\n  expires: Date\r\n) => {\r\n  await db.query(\r\n    `UPDATE users SET reset_token = ?, reset_expires = ? WHERE email = ?`,\r\n    [token, expires, email]\r\n  );\r\n};\r\n\r\n// src/repositories/user.repository.ts\r\n\r\nexport const findUserByResetToken = async (token: string) => {\r\n  const [rows] = await db.query<RowDataPacket[]>(\r\n    `\r\n    SELECT id, email, password_hash, reset_expires \r\n    FROM users \r\n    WHERE reset_token = ? AND reset_expires > NOW()`,\r\n    [token]\r\n  );\r\n  return rows[0] || null;\r\n};\r\n\r\nexport const updatePassword = async (\r\n  userId: number,\r\n  newPasswordHash: string\r\n) => {\r\n  await db.query(\r\n    `UPDATE users SET password_hash = ?, reset_token = NULL, reset_expires = NULL WHERE id = ?`,\r\n    [newPasswordHash, userId]\r\n  );\r\n};\r\n\r\n// Consultas para confrimaci√≥n de cuenta\r\nexport const findUserByToken = async (token: string) => {\r\n  const [rows] = await db.query<RowDataPacket[]>(\r\n    \"SELECT * FROM users WHERE confirmation_token = ?\",\r\n    [token]\r\n  );\r\n  return rows[0];\r\n};\r\n\r\nexport const checkConfirmedByEmail = async (email: string) => {\r\n  const [rows] = await db.query<RowDataPacket[]>(\r\n    \"SELECT is_confirmed FROM users WHERE email = ?\",\r\n    [email]\r\n  );\r\n  return rows[0];\r\n};\r\n\r\nexport const confirmUserById = async (id: number) => {\r\n  await db.query(\r\n    `UPDATE users \r\n     SET is_confirmed = 1, confirmation_token = NULL, confirmation_expires = NULL \r\n     WHERE id = ?`,\r\n    [id]\r\n  );\r\n};\r\n\r\nexport const findUserBasicByEmail = async (email: string) => {\r\n  const [rows] = await db.query<RowDataPacket[]>(\r\n    \"SELECT id FROM users WHERE email = ?\",\r\n    [email]\r\n  );\r\n  return rows[0] || null;\r\n};\r\n\r\nexport const getResetTokenExpiration = async (token: string) => {\r\n  const [rows] = await db.query<RowDataPacket[]>(\r\n    \"SELECT reset_expires FROM users WHERE reset_token = ?\",\r\n    [token]\r\n  );\r\n  return rows[0] || null;\r\n};\r\n",
  "src\\routes\\admin.routes.ts": "// admin.routes.ts",
  "src\\routes\\auth.routes.ts": "import { Router } from 'express';\r\nimport {\r\n    login,\r\n    register,\r\n    logout,\r\n} from '../controllers/auth.controller';\r\nimport { confirmUser, resendConfirmation } from '../controllers/confirm.controller';\r\n// import { checkTokenStatus } from '../controllers/tokenStatus.controller';\r\nimport { sendRecovery, checkTokenStatus, resetPassword } from '../controllers/recover.controller'; // üëà nuevo\r\n\r\nimport { authMiddleware } from '../middlewares/auth.middleware';\r\nimport { getDashboard } from '../controllers/dashboard.controller';\r\nimport { checkRole } from '../middlewares/role.middleware';\r\nimport { validate } from \"../middlewares/validateInput\";\r\nimport { registerSchema, loginSchema } from \"../validations/auth.schema\";\r\nimport { loginLimiter } from \"../config/rateLimit\";\r\n\r\nconst router = Router();\r\n\r\n// Auth\r\nrouter.post('/register', validate(registerSchema), register);\r\nrouter.post('/login', loginLimiter, validate(loginSchema), login);\r\nrouter.post('/logout', logout);\r\n\r\n// Confirmaci√≥n\r\nrouter.get('/confirm/:token', confirmUser);\r\nrouter.post('/resend-confirmation', loginLimiter, resendConfirmation);\r\n\r\n// Recuperaci√≥n de contrase√±a\r\nrouter.post('/send-recovery', loginLimiter, sendRecovery);   // üëà nuevo\r\nrouter.post('/reset-password', resetPassword); // üëà nuevo\r\nrouter.post(\"/reset-password/:token\", resetPassword); // üëà importante\r\nrouter.post('/check-token-status', checkTokenStatus); // üëà nuevo\r\n\r\n// Protegidas\r\nrouter.get('/admin/dashboard', authMiddleware, checkRole(['admin']), getDashboard);\r\n\r\nexport default router;\r\n",
  "src\\routes\\cart.routes.ts": "// cart.routes.ts",
  "src\\routes\\cart_items.routes.ts": "// cart_items.routes.ts",
  "src\\routes\\clients.routes.ts": "// clients.routes.ts",
  "src\\routes\\dashboard.routes.ts": "import { Router } from \"express\";\r\nimport { getDashboard } from \"../controllers/dashboard.controller\";\r\nimport { authMiddleware } from \"../middlewares/auth.middleware\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/dashboard\", authMiddleware, getDashboard);\r\n\r\nexport default router;\r\n",
  "src\\routes\\emailLog.routes.ts": "// emailLog.routes.ts",
  "src\\routes\\freePass.routes.ts": "// freePass.routes.ts",
  "src\\routes\\index.ts": "// index.ts",
  "src\\routes\\invoices.routes.ts": "// invoices.routes.ts",
  "src\\routes\\permission.routes.ts": "// permission.routes.ts",
  "src\\routes\\qrScan.routes.ts": "// qrScan.routes.ts",
  "src\\routes\\role.routes.ts": "// role.routes.ts",
  "src\\routes\\rolePermissions.routes.ts": "// rolePermissions.routes.ts",
  "src\\routes\\services.routes.ts": "// services.routes.ts",
  "src\\routes\\userPermissions.routes.ts": "// userPermissions.routes.ts",
  "src\\routes\\users.routes.ts": "// users.routes.ts",
  "src\\services\\auth.service.ts": "// src/services/auth.service.ts\r\nimport bcrypt from \"bcryptjs\";\r\nimport crypto from \"crypto\";\r\nimport { generateToken } from \"../config/jwt\";\r\nimport sendConfirmationEmail from \"../utils/mailerConfirmation\";\r\nimport {\r\n  createUser,\r\n  findUserByEmail,\r\n  findUserByResetToken,\r\n  updateConfirmationToken,\r\n  updatePassword,\r\n  updateResetToken,\r\n} from \"../repositories/user.repository\";\r\nimport {\r\n  validateEmail,\r\n  validateNewPassword,\r\n  validatePasswordChange,\r\n} from \"../utils/validators\";\r\n\r\n// ‚úÖ REGISTRO\r\nexport const registerUser = async ({\r\n  name,\r\n  email,\r\n  password,\r\n  phone,\r\n}: {\r\n  name: string;\r\n  email: string;\r\n  password: string;\r\n  phone: string;\r\n}) => {\r\n  validateEmail(email); // Validaci√≥n robusta del mail\r\n  validateNewPassword(password); // Validaci√≥n Robusta del password\r\n\r\n  const existingUser = await findUserByEmail(email);\r\n  if (existingUser) throw new Error(\"El correo ya est√° registrado\");\r\n\r\n  const password_hash = await bcrypt.hash(password, 10);\r\n  const confirmation_token = crypto.randomBytes(32).toString(\"hex\");\r\n  const confirmation_expires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 horas\r\n\r\n  await createUser({\r\n    name,\r\n    email,\r\n    password_hash,\r\n    phone,\r\n    role_id: 4,\r\n    confirmation_token,\r\n    confirmation_expires,\r\n  });\r\n\r\n  await sendConfirmationEmail(email, confirmation_token);\r\n};\r\n\r\n// ‚úÖ LOGIN\r\nexport const loginUser = async (email: string, password: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"Correo no registrado\");\r\n\r\n  if (!user.is_confirmed) {\r\n    const tokenExpired =\r\n      !user.confirmation_token ||\r\n      !user.confirmation_expires ||\r\n      new Date(user.confirmation_expires) < new Date();\r\n\r\n    throw {\r\n      message: \"Debes confirmar tu cuenta\",\r\n      tokenExpired,\r\n    };\r\n  }\r\n\r\n  const isMatch = await bcrypt.compare(password, user.password_hash);\r\n  if (!isMatch) throw new Error(\"Contrase√±a incorrecta\");\r\n\r\n  const token = generateToken({\r\n    id: user.id,\r\n    email: user.email,\r\n    name: user.name,\r\n    role: user.role_name || \"client\",\r\n  });\r\n\r\n  return {\r\n    token,\r\n    user: {\r\n      email: user.email,\r\n      isConfirmed: Boolean(user.is_confirmed),\r\n    },\r\n  };\r\n};\r\n\r\n// ‚úÖ ENVIAR ENLACE DE RECUPERACI√ìN\r\nexport const sendResetPassword = async (email: string) => {\r\n  const user = await findUserByEmail(email);\r\n  if (!user) throw new Error(\"Correo no registrado\");\r\n\r\n  const token = crypto.randomBytes(32).toString(\"hex\");\r\n  const expires = new Date(Date.now() + 60 * 60 * 1000); // 1 hora\r\n\r\n  await updateResetToken(email, token, expires);\r\n\r\n  // Enviar el correo (solo console.log por ahora)\r\n  console.log(\r\n    `üìß Enlace de recuperaci√≥n: http://localhost:3000/reset-password/${token}`\r\n  );\r\n};\r\n\r\n// ‚úÖ RESTABLECER CONTRASE√ëA\r\nexport const resetPassword = async (token: string, newPassword: string) => {\r\n  const user = await findUserByResetToken(token);\r\n  if (!user) throw new Error(\"Token inv√°lido o expirado\");\r\n\r\n  //Validaci√≥n robusta\r\n  validatePasswordChange(newPassword, user.email, user.password_hash);\r\n\r\n  const password_hash = await bcrypt.hash(newPassword, 10);\r\n  await updatePassword(user.id, password_hash);\r\n};\r\n\r\n// ‚úÖ VERIFICAR token de recuperaci√≥n\r\nexport const checkResetToken = async (token: string) => {\r\n  const user = await findUserByResetToken(token);\r\n  return user && new Date(user.reset_expires) > new Date();\r\n};\r\n\r\n// ‚úÖ\r\n",
  "src\\services\\confirm.service.ts": "// src/services/confirm.service.ts\r\nimport crypto from \"crypto\";\r\nimport sendConfirmationEmail from \"../utils/mailerConfirmation\";\r\nimport * as userRepo from \"../repositories/user.repository\";\r\n\r\nexport const confirmAccountService = async (token: string, email?: string) => {\r\n  const user = await userRepo.findUserByToken(token);\r\n\r\n  if (!user) {\r\n    if (email) {\r\n      const userFromEmail = await userRepo.findUserByEmail(email);\r\n      if (userFromEmail?.is_confirmed === 1) {\r\n        return { code: 200, message: \"La cuenta ya ha sido confirmada.\" };\r\n      }\r\n    }\r\n    return { code: 400, message: \"Token inv√°lido o expirado\" };\r\n  }\r\n\r\n  if (user.is_confirmed === 1) {\r\n    return { code: 200, message: \"La cuenta ya ha sido confirmada.\" };\r\n  }\r\n\r\n  if (new Date(user.confirmation_expires) < new Date()) {\r\n    return { code: 400, message: \"Token inv√°lido o expirado\" };\r\n  }\r\n\r\n  await userRepo.confirmUserById(user.id);\r\n  return { code: 200, message: \"Cuenta confirmada exitosamente.\" };\r\n};\r\n\r\nexport const resendConfirmationService = async (email: string) => {\r\n  const user = await userRepo.findUserByEmail(email);\r\n  if (!user) throw new Error(\"Correo no encontrado\");\r\n\r\n  if (user.is_confirmed) throw new Error(\"La cuenta ya est√° confirmada\");\r\n\r\n  const token = crypto.randomBytes(32).toString(\"hex\");\r\n  const expires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24h\r\n\r\n  await userRepo.updateConfirmationToken(email, token, expires);\r\n  await sendConfirmationEmail(email, token);\r\n};\r\n",
  "src\\services\\recovery.service.ts": "import crypto from \"crypto\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport sendRecoveryEmail from \"../utils/mailerRecovery\";\r\nimport * as userRepo from \"../repositories/user.repository\";\r\n\r\n// ‚úÖ 1. Enviar correo de recuperaci√≥n\r\nexport const sendRecoveryService = async (email: string) => {\r\n  const user = await userRepo.findUserBasicByEmail(email);\r\n  if (!user) throw new Error(\"Correo no registrado\");\r\n\r\n  const token = crypto.randomBytes(32).toString(\"hex\");\r\n  const expires = new Date(Date.now() + 60 * 60 * 1000); // 1 hora\r\n\r\n  await userRepo.updateResetToken(email, token, expires);\r\n  await sendRecoveryEmail(email, token);\r\n};\r\n\r\n// ‚úÖ 2. Verificar token\r\nexport const checkTokenStatusService = async (token: string): Promise<boolean> => {\r\n  const resetData = await userRepo.getResetTokenExpiration(token);\r\n  if (!resetData || new Date(resetData.reset_expires) < new Date()) return false;\r\n  return true;\r\n};\r\n\r\n// ‚úÖ 3. Cambiar contrase√±a\r\nexport const resetPasswordService = async (token: string, newPassword: string) => {\r\n  const user = await userRepo.findUserByResetToken(token);\r\n  if (!user) throw new Error(\"Token inv√°lido o expirado\");\r\n\r\n  const password_hash = await bcrypt.hash(newPassword, 10);\r\n  await userRepo.updatePassword(user.id, password_hash);\r\n};\r\n",
  "src\\types\\express\\index.d.ts": "import { Request } from \"express\";\r\nimport { TokenPayload } from \"../config/jwt\";\r\n\r\nexport interface AuthenticatedRequest extends Request {\r\n  user?: TokenPayload;\r\n}\r\n",
  "src\\types\\xss-clean.d.ts": "declare module 'xss-clean' {\r\n    import { RequestHandler } from 'express';\r\n    const xssClean: () => RequestHandler;\r\n    export default xssClean;\r\n  }\r\n  ",
  "src\\utils\\hash.ts": "// utils/hash.ts\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const hashPassword = async (password: string) => await bcrypt.hash(password, 10);\r\nexport const verifyPassword = async (plain: string, hashed: string) => await bcrypt.compare(plain, hashed);\r\n",
  "src\\utils\\logger.ts": "// utils/logger.ts\r\nimport winston from \"winston\";\r\n\r\nconst logger = winston.createLogger({\r\n  level: \"info\",\r\n  transports: [\r\n    new winston.transports.Console(),\r\n    new winston.transports.File({ filename: \"logs/app.log\" }),\r\n  ],\r\n});\r\n\r\nexport default logger;\r\n",
  "src\\utils\\mailerConfirmation.ts": "// backend/utils/mailerConfirmation.ts\r\nimport { transporter } from \"../config/mailer\";\r\nimport logger from \"../utils/logger\";\r\n\r\nconst sendConfirmationEmail = async (email: string, token: string) => {\r\n  const link = `${process.env.FRONTEND_URL}/confirm/${token}?email=${encodeURIComponent(email)}`;\r\n  logger.info(`üì® Enviando correo de confirmaci√≥n a ${email}`);\r\n\r\n  await transporter.sendMail({\r\n    from: '\"Aqua River Park\" <no-reply@aquariverpark.com>',\r\n    to: email,\r\n    subject: \"Confirma tu cuenta\",\r\n    html: `\r\n    <div style=\"margin: 0; padding: 0; background-color: #e0f7fa; font-family: 'Segoe UI', sans-serif;\">\r\n      <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        <tr>\r\n          <td align=\"center\" style=\"padding: 40px 10px;\">\r\n            <table cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; width: 100%; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 40px;\">\r\n              <tr>\r\n                <td align=\"center\" style=\"padding-bottom: 20px;\">\r\n                  <h2 style=\"font-size: 26px; color: #0ea5e9; margin: 0;\">üåä ¬°Bienvenido a Aqua River Park!</h2>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 16px; color: #444; text-align: center; padding-bottom: 20px;\">\r\n                   Gracias por registrarte. Estamos felices de tenerte en nuestra comunidad. Para completar tu registro, por favor confirma tu cuenta haciendo clic a continuaci√≥n.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td align=\"center\" style=\"padding: 20px 0;\">\r\n                  <a href=\"${link}\" style=\"background-color: #0ea5e9; color: white; text-decoration: none; padding: 14px 30px; border-radius: 8px; font-size: 16px; display: inline-block;\">\r\n                    Confirmar cuenta\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 14px; color: #666; text-align: center; padding-top: 20px;\">\r\n                  Si no solicitaste este registro, puedes ignorar este mensaje.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"border-top: 1px solid #eee; padding-top: 30px; text-align: center; font-size: 12px; color: #999;\">\r\n                  ¬© ${new Date().getFullYear()} Aqua River Park. Todos los derechos reservados.<br><br>\r\n                  S√≠guenos en nuestras redes sociales:\r\n                  <div style=\"margin-top: 10px;\">\r\n                    <a href=\"https://www.instagram.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/instagram-new.png\" alt=\"Instagram\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                    <a href=\"https://www.facebook.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/facebook-new.png\" alt=\"Facebook\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                    <a href=\"https://www.tiktok.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/tiktok--v1.png\" alt=\"TikTok\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                    <a href=\"https://www.youtube.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/youtube-play.png\" alt=\"YouTube\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  `,\r\n  });\r\n};\r\n\r\nexport default sendConfirmationEmail;\r\n",
  "src\\utils\\mailerRecovery.ts": "// backend/utils/mailerRecovery.ts\r\nimport { transporter } from \"../config/mailer\";\r\nimport logger from \"./logger\";\r\n\r\nconst sendRecoveryEmail = async (email: string, token: string) => {\r\n  const link = `${process.env.FRONTEND_URL}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n  logger.info(`üì® Enviando correo de confirmaci√≥n a ${email}`);\r\n\r\n  await transporter.sendMail({\r\n    from: '\"Aqua River Park\" <no-reply@aquariverpark.com>',\r\n    to: email,\r\n    subject: \"Recupera tu contrase√±a - Aqua River Park\",\r\n    html: `\r\n    <div style=\"margin: 0; padding: 0; background-color: #e0f7fa; font-family: 'Segoe UI', sans-serif;\">\r\n      <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        <tr>\r\n          <td align=\"center\" style=\"padding: 40px 10px;\">\r\n            <table cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; width: 100%; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 40px;\">\r\n              <tr>\r\n                <td align=\"center\" style=\"padding-bottom: 20px;\">\r\n                  <h2 style=\"font-size: 26px; color: #0ea5e9; margin: 0;\">üîê Recuperaci√≥n de contrase√±a</h2>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 16px; color: #444; text-align: center; padding-bottom: 20px;\">\r\n                   Hemos recibido una solicitud para restablecer tu contrase√±a. Haz clic en el siguiente bot√≥n para continuar:\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td align=\"center\" style=\"padding: 20px 0;\">\r\n                  <a href=\"${link}\" style=\"background-color: #0ea5e9; color: white; text-decoration: none; padding: 14px 30px; border-radius: 8px; font-size: 16px; display: inline-block;\">\r\n                    Recuperar contrase√±a\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 14px; color: #666; text-align: center; padding-top: 20px;\">\r\n                  Si no realizaste esta solicitud, puedes ignorar este mensaje. Este enlace caduca en 1 hora.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"border-top: 1px solid #eee; padding-top: 30px; text-align: center; font-size: 12px; color: #999;\">\r\n                  ¬© ${new Date().getFullYear()} Aqua River Park. Todos los derechos reservados.<br><br>\r\n                  S√≠guenos en nuestras redes sociales:\r\n                  <div style=\"margin-top: 10px;\">\r\n                    <a href=\"https://www.instagram.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/instagram-new.png\" alt=\"Instagram\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                    <a href=\"https://www.facebook.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/facebook-new.png\" alt=\"Facebook\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                    <a href=\"https://www.tiktok.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/tiktok--v1.png\" alt=\"TikTok\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                    <a href=\"https://www.youtube.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/youtube-play.png\" alt=\"YouTube\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n    `,\r\n  });\r\n};\r\n\r\nexport default sendRecoveryEmail;\r\n",
  "src\\utils\\tokens.ts": "// utils/tokens.ts\r\nimport crypto from \"crypto\";\r\n\r\nexport const generateToken = (length = 32): string => {\r\n  return crypto.randomBytes(length).toString(\"hex\");\r\n};\r\n",
  "src\\utils\\validators.ts": "import bcrypt from \"bcryptjs\";\r\n\r\n// Validaci√≥n de email\r\nexport const validateEmail = (email: string) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(email)) {\r\n    throw new Error(\"Correo electr√≥nico inv√°lido.\");\r\n  }\r\n};\r\n\r\n// Solo valida que sea fuerte (para el registro)\r\nexport const validateNewPassword = (password: string): void => {\r\n  const minLength = 8;\r\n  const hasUpperCase = /[A-Z]/.test(password);\r\n  const hasLowerCase = /[a-z]/.test(password);\r\n  const hasNumber = /\\d/.test(password);\r\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n  if (password.length < minLength)\r\n    throw new Error(\"La contrase√±a debe tener al menos 8 caracteres.\");\r\n\r\n  if (!hasUpperCase)\r\n    throw new Error(\"La contrase√±a debe tener al menos una letra may√∫scula.\");\r\n\r\n  if (!hasLowerCase)\r\n    throw new Error(\"La contrase√±a debe tener al menos una letra min√∫scula.\");\r\n\r\n  if (!hasNumber)\r\n    throw new Error(\"La contrase√±a debe incluir al menos un n√∫mero.\");\r\n\r\n  if (!hasSpecialChar)\r\n    throw new Error(\"La contrase√±a debe incluir un car√°cter especial.\");\r\n};\r\n\r\n// Valida que no sea igual a la anterior ni al correo\r\nexport const validatePasswordChange = async (\r\n  newPassword: string,\r\n  email: string,\r\n  currentPasswordHash: string\r\n): Promise<void> => {\r\n  validateNewPassword(newPassword);\r\n\r\n  if (newPassword === email)\r\n    throw new Error(\"La contrase√±a no debe ser igual al correo.\");\r\n\r\n  const isSameAsOld = await bcrypt.compare(newPassword, currentPasswordHash);\r\n  if (isSameAsOld)\r\n    throw new Error(\"La nueva contrase√±a no puede ser igual a la anterior.\");\r\n};\r\n\r\n",
  "src\\validations\\auth.schema.ts": "// validations/auth.schema.ts\r\nimport { z } from \"zod\";\r\n\r\nexport const loginSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(8),\r\n});\r\n\r\nexport const registerSchema = z.object({\r\n  name: z.string().min(2),\r\n  email: z.string().email(),\r\n  phone: z.string().regex(/^\\d{10}$/),\r\n  password: z.string().min(8),\r\n  confirmPassword: z.string(),\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: \"Las contrase√±as no coinciden\",\r\n  path: [\"confirmPassword\"],\r\n});\r\n"
}