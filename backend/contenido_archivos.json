{
  "keys\\private.key": "-----BEGIN PRIVATE KEY-----\r\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDocJADn1P1wvhc\r\nd+cnfeo6Qd+2VxBO6GBN7wZQxNAD9AB0ANjjBb5J3CFBKfVLB2Pu90FiJNTIBpsc\r\nR9PCTup18azpUllYWEm5LcwS2ABTIwJVOHWd8AScy61POpdj1knwHHrBPRtZL6ml\r\nq9aHadiepEiPAgwpnLcz5J5siPUoJJofElSSCwyAYOHELb7hor0qXQ+3eOjwiItv\r\ndCxgs4CV8uroxxYQLoYY8oKPw00X9apAvXifA3jnKyZ2D5CJ1Xa63Gyx7BtrJ1Mu\r\newygN5HbVDysr7OwM90uUvbrl5fPRfHWTSq069A2fJzIgGA1VxkSV+Vef997ViFx\r\ngcdPl5DTAgMBAAECggEBAMD7k9YuFntZYPME6foz5KBxyNeO+Y9KB4stBMVSYpKl\r\npyqo+WmjfxW7mjCMMYgVnrbsunBNvAxGz8lvKTWOZ8N8397n7B4ZTzxb9a8/fyWH\r\nT4yJz71NZcb4o++/6amOZNziCFkf7vDhTayrOvY6vwsXwtZZENgLsV94VMAwBbtI\r\n8uwNCjSCBK4PmBlIat3YKq12sGBrgW19Q0UA//OFP6C0L5xN92jnu03srqejlXaa\r\nO3K9FqNnsKqsK0LYb5z8x6PCpoVCBb60jVgQ/IuXkV9RiCzpOFQ2+jESPH9Jq6Os\r\nzdSmotCSd17pEm3uaPSXPI/WKoZFUITrA6cv+bF8qkECgYEA/r9Rbg+BSQf0Nl2H\r\nFDoQa/xfnQjD0hmrC7uQL3Xy+KjFrenTN2/EJAR5G7shIHcJrVEj5cJWeO5XxJgZ\r\nAvxuJCfvr9SFrlotc9yJL58OUvs/NNT6EYlTORzoyW15hAJKIcfqPLmOVePIcuZ/\r\nqw6PU53ZvmO29nhdgn0+ON1ZTesCgYEA6ZUpwFsSpm6GMoBMpx/tD8sgGsgFHozy\r\n6WaF2VO9X5GLyQwjOHTyY8jlSlr5eOSsSynctvldR9nThhSFmzViLpHl0f/bF5ED\r\nJmqzOsKMa1AoHaleoCZ3fFcQMeOjSTQrD6PZBhMNfuiURvt2IIB9zkRSN3tvURwi\r\nh2tpP1xARrkCgYEA8Q6bAHm9jhzvs44XJ0W2imibFV7Y5fQSDh0jWDXVgAU8YdB0\r\nZO3m/WoaK+qMc0sRJic0v9KAvxhShx6h9Fhn5ODBh3GkOhLtFcjnK9/nzxAehGDQ\r\nbU20KcQ4Z3qnVQpRmduxxFqV3KKZ6FhDENvLNoWVKPr0hA/r9HGNMoQKYJcCgYBQ\r\nTbLL6cOQqmDCje9MaaJzko7YBjoUVbrRWSjdHXf2mjAnj1+wciw+9/s0Q/COindd\r\nY+f4k+Ro5k9dQkLoqEK35frP5plpEba2h2pU4juqTSVthSP+BRuBCOGNdUhWy3Oe\r\nbeMXvoceQVFw0dS7udEGj+CAKJSNmxGX4uqNGOcUKQKBgQDFbaB30H9krd/9Ai0x\r\nkH5i88QpKInxk29YlidZ1nEkn/R1NbrKiK1ayTVd8xWOWdkztUqQnECoQd8XAo5o\r\nGHBGvhK9dia/jent0qnJ2of94Mk7mhAeXaSM8v5vKwMbutcGxqJAfxyIjYpvhqFg\r\nwHLfbJuxbNfXS9mzYZrxBw+WdQ==\r\n-----END PRIVATE KEY-----\r\n",
  "keys\\public.key": "-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6HCQA59T9cL4XHfnJ33q\r\nOkHftlcQTuhgTe8GUMTQA/QAdADY4wW+SdwhQSn1Swdj7vdBYiTUyAabHEfTwk7q\r\ndfGs6VJZWFhJuS3MEtgAUyMCVTh1nfAEnMutTzqXY9ZJ8Bx6wT0bWS+ppavWh2nY\r\nnqRIjwIMKZy3M+SebIj1KCSaHxJUkgsMgGDhxC2+4aK9Kl0Pt3jo8IiLb3QsYLOA\r\nlfLq6McWEC6GGPKCj8NNF/WqQL14nwN45ysmdg+QidV2utxssewbaydTLnsMoDeR\r\n21Q8rK+zsDPdLlL265eXz0Xx1k0qtOvQNnycyIBgNVcZElflXn/fe1YhcYHHT5eQ\r\n0wIDAQAB\r\n-----END PUBLIC KEY-----\r\n",
  "src\\app.ts": "import express from \"express\";\r\nimport cors from \"cors\";\r\nimport helmet from \"helmet\";\r\nimport cookieParser from \"cookie-parser\";\r\n\r\nimport dashboardRoutes from \"@/interfaces/routes/dashboard/dashboard.routes\";\r\nimport authRoutes from \"@/interfaces/routes/auth/auth.routes\";\r\nimport userRoutes from \"@/interfaces/routes/user.routes\";\r\nimport healthRoutes from \"@/interfaces/routes/health/health.routes\";\r\nimport metricsRoutes from \"@/interfaces/routes/health/metrics.routes\";\r\n\r\nimport { metricsMiddleware } from \"@/infraestructure/metrics/requestDurationHistogram\";\r\nimport { sanitizeRequest } from \"@/interfaces/middlewares/sanitize/sanitizeRequest\";\r\nimport notFound from \"@/interfaces/middlewares/error/notFound.middleware\";\r\nimport errorHandler from \"@/interfaces/middlewares/error/errorHandler.middleware\";\r\n\r\nconst app = express();\r\nconst FRONTEND = process.env.FRONTEND_ORIGIN || \"http://localhost:5173\";\r\n\r\napp.use(cookieParser());\r\napp.use(express.json({ limit: \"10kb\" }));\r\napp.use(\r\n  helmet.hsts({\r\n    maxAge: 60 * 60 * 24 * 365,\r\n    includeSubDomains: true,\r\n  })\r\n);\r\napp.use(\r\n  cors({\r\n    origin: FRONTEND,\r\n    credentials: true,\r\n  })\r\n);\r\napp.use(sanitizeRequest);\r\napp.use(metricsMiddleware);\r\n\r\n// Rutas\r\napp.use(\"/api\", dashboardRoutes);\r\napp.use(\"/api\", authRoutes);\r\napp.use(\"/api\", userRoutes);\r\napp.use(\"/api\", healthRoutes);\r\napp.use(\"/api\", metricsRoutes);\r\n\r\n// Errores\r\napp.use(notFound);\r\napp.use(errorHandler);\r\n\r\nexport default app;\r\n",
  "src\\config\\db.ts": "// db.ts\r\nimport mysql from 'mysql2/promise';\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\n\r\nexport const db = mysql.createPool({\r\n  host: process.env.DB_HOST || 'localhost',\r\n  user: process.env.DB_USER || 'root',\r\n  password: process.env.DB_PASSWORD || '',\r\n  database: process.env.DB_NAME || 'aqua_river_park',\r\n  waitForConnections: true,\r\n  connectionLimit: 10,\r\n  queueLimit: 0\r\n});\r\n\r\n// console.log('Conectando a la DB con usuario:', process.env.DB_USER);\r\n// console.log('Contraseña:', process.env.DB_PASSWORD);\r\n\r\n\r\n\r\nexport default db;\r\n",
  "src\\config\\jwtKeys.ts": "// backend/src/config/jwtKeys.ts\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport dotenv from \"dotenv\";\r\ndotenv.config();\r\n\r\n// si env es absoluto, lo usamos; si no, lo resolvemos desde process.cwd()\r\nconst keysDirEnv = process.env.JWT_KEYS_DIR || \"keys\";\r\nconst keysDir = path.isAbsolute(keysDirEnv)\r\n  ? keysDirEnv\r\n  : path.resolve(process.cwd(), keysDirEnv);\r\n\r\nexport const PRIVATE_KEY = fs.readFileSync(\r\n  path.join(keysDir, \"private.key\"),\r\n  \"utf-8\"\r\n);\r\nexport const PUBLIC_KEY = fs.readFileSync(\r\n  path.join(keysDir, \"public.key\"),\r\n  \"utf-8\"\r\n);\r\n",
  "src\\config\\mailer.ts": "// backend/config/mailer.ts\r\nimport dotenv from 'dotenv';\r\ndotenv.config();\r\nimport nodemailer from 'nodemailer';\r\n\r\nexport const transporter = nodemailer.createTransport({\r\n  host: process.env.MAIL_HOST,\r\n  port: Number(process.env.MAIL_PORT),\r\n  auth: {\r\n    user: process.env.MAIL_USER,\r\n    pass: process.env.MAIL_PASS\r\n  }\r\n});\r\n",
  "src\\domain\\models\\user\\cart.model.ts": "export interface Cart {\r\n    id: number;\r\n    user_id?: number | null;\r\n    created_at?: Date;\r\n  }\r\n  ",
  "src\\domain\\models\\user\\cartItem.model.ts": "export interface CartItem {\r\n    id: number;\r\n    cart_id?: number | null;\r\n    service_id?: number | null;\r\n    quantity: number;\r\n  }\r\n  ",
  "src\\domain\\models\\user\\permission.model.ts": "export interface Permission {\r\n    id: number;\r\n    name: string;\r\n  }\r\n  ",
  "src\\domain\\models\\user\\role.model.ts": "\r\n// src/domain/models/user/role.model.ts\r\nexport interface Role {\r\n    id: number;\r\n    name: string;\r\n  }\r\n  ",
  "src\\domain\\models\\user\\service.model.ts": "export type ServiceType = 'entrada' | 'reserva' | 'evento' | 'vip';\r\n\r\nexport interface Service {\r\n  id: number;\r\n  title: string;\r\n  description?: string | null;\r\n  price: number;\r\n  duration?: string | null;\r\n  image_url?: string | null;\r\n  type?: ServiceType;\r\n  created_at?: Date;\r\n}\r\n",
  "src\\domain\\models\\user\\user.model.ts": "export interface User {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  password_hash: string;\r\n  created_at: Date;\r\n  is_confirmed?: boolean;\r\n  confirmation_token?: string | null;\r\n  confirmation_expires?: Date | null;\r\n  reset_token?: string | null;\r\n  reset_expires?: Date | null;\r\n  last_login?: Date | null;\r\n  avatar_url?: string | null;\r\n  login_attempts?: number;\r\n  locked_until?: Date | null;\r\n  role_id?: number | null;\r\n  phone?: string | null;\r\n}\r\n",
  "src\\domain\\ports\\role.repository.ts": "// src/domain/ports/role.repository.ts\r\nimport { Role } from \"@/domain/models/user/role.model\";\r\n\r\nexport interface RoleRepository {\r\n  findAllRoles(): Promise<Role[]>;\r\n  findRoleById(id: number): Promise<Role | null>;\r\n  findRoleByName(name: string): Promise<Role | null>;\r\n  createRole(role: Omit<Role, \"id\">): Promise<number>;\r\n  deleteRole(id: number): Promise<void>;\r\n}\r\n",
  "src\\domain\\ports\\user.repository.ts": "import { User } from \"@/domain/models/user/user.model\";\r\n\r\nexport interface UserRepository {\r\n  findUserByEmail(\r\n    email: string\r\n  ): Promise<(User & { role_name?: string }) | null>;\r\n  createUser(\r\n    user: Omit<\r\n      User,\r\n      | \"id\"\r\n      | \"created_at\"\r\n      | \"last_login\"\r\n      | \"avatar_url\"\r\n      | \"login_attempts\"\r\n      | \"locked_until\"\r\n    >\r\n  ): Promise<number>;\r\n  updateConfirmationToken(\r\n    email: string,\r\n    token: string,\r\n    expires: Date\r\n  ): Promise<void>;\r\n  updateResetToken(email: string, token: string, expires: Date): Promise<void>;\r\n  findUserByResetToken(\r\n    token: string\r\n  ): Promise<\r\n    Pick<User, \"id\" | \"email\" | \"password_hash\" | \"reset_expires\"> | null\r\n  >;\r\n  updatePassword(userId: number, newPasswordHash: string): Promise<void>;\r\n  findUserByToken(token: string): Promise<User | null>;\r\n  checkConfirmedByEmail(\r\n    email: string\r\n  ): Promise<Pick<User, \"is_confirmed\"> | null>;\r\n  confirmUserById(id: number): Promise<void>;\r\n  findUserBasicByEmail(email: string): Promise<Pick<User, \"id\"> | null>;\r\n  getResetTokenExpiration(\r\n    token: string\r\n  ): Promise<Pick<User, \"reset_expires\"> | null>;\r\n\r\n  // ←  NUEVO MÉTODO\r\n  findUserById(\r\n    id: number\r\n  ): Promise<(User & { role_name?: string }) | null>;\r\n}\r\n",
  "src\\domain\\services\\auth\\auth.service.ts": "// src/domain/services/auth/auth.service.ts\r\n\r\nimport { UserRepository } from \"@/domain/ports/user.repository\";\r\nimport sendConfirmationEmail from \"@/infraestructure/mail/mailerConfirmation\";\r\nimport {\r\n  validateEmail,\r\n  validateNewPassword,\r\n  validatePasswordChange,\r\n} from \"@/shared/validations/validators\";\r\nimport {\r\n  generateAccessToken,\r\n  generateRefreshToken,\r\n  verifyRefreshToken,\r\n} from \"@/shared/security/jwt\";\r\nimport { hashPassword } from \"@/shared/hash\";\r\nimport { generateToken } from \"@/shared/tokens\";\r\nimport { errorMessages } from \"@/shared/errors/errorMessages\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\nimport { createError } from \"@/shared/errors/createError\";\r\nimport logger from \"@/infraestructure/logger/logger\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport {\r\n  passwordResetCounter,\r\n  userLoginCounter,\r\n  userRegisterCounter,\r\n} from \"@/infraestructure/metrics/customMetrics\";\r\nimport { TokenPayload } from \"@/types/express\";\r\n\r\ntype RoleName = \"admin\" | \"client\";\r\n\r\n/**\r\n * Registro de nuevo usuario\r\n */\r\nexport const registerUser = async (\r\n  deps: { userRepository: UserRepository },\r\n  {\r\n    name,\r\n    email,\r\n    password,\r\n    phone,\r\n  }: {\r\n    name: string;\r\n    email: string;\r\n    password: string;\r\n    phone: string;\r\n  }\r\n) => {\r\n  const { userRepository } = deps;\r\n\r\n  validateEmail(email);\r\n  validateNewPassword(password);\r\n\r\n  const existing = await userRepository.findUserByEmail(email);\r\n  if (existing) {\r\n    throw createError(\r\n      errorMessages.emailAlreadyRegistered,\r\n      errorCodes.EMAIL_ALREADY_REGISTERED,\r\n      409\r\n    );\r\n  }\r\n\r\n  const password_hash = await hashPassword(password);\r\n  const confirmation_token = generateToken();\r\n  const confirmation_expires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24h\r\n\r\n  await userRepository.createUser({\r\n    name,\r\n    email,\r\n    password_hash,\r\n    phone,\r\n    role_id: 4,\r\n    confirmation_token,\r\n    confirmation_expires,\r\n  });\r\n\r\n  userRegisterCounter.inc();\r\n  await sendConfirmationEmail(email, confirmation_token);\r\n};\r\n\r\n/**\r\n * Inicio de sesión de usuario\r\n */\r\nexport const loginUser = async (\r\n  deps: { userRepository: UserRepository },\r\n  email: string,\r\n  password: string\r\n) => {\r\n  const { userRepository } = deps;\r\n  const user = await userRepository.findUserByEmail(email);\r\n\r\n  if (!user) {\r\n    throw createError(\r\n      errorMessages.invalidCredentials,\r\n      errorCodes.INVALID_CREDENTIALS,\r\n      404\r\n    );\r\n  }\r\n\r\n  if (!user.is_confirmed) {\r\n    const expired =\r\n      !user.confirmation_token ||\r\n      !user.confirmation_expires ||\r\n      new Date(user.confirmation_expires) < new Date();\r\n    const e = createError(\r\n      errorMessages.accountNotConfirmed,\r\n      errorCodes.ACCOUNT_NOT_CONFIRMED,\r\n      401\r\n    );\r\n    (e as any).tokenExpired = expired;\r\n    throw e;\r\n  }\r\n\r\n  const match = await bcrypt.compare(password, user.password_hash);\r\n  if (!match) {\r\n    throw createError(\r\n      errorMessages.invalidCredentials,\r\n      errorCodes.INVALID_CREDENTIALS,\r\n      401\r\n    );\r\n  }\r\n\r\n  userLoginCounter.inc();\r\n\r\n  // Payload mínimo para JWT\r\n  const payload: TokenPayload = {\r\n    sub: user.id,\r\n    role: (user.role_name || \"client\") as RoleName,\r\n  };\r\n\r\n  const accessToken = generateAccessToken(payload);\r\n  const refreshToken = generateRefreshToken(payload);\r\n\r\n  return {\r\n    accessToken,\r\n    refreshToken,\r\n    user: {\r\n      id: user.id,\r\n      name: user.name,\r\n      role: payload.role,\r\n    },\r\n  };\r\n};\r\n\r\n/**\r\n * Refrescar token de acceso usando refresh token\r\n */\r\nexport const refreshAccessToken = async (\r\n  deps: { userRepository: UserRepository },\r\n  refreshToken: string\r\n) => {\r\n  try {\r\n    const decoded = verifyRefreshToken(refreshToken);\r\n\r\n    const userId = decoded.sub;\r\n    const role = decoded.role;\r\n    await deps.userRepository.findUserById(userId);\r\n\r\n    const newPayload: TokenPayload = { sub: userId, role };\r\n    const accessToken = generateAccessToken(newPayload);\r\n\r\n    return { accessToken };\r\n  } catch {\r\n    throw createError(\r\n      errorMessages.tokenInvalidOrExpired,\r\n      errorCodes.TOKEN_INVALID_OR_EXPIRED,\r\n      403\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Enviar enlace de recuperación de contraseña\r\n */\r\nexport const sendResetPassword = async (\r\n  deps: { userRepository: UserRepository },\r\n  email: string\r\n) => {\r\n  const { userRepository } = deps;\r\n  const user = await userRepository.findUserByEmail(email);\r\n  if (!user) {\r\n    throw createError(\r\n      errorMessages.emailNotRegistered,\r\n      errorCodes.EMAIL_NOT_REGISTERED,\r\n      404\r\n    );\r\n  }\r\n\r\n  const token = generateToken();\r\n  const expires = new Date(Date.now() + 60 * 60 * 1000); // 1h\r\n  await userRepository.updateResetToken(email, token, expires);\r\n\r\n  passwordResetCounter.inc();\r\n  logger.info(`📧 Enlace de recuperación enviado a ${email}`);\r\n};\r\n\r\n/**\r\n * Cambiar contraseña usando token válido\r\n */\r\nexport const resetPassword = async (\r\n  deps: { userRepository: UserRepository },\r\n  token: string,\r\n  newPassword: string\r\n) => {\r\n  const { userRepository } = deps;\r\n  const user = await userRepository.findUserByResetToken(token);\r\n\r\n  passwordResetCounter.inc();\r\n\r\n  if (!user) {\r\n    throw createError(\r\n      errorMessages.invalidOrExpiredToken,\r\n      errorCodes.INVALID_OR_EXPIRED_TOKEN,\r\n      400\r\n    );\r\n  }\r\n\r\n  await validatePasswordChange(newPassword, user.email, user.password_hash);\r\n  const password_hash = await hashPassword(newPassword);\r\n  await userRepository.updatePassword(user.id, password_hash);\r\n};\r\n\r\n/**\r\n * Verificar si un token de recuperación es válido\r\n */\r\nexport const checkResetToken = async (\r\n  deps: { userRepository: UserRepository },\r\n  token: string\r\n): Promise<boolean> => {\r\n  const { userRepository } = deps;\r\n  const user = await userRepository.findUserByResetToken(token);\r\n\r\n  if (!user || !user.reset_expires) {\r\n    return false;\r\n  }\r\n\r\n  const expires = user.reset_expires instanceof Date\r\n    ? user.reset_expires\r\n    : new Date(user.reset_expires);\r\n\r\n  return expires > new Date();\r\n};\r\n",
  "src\\domain\\services\\auth\\confirm.service.ts": "// src/domain/services/auth/confirm.service.ts\r\nimport { UserRepository } from \"@/domain/ports/user.repository\";\r\nimport sendConfirmationEmail from \"@/infraestructure/mail/mailerConfirmation\";\r\nimport { generateToken } from \"@/shared/tokens\";\r\nimport { errorMessages } from \"@/shared/errors/errorMessages\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\nimport { createError } from \"@/shared/errors/createError\";\r\n\r\n/**\r\n * ✅ Confirma la cuenta de un usuario mediante un token\r\n */\r\nexport const confirmAccountService = async (\r\n  deps: { userRepository: UserRepository },\r\n  token: string,\r\n  email?: string\r\n): Promise<{ code: number; message: string }> => {\r\n  const { userRepository } = deps;\r\n\r\n  const user = await userRepository.findUserByToken(token);\r\n\r\n  if (!user) {\r\n    if (email) {\r\n      const userFromEmail = await userRepository.findUserByEmail(email);\r\n      if (userFromEmail?.is_confirmed) {\r\n        return { code: 200, message: errorMessages.accountAlreadyConfirmed };\r\n      }\r\n    }\r\n    return { code: 400, message: errorMessages.invalidOrExpiredToken };\r\n  }\r\n\r\n  if (user.is_confirmed) {\r\n    return { code: 200, message: errorMessages.accountAlreadyConfirmed };\r\n  }\r\n\r\n  if (!user.confirmation_expires || new Date(user.confirmation_expires) < new Date()) {\r\n    return { code: 400, message: errorMessages.invalidOrExpiredToken };\r\n  }\r\n\r\n  await userRepository.confirmUserById(user.id);\r\n\r\n  return { code: 200, message: errorMessages.accountConfirmedSuccessfully };\r\n};\r\n\r\n/**\r\n * ✅ Reenvía un nuevo token de confirmación al usuario\r\n */\r\nexport const resendConfirmationService = async (\r\n  deps: { userRepository: UserRepository },\r\n  email: string\r\n): Promise<void> => {\r\n  const { userRepository } = deps;\r\n\r\n  const user = await userRepository.findUserByEmail(email);\r\n\r\n  if (!user) {\r\n    throw createError(\r\n      errorMessages.emailNotRegistered,\r\n      errorCodes.EMAIL_NOT_REGISTERED,\r\n      404\r\n    );\r\n  }\r\n\r\n  if (user.is_confirmed) {\r\n    throw createError(\r\n      errorMessages.accountAlreadyConfirmed,\r\n      errorCodes.ACCOUNT_ALREADY_CONFIRMED,\r\n      409\r\n    );\r\n  }\r\n\r\n  const token = generateToken();\r\n  const expires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 horas\r\n\r\n  await userRepository.updateConfirmationToken(email, token, expires);\r\n  await sendConfirmationEmail(email, token);\r\n};\r\n",
  "src\\domain\\services\\auth\\recovery.service.ts": "// src/domain/services/auth/recovery.service.ts\r\nimport sendRecoveryEmail from \"@/infraestructure/mail/mailerRecovery\";\r\nimport { UserRepository } from \"@/domain/ports/user.repository\";\r\nimport { validatePasswordChange } from \"@/shared/validations/validators\";\r\nimport { hashPassword } from \"@/shared/hash\";\r\nimport { generateToken } from \"@/shared/tokens\";\r\nimport { errorMessages } from \"@/shared/errors/errorMessages\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\nimport { createError } from \"@/shared/errors/createError\";\r\n\r\n/**\r\n * ✅ Enviar enlace de recuperación por correo\r\n */\r\nexport const sendRecoveryService = async (\r\n  deps: { userRepository: UserRepository },\r\n  email: string\r\n) => {\r\n  const { userRepository } = deps;\r\n  const user = await userRepository.findUserBasicByEmail(email);\r\n\r\n  if (!user) {\r\n    throw createError(errorMessages.emailNotRegistered, errorCodes.EMAIL_NOT_REGISTERED);\r\n  }\r\n\r\n  const token = generateToken();\r\n  const expires = new Date(Date.now() + 60 * 60 * 1000); // 1 hora\r\n\r\n  await userRepository.updateResetToken(email, token, expires);\r\n  await sendRecoveryEmail(email, token);\r\n};\r\n\r\n/**\r\n * ✅ Verificar validez de token de recuperación\r\n */\r\nexport const checkTokenStatusService = async (\r\n  deps: { userRepository: UserRepository },\r\n  token: string\r\n): Promise<boolean> => {\r\n  const { userRepository } = deps;\r\n  const resetData = await userRepository.getResetTokenExpiration(token);\r\n\r\n  return !!resetData?.reset_expires && new Date(resetData.reset_expires) > new Date();\r\n};\r\n\r\n/**\r\n * ✅ Cambiar contraseña mediante token válido\r\n */\r\nexport const resetPasswordService = async (\r\n  deps: { userRepository: UserRepository },\r\n  token: string,\r\n  newPassword: string\r\n) => {\r\n  const { userRepository } = deps;\r\n  const user = await userRepository.findUserByResetToken(token);\r\n\r\n  if (!user) {\r\n    throw createError(errorMessages.invalidOrExpiredToken, errorCodes.INVALID_OR_EXPIRED_TOKEN);\r\n  }\r\n\r\n  // Validar reglas de seguridad de contraseña\r\n  await validatePasswordChange(newPassword, user.email, user.password_hash);\r\n\r\n  const password_hash = await hashPassword(newPassword);\r\n  await userRepository.updatePassword(user.id, password_hash);\r\n};\r\n",
  "src\\index.ts": "// index.ts\r\nimport app from \"@/app\";\r\nimport logger from \"@/infraestructure/logger/logger\";\r\n\r\nconst PORT = process.env.PORT || 3000;\r\n\r\napp.listen(PORT, () => {\r\n  logger.info(`✅ Servidor iniciado en http://localhost:${PORT}`);\r\n});\r\n",
  "src\\infraestructure\\db\\role.repository.ts": "import { db } from \"@/config/db\";\r\nimport { RowDataPacket, ResultSetHeader } from \"mysql2\";\r\nimport { Role } from \"@/domain/models/user/role.model\";\r\nimport { RoleRepository } from \"@/domain/ports/role.repository\";\r\n\r\nexport const roleRepository: RoleRepository = {\r\n  async findAllRoles(): Promise<Role[]> {\r\n    const [rows] = await db.query<RowDataPacket[]>(\"SELECT * FROM roles\");\r\n    return rows as unknown as Role[];\r\n  },\r\n\r\n  async findRoleById(id: number): Promise<Role | null> {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      \"SELECT * FROM roles WHERE id = ?\",\r\n      [id]\r\n    );\r\n    return (rows[0] as Role) || null;\r\n  },\r\n\r\n  async findRoleByName(name: string): Promise<Role | null> {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      \"SELECT * FROM roles WHERE name = ?\",\r\n      [name]\r\n    );\r\n    return (rows[0] as Role) || null;\r\n  },\r\n\r\n  async createRole(role: Omit<Role, \"id\">): Promise<number> {\r\n    const [result] = await db.query<ResultSetHeader>(\r\n      \"INSERT INTO roles (name) VALUES (?)\",\r\n      [role.name]\r\n    );\r\n    return result.insertId;\r\n  },\r\n\r\n  async deleteRole(id: number): Promise<void> {\r\n    await db.query(\"DELETE FROM roles WHERE id = ?\", [id]);\r\n  },\r\n};\r\n",
  "src\\infraestructure\\db\\user.repository.ts": "// src/infraestructure/db/user.repository.ts\r\nimport db from \"@/config/db\";\r\nimport { RowDataPacket, ResultSetHeader } from \"mysql2\";\r\nimport { User } from \"@/domain/models/user/user.model\";\r\nimport { UserRepository } from \"@/domain/ports/user.repository\";\r\n\r\nexport const userRepository: UserRepository = {\r\n  async findUserByEmail(email: string) {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      `SELECT u.*, r.name AS role_name\r\n         FROM users u\r\n         LEFT JOIN roles r ON u.role_id = r.id\r\n        WHERE u.email = ?`,\r\n      [email]\r\n    );\r\n    return (rows[0] as User & { role_name?: string }) || null;\r\n  },\r\n\r\n  async createUser(user) {\r\n    const {\r\n      name,\r\n      email,\r\n      password_hash,\r\n      phone,\r\n      role_id,\r\n      confirmation_token,\r\n      confirmation_expires,\r\n    } = user;\r\n\r\n    const [result] = await db.query<ResultSetHeader>(\r\n      `INSERT INTO users\r\n         (name, email, password_hash, phone, role_id, confirmation_token, confirmation_expires)\r\n       VALUES (?,     ?,     ?,             ?,     ?,       ?,                   ?)`,\r\n      [\r\n        name,\r\n        email,\r\n        password_hash,\r\n        phone,\r\n        role_id,\r\n        confirmation_token,\r\n        confirmation_expires,\r\n      ]\r\n    );\r\n\r\n    return result.insertId;\r\n  },\r\n\r\n  async updateConfirmationToken(email, token, expires) {\r\n    await db.query(\r\n      `UPDATE users\r\n          SET confirmation_token = ?, confirmation_expires = ?\r\n        WHERE email = ?`,\r\n      [token, expires, email]\r\n    );\r\n  },\r\n\r\n  async updateResetToken(email, token, expires) {\r\n    await db.query(\r\n      `UPDATE users\r\n          SET reset_token = ?, reset_expires = ?\r\n        WHERE email = ?`,\r\n      [token, expires, email]\r\n    );\r\n  },\r\n\r\n  async findUserByResetToken(token) {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      `SELECT id, email, password_hash, reset_expires\r\n         FROM users\r\n        WHERE reset_token = ? AND reset_expires > NOW()`,\r\n      [token]\r\n    );\r\n    return (\r\n      (rows[0] as Pick<User, \"id\" | \"email\" | \"password_hash\" | \"reset_expires\">) ||\r\n      null\r\n    );\r\n  },\r\n\r\n  async updatePassword(userId, newPasswordHash) {\r\n    await db.query(\r\n      `UPDATE users\r\n          SET password_hash = ?, reset_token = NULL, reset_expires = NULL\r\n        WHERE id = ?`,\r\n      [newPasswordHash, userId]\r\n    );\r\n  },\r\n\r\n  async findUserByToken(token) {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      `SELECT * FROM users WHERE confirmation_token = ?`,\r\n      [token]\r\n    );\r\n    return (rows[0] as User) || null;\r\n  },\r\n\r\n  async checkConfirmedByEmail(email) {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      `SELECT is_confirmed FROM users WHERE email = ?`,\r\n      [email]\r\n    );\r\n    return (rows[0] as Pick<User, \"is_confirmed\">) || null;\r\n  },\r\n\r\n  async confirmUserById(id) {\r\n    await db.query(\r\n      `UPDATE users\r\n          SET is_confirmed = 1,\r\n              confirmation_token = NULL,\r\n              confirmation_expires = NULL\r\n        WHERE id = ?`,\r\n      [id]\r\n    );\r\n  },\r\n\r\n  async findUserBasicByEmail(email) {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      `SELECT id FROM users WHERE email = ?`,\r\n      [email]\r\n    );\r\n    return (rows[0] as Pick<User, \"id\">) || null;\r\n  },\r\n\r\n  async getResetTokenExpiration(token) {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      `SELECT reset_expires FROM users WHERE reset_token = ?`,\r\n      [token]\r\n    );\r\n    return (rows[0] as Pick<User, \"reset_expires\">) || null;\r\n  },\r\n\r\n  // Nuevo método para lookup por ID (para /me)\r\n  async findUserById(id) {\r\n    const [rows] = await db.query<RowDataPacket[]>(\r\n      `SELECT u.*, r.name AS role_name\r\n         FROM users u\r\n         LEFT JOIN roles r ON u.role_id = r.id\r\n        WHERE u.id = ?`,\r\n      [id]\r\n    );\r\n    return (rows[0] as User & { role_name?: string }) || null;\r\n  },\r\n};\r\n",
  "src\\infraestructure\\logger\\errorHandler.ts": "// src/infraestructure/logger/errorHandler.ts\r\nimport logger from \"./logger\";\r\n\r\nexport const logError = (context: string, error: any) => {\r\n  const message = error?.message || error;\r\n  const code = error?.code ? ` | Code: ${error.code}` : \"\";\r\n  const status = error?.status ? ` | Status: ${error.status}` : \"\";\r\n  logger.error(`❌ ${context}: ${message}${code}${status}`);\r\n};\r\n",
  "src\\infraestructure\\logger\\logger.ts": "// utils/logger.ts\r\nimport winston from \"winston\";\r\n\r\nconst logger = winston.createLogger({\r\n  level: \"info\",\r\n  format: winston.format.combine(\r\n    winston.format.colorize(),\r\n    winston.format.timestamp({ format: \"YYYY-MM-DD HH:mm:ss\" }),\r\n    winston.format.printf(({ level, message, timestamp }) => {\r\n      return `[${timestamp}] ${level}: ${message}`;\r\n    })\r\n  ),\r\n  transports: [\r\n    new winston.transports.Console(),\r\n    new winston.transports.File({ filename: \"logs/app.log\" }),\r\n  ],\r\n});\r\n\r\nexport default logger;",
  "src\\infraestructure\\mail\\mailerConfirmation.ts": "// backend/utils/mailerConfirmation.ts\r\nimport { sendEmail } from \"@/infraestructure/mail/mailService\";\r\n\r\nconst sendConfirmationEmail = async (email: string, token: string) => {\r\n  const link = `${process.env.FRONTEND_URL}/confirm/${token}?email=${encodeURIComponent(email)}`;\r\n\r\n  const html = `\r\n <div style=\"margin: 0; padding: 0; background-color: #e0f7fa; font-family: 'Segoe UI', sans-serif;\">\r\n      <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        <tr>\r\n          <td align=\"center\" style=\"padding: 40px 10px;\">\r\n            <table cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; width: 100%; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 40px;\">\r\n              <tr>\r\n                <td align=\"center\" style=\"padding-bottom: 20px;\">\r\n                  <h2 style=\"font-size: 26px; color: #0ea5e9; margin: 0;\">🌊 ¡Bienvenido a Aqua River Park!</h2>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 16px; color: #444; text-align: center; padding-bottom: 20px;\">\r\n                   Gracias por registrarte. Estamos felices de tenerte en nuestra comunidad. Para completar tu registro, por favor confirma tu cuenta haciendo clic a continuación.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td align=\"center\" style=\"padding: 20px 0;\">\r\n                  <a href=\"${link}\" style=\"background-color: #0ea5e9; color: white; text-decoration: none; padding: 14px 30px; border-radius: 8px; font-size: 16px; display: inline-block;\">\r\n                    Confirmar cuenta\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 14px; color: #666; text-align: center; padding-top: 20px;\">\r\n                  Si no solicitaste este registro, puedes ignorar este mensaje.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"border-top: 1px solid #eee; padding-top: 30px; text-align: center; font-size: 12px; color: #999;\">\r\n                  © ${new Date().getFullYear()} Aqua River Park. Todos los derechos reservados.<br><br>\r\n                  Síguenos en nuestras redes sociales:\r\n                  <div style=\"margin-top: 10px;\">\r\n                    <a href=\"https://www.instagram.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/instagram-new.png\" alt=\"Instagram\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                    <a href=\"https://www.facebook.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/facebook-new.png\" alt=\"Facebook\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                    <a href=\"https://www.tiktok.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/tiktok--v1.png\" alt=\"TikTok\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                    <a href=\"https://www.youtube.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/youtube-play.png\" alt=\"YouTube\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n                    </a>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  `;\r\n\r\n  await sendEmail({\r\n    to: email,\r\n    subject: \"Confirma tu cuenta\",\r\n    html,\r\n  });\r\n};\r\n\r\nexport default sendConfirmationEmail;\r\n\r\n\r\n\r\n// const sendConfirmationEmail = async (email: string, token: string) => {\r\n//   const link = `${process.env.FRONTEND_URL}/confirm/${token}?email=${encodeURIComponent(email)}`;\r\n//   logger.info(`📨 Enviando correo de confirmación a ${email}`);\r\n\r\n//   await transporter.sendMail({\r\n//     from: '\"Aqua River Park\" <no-reply@aquariverpark.com>',\r\n//     to: email,\r\n//     subject: \"Confirma tu cuenta\",\r\n//     html: `\r\n//     <div style=\"margin: 0; padding: 0; background-color: #e0f7fa; font-family: 'Segoe UI', sans-serif;\">\r\n//       <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n//         <tr>\r\n//           <td align=\"center\" style=\"padding: 40px 10px;\">\r\n//             <table cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; width: 100%; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 40px;\">\r\n//               <tr>\r\n//                 <td align=\"center\" style=\"padding-bottom: 20px;\">\r\n//                   <h2 style=\"font-size: 26px; color: #0ea5e9; margin: 0;\">🌊 ¡Bienvenido a Aqua River Park!</h2>\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td style=\"font-size: 16px; color: #444; text-align: center; padding-bottom: 20px;\">\r\n//                    Gracias por registrarte. Estamos felices de tenerte en nuestra comunidad. Para completar tu registro, por favor confirma tu cuenta haciendo clic a continuación.\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td align=\"center\" style=\"padding: 20px 0;\">\r\n//                   <a href=\"${link}\" style=\"background-color: #0ea5e9; color: white; text-decoration: none; padding: 14px 30px; border-radius: 8px; font-size: 16px; display: inline-block;\">\r\n//                     Confirmar cuenta\r\n//                   </a>\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td style=\"font-size: 14px; color: #666; text-align: center; padding-top: 20px;\">\r\n//                   Si no solicitaste este registro, puedes ignorar este mensaje.\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td style=\"border-top: 1px solid #eee; padding-top: 30px; text-align: center; font-size: 12px; color: #999;\">\r\n//                   © ${new Date().getFullYear()} Aqua River Park. Todos los derechos reservados.<br><br>\r\n//                   Síguenos en nuestras redes sociales:\r\n//                   <div style=\"margin-top: 10px;\">\r\n//                     <a href=\"https://www.instagram.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/instagram-new.png\" alt=\"Instagram\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n//                     </a>\r\n//                     <a href=\"https://www.facebook.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/facebook-new.png\" alt=\"Facebook\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n//                     </a>\r\n//                     <a href=\"https://www.tiktok.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/tiktok--v1.png\" alt=\"TikTok\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n//                     </a>\r\n//                     <a href=\"https://www.youtube.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/youtube-play.png\" alt=\"YouTube\" width=\"24\" height=\"24\" style=\"vertical-align: middle;\" />\r\n//                     </a>\r\n//                   </div>\r\n//                 </td>\r\n//               </tr>\r\n//             </table>\r\n//           </td>\r\n//         </tr>\r\n//       </table>\r\n//     </div>\r\n//   `,\r\n//   });\r\n// };\r\n\r\n// export default sendConfirmationEmail;\r\n",
  "src\\infraestructure\\mail\\mailerRecovery.ts": "// backend/utils/mailerRecovery.ts\r\nimport { sendEmail } from \"@/infraestructure/mail/mailService\";\r\n\r\nconst sendRecoveryEmail = async (email: string, token: string) => {\r\n  const link = `${process.env.FRONTEND_URL}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n\r\n  const html = `\r\n<div style=\"margin: 0; padding: 0; background-color: #e0f7fa; font-family: 'Segoe UI', sans-serif;\">\r\n      <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        <tr>\r\n          <td align=\"center\" style=\"padding: 40px 10px;\">\r\n            <table cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; width: 100%; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 40px;\">\r\n              <tr>\r\n                <td align=\"center\" style=\"padding-bottom: 20px;\">\r\n                  <h2 style=\"font-size: 26px; color: #0ea5e9; margin: 0;\">🔐 Recuperación de contraseña</h2>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 16px; color: #444; text-align: center; padding-bottom: 20px;\">\r\n                   Hemos recibido una solicitud para restablecer tu contraseña. Haz clic en el siguiente botón para continuar:\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td align=\"center\" style=\"padding: 20px 0;\">\r\n                  <a href=\"${link}\" style=\"background-color: #0ea5e9; color: white; text-decoration: none; padding: 14px 30px; border-radius: 8px; font-size: 16px; display: inline-block;\">\r\n                    Recuperar contraseña\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"font-size: 14px; color: #666; text-align: center; padding-top: 20px;\">\r\n                  Si no realizaste esta solicitud, puedes ignorar este mensaje. Este enlace caduca en 1 hora.\r\n                </td>\r\n              </tr>\r\n              <tr>\r\n                <td style=\"border-top: 1px solid #eee; padding-top: 30px; text-align: center; font-size: 12px; color: #999;\">\r\n                  © ${new Date().getFullYear()} Aqua River Park. Todos los derechos reservados.<br><br>\r\n                  Síguenos en nuestras redes sociales:\r\n                  <div style=\"margin-top: 10px;\">\r\n                    <a href=\"https://www.instagram.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/instagram-new.png\" alt=\"Instagram\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                    <a href=\"https://www.facebook.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/facebook-new.png\" alt=\"Facebook\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                    <a href=\"https://www.tiktok.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/tiktok--v1.png\" alt=\"TikTok\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                    <a href=\"https://www.youtube.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n                      <img src=\"https://img.icons8.com/color/48/youtube-play.png\" alt=\"YouTube\" width=\"24\" height=\"24\" />\r\n                    </a>\r\n                  </div>\r\n                </td>\r\n              </tr>\r\n            </table>\r\n          </td>\r\n        </tr>\r\n      </table>\r\n    </div>\r\n  `;\r\n\r\n  await sendEmail({\r\n    to: email,\r\n    subject: \"Recupera tu contraseña - Aqua River Park\",\r\n    html,\r\n  });\r\n};\r\n\r\nexport default sendRecoveryEmail;\r\n\r\n\r\n// const sendRecoveryEmail = async (email: string, token: string) => {\r\n//   const link = `${process.env.FRONTEND_URL}/reset-password?token=${token}&email=${encodeURIComponent(email)}`;\r\n//   logger.info(`📨 Enviando correo de confirmación a ${email}`);\r\n\r\n//   await transporter.sendMail({\r\n//     from: '\"Aqua River Park\" <no-reply@aquariverpark.com>',\r\n//     to: email,\r\n//     subject: \"Recupera tu contraseña - Aqua River Park\",\r\n//     html: `\r\n//     <div style=\"margin: 0; padding: 0; background-color: #e0f7fa; font-family: 'Segoe UI', sans-serif;\">\r\n//       <table role=\"presentation\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n//         <tr>\r\n//           <td align=\"center\" style=\"padding: 40px 10px;\">\r\n//             <table cellpadding=\"0\" cellspacing=\"0\" style=\"max-width: 600px; width: 100%; background-color: #ffffff; border-radius: 12px; box-shadow: 0 4px 12px rgba(0,0,0,0.1); padding: 40px;\">\r\n//               <tr>\r\n//                 <td align=\"center\" style=\"padding-bottom: 20px;\">\r\n//                   <h2 style=\"font-size: 26px; color: #0ea5e9; margin: 0;\">🔐 Recuperación de contraseña</h2>\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td style=\"font-size: 16px; color: #444; text-align: center; padding-bottom: 20px;\">\r\n//                    Hemos recibido una solicitud para restablecer tu contraseña. Haz clic en el siguiente botón para continuar:\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td align=\"center\" style=\"padding: 20px 0;\">\r\n//                   <a href=\"${link}\" style=\"background-color: #0ea5e9; color: white; text-decoration: none; padding: 14px 30px; border-radius: 8px; font-size: 16px; display: inline-block;\">\r\n//                     Recuperar contraseña\r\n//                   </a>\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td style=\"font-size: 14px; color: #666; text-align: center; padding-top: 20px;\">\r\n//                   Si no realizaste esta solicitud, puedes ignorar este mensaje. Este enlace caduca en 1 hora.\r\n//                 </td>\r\n//               </tr>\r\n//               <tr>\r\n//                 <td style=\"border-top: 1px solid #eee; padding-top: 30px; text-align: center; font-size: 12px; color: #999;\">\r\n//                   © ${new Date().getFullYear()} Aqua River Park. Todos los derechos reservados.<br><br>\r\n//                   Síguenos en nuestras redes sociales:\r\n//                   <div style=\"margin-top: 10px;\">\r\n//                     <a href=\"https://www.instagram.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/instagram-new.png\" alt=\"Instagram\" width=\"24\" height=\"24\" />\r\n//                     </a>\r\n//                     <a href=\"https://www.facebook.com/aquariverpark/\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/facebook-new.png\" alt=\"Facebook\" width=\"24\" height=\"24\" />\r\n//                     </a>\r\n//                     <a href=\"https://www.tiktok.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/tiktok--v1.png\" alt=\"TikTok\" width=\"24\" height=\"24\" />\r\n//                     </a>\r\n//                     <a href=\"https://www.youtube.com/@aquariverpark\" target=\"_blank\" style=\"margin: 0 10px;\">\r\n//                       <img src=\"https://img.icons8.com/color/48/youtube-play.png\" alt=\"YouTube\" width=\"24\" height=\"24\" />\r\n//                     </a>\r\n//                   </div>\r\n//                 </td>\r\n//               </tr>\r\n//             </table>\r\n//           </td>\r\n//         </tr>\r\n//       </table>\r\n//     </div>\r\n//     `,\r\n//   });\r\n// };\r\n\r\n// export default sendRecoveryEmail;\r\n",
  "src\\infraestructure\\mail\\mailService.ts": "// src/infraestructure/mail/mailService.ts\r\nimport { transporter } from \"@/config/mailer\";\r\nimport logger from \"@/infraestructure/logger/logger\";\r\n\r\nexport const sendEmail = async ({\r\n  to,\r\n  subject,\r\n  html,\r\n}: {\r\n  to: string;\r\n  subject: string;\r\n  html: string;\r\n}) => {\r\n  try {\r\n    await transporter.sendMail({\r\n      from: '\"Aqua River Park\" <no-reply@aquariverpark.com>',\r\n      to,\r\n      subject,\r\n      html,\r\n    });\r\n    logger.info(`📨 Correo enviado a ${to}: ${subject}`);\r\n  } catch (error: any) {\r\n    logger.error(`❌ Error enviando correo a ${to}: ${error.message}`);\r\n    throw new Error(\"Error al enviar correo\");\r\n  }\r\n};\r\n",
  "src\\infraestructure\\metrics\\customMetrics.ts": "// src/infraestructure/metrics/customMetrics.ts\r\nimport client from \"prom-client\";\r\n\r\nexport const userRegisterCounter = new client.Counter({\r\n  name: \"user_register_total\",\r\n  help: \"Total de usuarios registrados\",\r\n});\r\n\r\nexport const userLoginCounter = new client.Counter({\r\n  name: \"user_login_total\",\r\n  help: \"Total de logins exitosos\",\r\n});\r\n\r\nexport const passwordResetCounter = new client.Counter({\r\n  name: \"password_reset_success_total\",\r\n  help: \"Total de contraseñas restablecidas con éxito\",\r\n});\r\n",
  "src\\infraestructure\\metrics\\metrics.ts": "// src/infraestructure/metrics/metrics.ts\r\nimport client from \"prom-client\";\r\n\r\n// Inicia la colección de métricas predeterminadas\r\nclient.collectDefaultMetrics(); // ✅ no necesita interval desde v15+\r\n\r\n// Exporta el registro global\r\nexport const register = client.register;\r\n",
  "src\\infraestructure\\metrics\\requestDurationHistogram.ts": "// src/infraestructure/metrics/requestDurationHistogram.ts\r\nimport client from \"prom-client\";\r\n\r\nexport const httpRequestDurationHistogram = new client.Histogram({\r\n  name: \"http_request_duration_seconds\",\r\n  help: \"Duración de las solicitudes HTTP en segundos\",\r\n  labelNames: [\"method\", \"route\", \"status_code\"],\r\n  buckets: [0.005, 0.01, 0.05, 0.1, 0.3, 0.5, 1, 2, 5],\r\n});\r\n\r\n// Middleware para medir duración\r\nexport const metricsMiddleware = (req: import(\"express\").Request, res: import(\"express\").Response, next: import(\"express\").NextFunction) => {\r\n  const end = httpRequestDurationHistogram.startTimer();\r\n\r\n  res.on(\"finish\", () => {\r\n    end({\r\n      method: req.method,\r\n      route: req.route?.path || req.path || req.url,\r\n      status_code: res.statusCode,\r\n    });\r\n  });\r\n\r\n  next();\r\n};\r\n",
  "src\\infraestructure\\security\\rateLimit.ts": "// config/rateLimit.ts\r\nimport rateLimit from \"express-rate-limit\";\r\n\r\nexport const loginLimiter = rateLimit({\r\n  windowMs: 15 * 60 * 1000, // 15 minutos\r\n  max: 5,\r\n  message: \"Demasiados intentos. Intenta nuevamente en 15 minutos.\",\r\n  standardHeaders: true,\r\n  legacyHeaders: false,\r\n});\r\n",
  "src\\interfaces\\controllers\\auth\\auth.controller.ts": "// src/interfaces/controllers/auth/auth.controller.ts\r\n\r\nimport { Request, Response } from \"express\";\r\nimport * as authService from \"@/domain/services/auth/auth.service\";\r\nimport { userRepository } from \"@/infraestructure/db/user.repository\";\r\nimport { logError } from \"@/infraestructure/logger/errorHandler\";\r\nimport logger from \"@/infraestructure/logger/logger\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\n\r\nconst isProd = process.env.NODE_ENV === \"production\";\r\n\r\nexport const register = async (req: Request, res: Response): Promise<void> => {\r\n  try {\r\n    await authService.registerUser({ userRepository }, req.body);\r\n    res.status(201).json({\r\n      message: \"Registro exitoso. Revisa tu correo para confirmar tu cuenta.\",\r\n    });\r\n    logger.info(`✅ Usuario registrado: ${req.body.email}`);\r\n  } catch (error: any) {\r\n    logError(\"Registro\", error);\r\n    const status =\r\n      error.code === errorCodes.EMAIL_ALREADY_REGISTERED ? 409 : 400;\r\n    res.status(status).json({ message: error.message });\r\n  }\r\n};\r\n\r\nexport const login = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    const { accessToken, refreshToken, user } = await authService.loginUser(\r\n      { userRepository },\r\n      email,\r\n      password\r\n    );\r\n\r\n    // 1) Cookie del access token\r\n    res.cookie(\"auth_token\", accessToken, {\r\n      httpOnly: true,\r\n      secure: isProd,\r\n      sameSite: \"none\",\r\n      path: \"/\",\r\n      maxAge: 15 * 60 * 1000, // 15 minutos\r\n    });\r\n\r\n    // 2) Cookie del refresh token\r\n    res.cookie(\"refresh_token\", refreshToken, {\r\n      httpOnly: true,\r\n      secure: isProd,\r\n      sameSite: \"none\",\r\n      path: \"/\",\r\n      maxAge: 7 * 24 * 60 * 60 * 1000, // 7 días\r\n    });\r\n\r\n    // 3) Respuesta con el usuario\r\n    res.status(200).json({ success: true, user });\r\n    logger.info(`✅ Login exitoso: ${email}`);\r\n  } catch (error: any) {\r\n    logError(\"Login\", error);\r\n    if (error.code === errorCodes.ACCOUNT_NOT_CONFIRMED) {\r\n      res.status(401).json({\r\n        message: error.message,\r\n        tokenExpired: error.tokenExpired || false,\r\n      });\r\n      return;\r\n    }\r\n    const status =\r\n      error.code === errorCodes.EMAIL_NOT_REGISTERED ||\r\n      error.code === errorCodes.INVALID_CREDENTIALS\r\n        ? 401\r\n        : 400;\r\n    res.status(status).json({\r\n      message: error.message || \"Error al iniciar sesión\",\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = (_req: Request, res: Response): void => {\r\n  res\r\n    .clearCookie(\"auth_token\", {\r\n      httpOnly: true,\r\n      secure: isProd,\r\n      sameSite: \"none\",\r\n      path: \"/\",\r\n    })\r\n    .clearCookie(\"refresh_token\", {\r\n      httpOnly: true,\r\n      secure: isProd,\r\n      sameSite: \"none\",\r\n      path: \"/\",\r\n    })\r\n    .json({ message: \"Sesión cerrada correctamente.\" });\r\n};\r\n\r\nexport const refreshToken = async (\r\n  req: Request,\r\n  res: Response\r\n): Promise<void> => {\r\n  const rt = req.cookies?.refresh_token;\r\n  if (!rt) {\r\n    res.status(401).json({ message: \"No se encontró token de refresco\" });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const { accessToken } = await authService.refreshAccessToken(\r\n      { userRepository },\r\n      rt\r\n    );\r\n\r\n    // Si todo OK, reemitimos nuevo access token\r\n    res\r\n      .cookie(\"auth_token\", accessToken, {\r\n        httpOnly: true,\r\n        secure: isProd,\r\n        sameSite: \"none\",\r\n        path: \"/\",\r\n        maxAge: 15 * 60 * 1000, // 15 minutos\r\n      })\r\n      .json({ success: true });\r\n  } catch (error: any) {\r\n    // Si expiró o es inválido, limpiamos sesión sin log de error\r\n    if (error.code === errorCodes.TOKEN_INVALID_OR_EXPIRED) {\r\n      res\r\n        .clearCookie(\"auth_token\", {\r\n          httpOnly: true,\r\n          secure: isProd,\r\n          sameSite: \"none\",\r\n          path: \"/\",\r\n        })\r\n        .clearCookie(\"refresh_token\", {\r\n          httpOnly: true,\r\n          secure: isProd,\r\n          sameSite: \"none\",\r\n          path: \"/\",\r\n        })\r\n        .status(401)\r\n        .json({\r\n          message: \"Sesión expirada. Por favor, inicia sesión nuevamente.\",\r\n        });\r\n      return; // <— evita doble envío de respuesta\r\n    }\r\n\r\n    // Otros errores internos sí los registramos\r\n    logError(\"Refresh token\", error);\r\n    res.status(500).json({ message: \"Error interno al refrescar token\" });\r\n  }\r\n};\r\n",
  "src\\interfaces\\controllers\\auth\\confirm.controller.ts": "import { Request, Response } from \"express\";\r\nimport {\r\n  confirmAccountService,\r\n  resendConfirmationService,\r\n} from \"@/domain/services/auth/confirm.service\";\r\nimport { userRepository } from \"@/infraestructure/db/user.repository\";\r\nimport logger from \"@/infraestructure/logger/logger\";\r\nimport { logError } from \"@/infraestructure/logger/errorHandler\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\n\r\n// ✅ CONFIRMAR USUARIO\r\nexport const confirmUser = async (req: Request, res: Response): Promise<void> => {\r\n  const { token } = req.params;\r\n  const { email } = req.query;\r\n\r\n  try {\r\n    const result = await confirmAccountService({ userRepository }, token, email as string | undefined);\r\n    res.status(result.code).json({ message: result.message });\r\n  } catch (error: any) {\r\n    logError(\"Confirmar usuario\", error);\r\n\r\n    const status =\r\n      error.code === errorCodes.INVALID_OR_EXPIRED_TOKEN\r\n        ? 400\r\n        : 500;\r\n\r\n    res.status(status).json({ message: error.message || \"Error en el servidor\" });\r\n  }\r\n};\r\n\r\n// ✅ REENVIAR CONFIRMACIÓN\r\nexport const resendConfirmation = async (req: Request, res: Response): Promise<void> => {\r\n  const { email } = req.body;\r\n\r\n  try {\r\n    await resendConfirmationService({ userRepository }, email);\r\n    res.status(200).json({\r\n      message: \"Se envió un nuevo enlace de confirmación a tu correo\",\r\n    });\r\n    logger.info(`✅ Correo de confirmación reenviado: ${email}`);\r\n  } catch (error: any) {\r\n    logError(\"Reenviar confirmación\", error);\r\n\r\n    const status =\r\n      error.code === errorCodes.EMAIL_NOT_REGISTERED\r\n      || error.code === errorCodes.ACCOUNT_ALREADY_CONFIRMED\r\n        ? 409\r\n        : 400;\r\n\r\n    res.status(status).json({\r\n      message: error.message || \"Error al reenviar confirmación\",\r\n    });\r\n  }\r\n};\r\n",
  "src\\interfaces\\controllers\\auth\\recover.controller.ts": "import { Request, Response } from \"express\";\r\nimport * as recoveryService from \"@/domain/services/auth/recovery.service\";\r\nimport { userRepository } from \"@/infraestructure/db/user.repository\";\r\nimport { logError } from \"@/infraestructure/logger/errorHandler\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\n\r\n// ✅ 1. Enviar correo de recuperación\r\nexport const sendRecovery = async (req: Request, res: Response): Promise<void> => {\r\n  const { email } = req.body;\r\n\r\n  try {\r\n    await recoveryService.sendRecoveryService({ userRepository }, email);\r\n    res.status(200).json({ message: \"Correo de recuperación enviado. Revisa tu bandeja.\" });\r\n  } catch (error: any) {\r\n    logError(\"Enviar recuperación\", error);\r\n\r\n    const status =\r\n      error.code === errorCodes.EMAIL_NOT_REGISTERED\r\n        ? 404\r\n        : 400;\r\n\r\n    res.status(status).json({ message: error.message || \"Error al enviar recuperación\" });\r\n  }\r\n};\r\n\r\n// ✅ 2. Verificar token\r\nexport const checkTokenStatus = async (req: Request, res: Response): Promise<void> => {\r\n  const { token } = req.body;\r\n\r\n  try {\r\n    const isValid = await recoveryService.checkTokenStatusService({ userRepository }, token);\r\n    res.status(200).json({ valid: isValid });\r\n  } catch (error: any) {\r\n    logError(\"Verificar token recuperación\", error);\r\n    res.status(500).json({ message: \"Error al verificar token\" });\r\n  }\r\n};\r\n\r\n// ✅ 3. Cambiar contraseña\r\nexport const resetPassword = async (req: Request, res: Response): Promise<void> => {\r\n  const { token } = req.params;\r\n  const { password } = req.body;\r\n\r\n  try {\r\n    await recoveryService.resetPasswordService({ userRepository }, token, password);\r\n    res.status(200).json({ message: \"Contraseña actualizada correctamente\" });\r\n  } catch (error: any) {\r\n    logError(\"Resetear contraseña\", error);\r\n\r\n    const status =\r\n      error.code === errorCodes.INVALID_OR_EXPIRED_TOKEN\r\n        ? 400\r\n        : 500;\r\n\r\n    res.status(status).json({ message: error.message || \"Error al cambiar contraseña\" });\r\n  }\r\n};\r\n",
  "src\\interfaces\\controllers\\dashboard\\dashboard.controller.ts": "// src/interfaces/controllers/dashboard/dashboard.controller.ts\r\n\r\nimport { Response } from \"express\";\r\nimport { AuthenticatedRequest } from \"@/types/express\";\r\nimport { userRepository } from \"@/infraestructure/db/user.repository\";\r\n\r\nexport const getDashboard = async (\r\n  req: AuthenticatedRequest,\r\n  res: Response\r\n): Promise<void> => {\r\n  if (!req.user) {\r\n    res.status(401).json({ message: \"No autorizado\" });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    const user = await userRepository.findUserById(req.user.sub);\r\n    if (!user) {\r\n      res.status(404).json({ message: \"Usuario no encontrado\" });\r\n      return;\r\n    }\r\n\r\n    res.json({\r\n      message: `Hola ${user.name}, bienvenido al dashboard.`,\r\n      role: user.role_name || \"client\",\r\n    });\r\n  } catch (err) {\r\n    console.error(\"Error al obtener dashboard:\", err);\r\n    res.status(500).json({ message: \"Error del servidor\" });\r\n  }\r\n};\r\n",
  "src\\interfaces\\controllers\\health\\health.controller.ts": "// src/interfaces/controllers/health/health.controller.ts\r\nimport { Request, Response } from \"express\";\r\n\r\nexport const healthCheck = async (_req: Request, res: Response) => {\r\n  res.status(200).json({\r\n    status: \"ok\",\r\n    uptime: process.uptime(), // cuánto tiempo ha estado corriendo el server\r\n    timestamp: Date.now(),    // fecha actual\r\n    environment: process.env.NODE_ENV || \"development\",\r\n  });\r\n};\r\n",
  "src\\interfaces\\controllers\\user.controller.ts": "// src/interfaces/controllers/user.controller.ts\r\n\r\nimport { Response, NextFunction } from \"express\";\r\nimport { AuthenticatedRequest } from \"@/types/express\";\r\nimport { userRepository } from \"@/infraestructure/db/user.repository\";\r\nimport { errorMessages } from \"@/shared/errors/errorMessages\";\r\n\r\nexport const getMe = async (\r\n  req: AuthenticatedRequest,\r\n  res: Response,\r\n  next: NextFunction\r\n): Promise<void> => {\r\n  try {\r\n    if (!req.user) {\r\n      res.status(401).json({ message: \"Token no proporcionado\" });\r\n      return;\r\n    }\r\n\r\n    const user = await userRepository.findUserById(req.user.sub);\r\n    if (!user) {\r\n      res.status(404).json({ message: errorMessages.userNotFound });\r\n      return;\r\n    }\r\n\r\n    res.json({\r\n      id: user.id,\r\n      name: user.name,\r\n      email: user.email,\r\n      role: user.role_name || \"client\",\r\n    });\r\n  } catch (err) {\r\n    next(err);\r\n  }\r\n};\r\n",
  "src\\interfaces\\middlewares\\auth\\auth.middleware.ts": "import { Request, Response, NextFunction } from \"express\";\r\nimport { verifyAccessToken } from \"@/shared/security/jwt\";\r\nimport { AuthenticatedRequest } from \"@/types/express\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\n\r\nexport const authMiddleware = (\r\n  req: Request,\r\n  res: Response,\r\n  next: NextFunction\r\n): void => {\r\n  const authHeader = req.headers.authorization;\r\n  const token =\r\n    authHeader?.startsWith(\"Bearer \")\r\n      ? authHeader.slice(7)\r\n      : (req as any).cookies?.auth_token;\r\n\r\n  if (!token) {\r\n    res.status(401).json({ message: \"Token no proporcionado\" });\r\n    return;\r\n  }\r\n\r\n  try {\r\n    // verifyAccessToken retorna { sub, role }\r\n    const payload = verifyAccessToken(token);\r\n\r\n    // Inyectamos directamente el payload (TokenPayload) en req.user\r\n    (req as AuthenticatedRequest).user = payload;\r\n\r\n    next();\r\n  } catch (err: any) {\r\n    const status =\r\n      err.code === errorCodes.TOKEN_INVALID_OR_EXPIRED ? 401 : 500;\r\n    res.status(status).json({ message: err.message });\r\n  }\r\n};\r\n",
  "src\\interfaces\\middlewares\\error\\errorHandler.middleware.ts": "// src/interfaces/middlewares/error/errorHandler.middleware.ts\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport logger from \"@/infraestructure/logger/logger\";\r\nimport { errorMessages } from \"@/shared/errors/errorMessages\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\n\r\nconst errorHandler = (\r\n  err: any,\r\n  _req: Request,\r\n  res: Response,\r\n  _next: NextFunction\r\n) => {\r\n  const status = err.status || 500;\r\n  const code = err.code || errorCodes.INTERNAL_SERVER_ERROR;\r\n  const message = err.message || errorMessages.internalServerError;\r\n\r\n  logger.error(`❌ Error global: ${message}`);\r\n\r\n  res.status(status).json({ code, message });\r\n};\r\n\r\nexport default errorHandler;\r\n",
  "src\\interfaces\\middlewares\\error\\notFound.middleware.ts": "// middlewares/notFound.middleware.ts\r\nimport { Request, Response } from \"express\";\r\nimport logger from \"@/infraestructure/logger/logger\";\r\n\r\nconst notFound = (req: Request, res: Response) => {\r\n  logger.warn(`🚫 Ruta no encontrada: ${req.method} ${req.originalUrl}`);\r\n  res.status(404).json({ message: \"Ruta no encontrada\" });\r\n};\r\n\r\nexport default notFound;\r\n",
  "src\\interfaces\\middlewares\\role\\role.middleware.ts": "// src/interfaces/middlewares/role/role.middleware.ts\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { AuthenticatedRequest } from \"@/types/express\";\r\n\r\n/**\r\n * Middleware que permite sólo a ciertos roles acceder\r\n * @param allowedRoles Lista de roles (\"admin\", \"client\", etc.)\r\n */\r\nexport const checkRole = (allowedRoles: string[]) => {\r\n  return (req: Request, res: Response, next: NextFunction): void => {\r\n    const user = (req as AuthenticatedRequest).user;\r\n    if (!user || !allowedRoles.includes(user.role)) {\r\n      res.status(403).json({ message: \"Acceso denegado\" });\r\n      return;\r\n    }\r\n    next();\r\n  };\r\n};\r\n",
  "src\\interfaces\\middlewares\\sanitize\\sanitizeRequest.ts": "// middlewares/sanitizeRequest.ts\r\nimport { sanitize } from \"@/shared/sanitize\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\n\r\nconst sanitizeObject = (obj: any) => {\r\n  for (const key in obj) {\r\n    if (typeof obj[key] === \"string\") {\r\n      obj[key] = sanitize(obj[key]);\r\n    } else if (typeof obj[key] === \"object\") {\r\n      sanitizeObject(obj[key]);\r\n    }\r\n  }\r\n};\r\n\r\nexport const sanitizeRequest = (\r\n  req: Request,\r\n  _res: Response,\r\n  next: NextFunction\r\n) => {\r\n  sanitizeObject(req.body);\r\n  sanitizeObject(req.query);\r\n  sanitizeObject(req.params);\r\n  next();\r\n};\r\n",
  "src\\interfaces\\middlewares\\validate\\validateInput.ts": "// middlewares/validateInput.ts\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ZodSchema } from \"zod\";\r\n\r\nexport const validate = (schema: ZodSchema) => async (\r\n    req: Request,\r\n    res: Response,\r\n    next: NextFunction\r\n) => {\r\n    try {\r\n        req.body = await schema.parseAsync(req.body);\r\n        next();\r\n    } catch (err: any) {\r\n        res.status(400).json({ errors: err.errors });\r\n    }\r\n};\r\n",
  "src\\interfaces\\routes\\auth\\auth.routes.ts": "// src/interfaces/routes/auth/auth.routes.ts\r\nimport { Router } from \"express\";\r\nimport * as authController from \"@/interfaces/controllers/auth/auth.controller\";\r\nimport {\r\n  confirmUser,\r\n  resendConfirmation,\r\n} from \"@/interfaces/controllers/auth/confirm.controller\";\r\nimport {\r\n  sendRecovery,\r\n  checkTokenStatus,\r\n  resetPassword,\r\n} from \"@/interfaces/controllers/auth/recover.controller\";\r\nimport { authMiddleware } from \"@/interfaces/middlewares/auth/auth.middleware\";\r\nimport { loginLimiter } from \"@/infraestructure/security/rateLimit\";\r\nimport { validate } from \"@/interfaces/middlewares/validate/validateInput\";\r\nimport { registerSchema, loginSchema } from \"@/shared/validations/auth.schema\";\r\n\r\nconst router = Router();\r\n\r\n// Registro y autenticación\r\nrouter.post(\"/register\", validate(registerSchema), authController.register);\r\nrouter.post(\"/login\", loginLimiter, validate(loginSchema), authController.login);\r\nrouter.post(\"/logout\", authMiddleware, authController.logout);\r\n\r\n// Confirmación de cuenta\r\nrouter.get(\"/confirm/:token\", confirmUser);\r\nrouter.post(\"/resend-confirmation\", loginLimiter, resendConfirmation);\r\n\r\n// Recuperación de contraseña\r\nrouter.post(\"/send-recovery\", loginLimiter, sendRecovery);\r\nrouter.post(\"/reset-password\", resetPassword);\r\nrouter.post(\"/check-token-status\", checkTokenStatus);\r\n\r\n// Refresh token\r\nrouter.get(\"/refresh\", authController.refreshToken);\r\n\r\nexport default router;\r\n",
  "src\\interfaces\\routes\\dashboard\\dashboard.routes.ts": "// src/interfaces/routes/dashboard/dashboard.routes.ts\r\nimport { Router } from \"express\";\r\nimport { getDashboard } from \"@/interfaces/controllers/dashboard/dashboard.controller\";\r\nimport { authMiddleware } from \"@/interfaces/middlewares/auth/auth.middleware\";\r\nimport { checkRole } from \"@/interfaces/middlewares/role/role.middleware\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\r\n  \"/admin/dashboard\",\r\n  authMiddleware,\r\n  checkRole([\"admin\"]),       // <-- now matches on the string role\r\n  (req, res) => getDashboard(req, res)\r\n);\r\n\r\nexport default router;\r\n",
  "src\\interfaces\\routes\\health\\health.routes.ts": "// src/interfaces/routes/health/health.routes.ts\r\nimport { Router } from \"express\";\r\nimport { healthCheck } from \"@/interfaces/controllers/health/health.controller\";\r\n\r\nconst router = Router();\r\n\r\n// ✅ Endpoint básico de salud\r\nrouter.get(\"/health\", healthCheck);\r\n\r\nexport default router;\r\n",
  "src\\interfaces\\routes\\health\\metrics.routes.ts": "// src/interfaces/routes/metrics.routes.ts\r\nimport { Router } from \"express\";\r\nimport { register } from \"@/infraestructure/metrics/metrics\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/metrics\", async (_req, res) => {\r\n  try {\r\n    res.set(\"Content-Type\", register.contentType);\r\n    res.end(await register.metrics());\r\n  } catch (error) {\r\n    res.status(500).json({ message: \"Error obteniendo métricas\" });\r\n  }\r\n});\r\n\r\nexport default router;\r\n",
  "src\\interfaces\\routes\\metrics\\metrics.routes.ts": "// src/interfaces/routes/metrics/metrics.routes.ts\r\nimport { Router } from \"express\";\r\nimport { register } from \"@/infraestructure/metrics/metrics\";\r\n\r\nconst router = Router();\r\n\r\nrouter.get(\"/metrics\", async (req, res) => {\r\n  res.set(\"Content-Type\", register.contentType);\r\n  res.end(await register.metrics());\r\n});\r\n\r\nexport default router;\r\n",
  "src\\interfaces\\routes\\user.routes.ts": "// src/interfaces/routes/user.routes.ts\r\nimport { Router }             from \"express\";\r\nimport { getMe }              from \"@/interfaces/controllers/user.controller\";\r\nimport { authMiddleware }     from \"@/interfaces/middlewares/auth/auth.middleware\";\r\n\r\nconst router = Router();\r\n\r\n// GET /api/me → devuelve datos básicos del usuario logueado\r\nrouter.get(\"/me\", authMiddleware, getMe);\r\n\r\nexport default router;\r\n",
  "src\\shared\\errors\\createError.ts": "// src/shared/errors/createError.ts\r\nexport const createError = (message: string, code: number, status = 400): Error & { code: number, status: number } => {\r\n    const error = new Error(message) as Error & { code: number; status: number };\r\n    error.code = code;\r\n    error.status = status;\r\n    return error;\r\n  };\r\n  ",
  "src\\shared\\errors\\errorCodes.ts": "// src/shared/errors/errorCodes.ts\r\n\r\nexport const errorCodes = {\r\n    EMAIL_ALREADY_REGISTERED: 1001,\r\n    EMAIL_NOT_REGISTERED: 1002,\r\n    INVALID_CREDENTIALS: 1003,\r\n    ACCOUNT_NOT_CONFIRMED: 1004,\r\n    ACCOUNT_ALREADY_CONFIRMED: 1005,\r\n    INVALID_OR_EXPIRED_TOKEN: 1006,\r\n    PASSWORD_SAME_AS_OLD: 1007,\r\n    PASSWORD_SAME_AS_EMAIL: 1008,\r\n    USER_NOT_FOUND: 1009,\r\n    TOKEN_INVALID_OR_EXPIRED: 1010,\r\n    INTERNAL_SERVER_ERROR: 1500,\r\n  };\r\n  ",
  "src\\shared\\errors\\errorMessages.ts": "// src/shared/errors/errorMessages.ts\r\n\r\nexport const errorMessages = {\r\n    emailAlreadyRegistered: \"El correo ya está registrado\",\r\n    emailNotRegistered: \"Correo no registrado\",\r\n    invalidCredentials: \"Credenciales incorrectas\",\r\n    accountNotConfirmed: \"Debes confirmar tu cuenta\",\r\n    accountAlreadyConfirmed: \"La cuenta ya ha sido confirmada\",\r\n    accountConfirmedSuccessfully: \"Cuenta confirmada exitosamente\",\r\n    invalidOrExpiredToken: \"Token inválido o expirado\",\r\n    passwordSameAsOld: \"La nueva contraseña no puede ser igual a la anterior.\",\r\n    passwordSameAsEmail: \"La contraseña no debe ser igual al correo.\",\r\n    userNotFound: \"Usuario no encontrado\",\r\n    tokenInvalidOrExpired: \"Token de refresco inválido o expirado\",\r\n    internalServerError: \"Error interno del servidor\",\r\n  };\r\n  ",
  "src\\shared\\hash.ts": "// utils/hash.ts\r\nimport bcrypt from \"bcryptjs\";\r\n\r\nexport const hashPassword = async (password: string) => await bcrypt.hash(password, 10);\r\nexport const verifyPassword = async (plain: string, hashed: string) => await bcrypt.compare(plain, hashed);\r\n",
  "src\\shared\\sanitize.ts": "// src/utils/sanitize.ts\r\nimport { JSDOM } from 'jsdom';\r\nimport createDOMPurify from 'dompurify';\r\n\r\nconst window = new JSDOM('').window;\r\nconst DOMPurify = createDOMPurify(window);\r\n\r\nexport const sanitize = (input: string): string => {\r\n  return DOMPurify.sanitize(input);\r\n};\r\n",
  "src\\shared\\security\\jwt.ts": "// src/shared/security/jwt.ts\r\n\r\nimport jwt, { JwtPayload, Secret, SignOptions } from \"jsonwebtoken\";\r\nimport dotenv from \"dotenv\";\r\nimport { TokenPayload } from \"@/types/express\";\r\nimport { errorMessages } from \"@/shared/errors/errorMessages\";\r\nimport { errorCodes } from \"@/shared/errors/errorCodes\";\r\nimport { PRIVATE_KEY, PUBLIC_KEY } from \"@/config/jwtKeys\";\r\n\r\ndotenv.config();\r\n\r\n// Duraciones leídas desde .env\r\nconst ACCESS_EXPIRES_IN = process.env.JWT_ACCESS_EXPIRES_IN || \"15m\";\r\nconst REFRESH_EXPIRES_IN = process.env.JWT_REFRESH_EXPIRES_IN || \"7d\";\r\n\r\n/**\r\n * Genera un JWT de acceso con payload { sub, role }.\r\n */\r\nexport const generateAccessToken = (payload: TokenPayload): string =>\r\n  jwt.sign(\r\n    payload as object,\r\n    PRIVATE_KEY as Secret,\r\n    {\r\n      algorithm: \"RS256\",\r\n      expiresIn: ACCESS_EXPIRES_IN,\r\n    } as SignOptions\r\n  );\r\n\r\n/**\r\n * Genera un JWT de refresco con payload { sub, role }.\r\n */\r\nexport const generateRefreshToken = (payload: TokenPayload): string =>\r\n  jwt.sign(\r\n    payload as object,\r\n    PRIVATE_KEY as Secret,\r\n    {\r\n      algorithm: \"RS256\",\r\n      expiresIn: REFRESH_EXPIRES_IN,\r\n    } as SignOptions\r\n  );\r\n\r\n/**\r\n * Verifica un JWT de acceso y retorna { sub, role }.\r\n * Lanza un error con código apropiado si es inválido o expirado.\r\n */\r\nexport const verifyAccessToken = (token: string): TokenPayload => {\r\n  try {\r\n    const decodedRaw = jwt.verify(\r\n      token,\r\n      PUBLIC_KEY as Secret,\r\n      { algorithms: [\"RS256\"] }\r\n    );\r\n    const decoded = decodedRaw as JwtPayload;\r\n\r\n    if (\r\n      (typeof decoded.sub !== \"string\" && typeof decoded.sub !== \"number\") ||\r\n      typeof decoded.role !== \"string\"\r\n    ) {\r\n      const e = new Error(errorMessages.tokenInvalidOrExpired) as any;\r\n      e.code = errorCodes.TOKEN_INVALID_OR_EXPIRED;\r\n      throw e;\r\n    }\r\n\r\n    return {\r\n      sub:\r\n        typeof decoded.sub === \"number\"\r\n          ? decoded.sub\r\n          : parseInt(decoded.sub as string, 10),\r\n      role: decoded.role,\r\n    };\r\n  } catch (err: any) {\r\n    const e = new Error(errorMessages.tokenInvalidOrExpired) as any;\r\n    e.code = errorCodes.TOKEN_INVALID_OR_EXPIRED;\r\n    throw e;\r\n  }\r\n};\r\n\r\n/**\r\n * Verifica un JWT de refresco y retorna { sub, role }.\r\n * Lanza un error con código apropiado si es inválido o expirado.\r\n */\r\nexport const verifyRefreshToken = (token: string): TokenPayload => {\r\n  try {\r\n    const decodedRaw = jwt.verify(\r\n      token,\r\n      PUBLIC_KEY as Secret,\r\n      { algorithms: [\"RS256\"] }\r\n    );\r\n    const decoded = decodedRaw as JwtPayload;\r\n\r\n    if (\r\n      (typeof decoded.sub !== \"string\" && typeof decoded.sub !== \"number\") ||\r\n      typeof decoded.role !== \"string\"\r\n    ) {\r\n      const e = new Error(errorMessages.tokenInvalidOrExpired) as any;\r\n      e.code = errorCodes.TOKEN_INVALID_OR_EXPIRED;\r\n      throw e;\r\n    }\r\n\r\n    return {\r\n      sub:\r\n        typeof decoded.sub === \"number\"\r\n          ? decoded.sub\r\n          : parseInt(decoded.sub as string, 10),\r\n      role: decoded.role,\r\n    };\r\n  } catch (err: any) {\r\n    const e = new Error(errorMessages.tokenInvalidOrExpired) as any;\r\n    e.code = errorCodes.TOKEN_INVALID_OR_EXPIRED;\r\n    throw e;\r\n  }\r\n};\r\n",
  "src\\shared\\succes\\successMessages.ts": "// src/shared/success/successMessages.ts\r\nexport const successMessages = {\r\n    accountConfirmedSuccessfully: \"Cuenta confirmada exitosamente.\",\r\n    accountAlreadyConfirmed: \"La cuenta ya ha sido confirmada.\",\r\n    recoveryEmailSent: \"Correo de recuperación enviado. Revisa tu bandeja.\",\r\n    passwordUpdated: \"Contraseña actualizada correctamente.\",\r\n    loginSuccess: \"Inicio de sesión exitoso.\",\r\n    logoutSuccess: \"Sesión cerrada correctamente.\",\r\n    registrationSuccess: \"Registro exitoso. Revisa tu correo para confirmar tu cuenta.\",\r\n    refreshTokenSuccess: \"Nuevo token generado exitosamente.\",\r\n  };\r\n  ",
  "src\\shared\\tokens.ts": "// utils/tokens.ts\r\nimport crypto from \"crypto\";\r\n\r\nexport const generateToken = (length = 32): string => {\r\n  return crypto.randomBytes(length).toString(\"hex\");\r\n};\r\n",
  "src\\shared\\validations\\auth.schema.ts": "// validations/auth.schema.ts\r\nimport { z } from \"zod\";\r\n\r\nexport const loginSchema = z.object({\r\n  email: z.string().email(),\r\n  password: z.string().min(8),\r\n});\r\n\r\nexport const registerSchema = z\r\n  .object({\r\n    name: z.string().min(2),\r\n    email: z.string().email(),\r\n    phone: z.string().regex(/^\\d{10}$/),\r\n    password: z.string().min(8),\r\n    confirmPassword: z.string(),\r\n  })\r\n  .refine((data) => data.password === data.confirmPassword, {\r\n    message: \"Las contraseñas no coinciden\",\r\n    path: [\"confirmPassword\"],\r\n  });\r\n",
  "src\\shared\\validations\\validators.ts": "import bcrypt from \"bcryptjs\";\r\n\r\n// Validación de email\r\nexport const validateEmail = (email: string) => {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  if (!emailRegex.test(email)) {\r\n    throw new Error(\"Correo electrónico inválido.\");\r\n  }\r\n};\r\n\r\n// Solo valida que sea fuerte (para el registro)\r\nexport const validateNewPassword = (password: string): void => {\r\n  const minLength = 8;\r\n  const hasUpperCase = /[A-Z]/.test(password);\r\n  const hasLowerCase = /[a-z]/.test(password);\r\n  const hasNumber = /\\d/.test(password);\r\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n\r\n  if (password.length < minLength)\r\n    throw new Error(\"La contraseña debe tener al menos 8 caracteres.\");\r\n\r\n  if (!hasUpperCase)\r\n    throw new Error(\"La contraseña debe tener al menos una letra mayúscula.\");\r\n\r\n  if (!hasLowerCase)\r\n    throw new Error(\"La contraseña debe tener al menos una letra minúscula.\");\r\n\r\n  if (!hasNumber)\r\n    throw new Error(\"La contraseña debe incluir al menos un número.\");\r\n\r\n  if (!hasSpecialChar)\r\n    throw new Error(\"La contraseña debe incluir un carácter especial.\");\r\n};\r\n\r\n// Valida que no sea igual a la anterior ni al correo\r\nexport const validatePasswordChange = async (\r\n  newPassword: string,\r\n  email: string,\r\n  currentPasswordHash: string\r\n): Promise<void> => {\r\n  validateNewPassword(newPassword);\r\n\r\n  if (newPassword === email)\r\n    throw new Error(\"La contraseña no debe ser igual al correo.\");\r\n\r\n  const isSameAsOld = await bcrypt.compare(newPassword, currentPasswordHash);\r\n  if (isSameAsOld)\r\n    throw new Error(\"La nueva contraseña no puede ser igual a la anterior.\");\r\n};\r\n\r\n",
  "src\\types\\express.d.ts": "// src/types/express.d.ts\r\n\r\nimport { Request } from \"express\";\r\n\r\nexport interface TokenPayload {\r\n  sub: number;\r\n  role: string;\r\n}\r\n\r\nexport interface AuthenticatedRequest extends Request {\r\n  user?: TokenPayload;\r\n}\r\n"
}