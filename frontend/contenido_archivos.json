{
  "eslint.config.js": "import js from '@eslint/js'\r\nimport globals from 'globals'\r\nimport reactHooks from 'eslint-plugin-react-hooks'\r\nimport reactRefresh from 'eslint-plugin-react-refresh'\r\nimport tseslint from 'typescript-eslint'\r\n\r\nexport default tseslint.config(\r\n  { ignores: ['dist'] },\r\n  {\r\n    extends: [js.configs.recommended, ...tseslint.configs.recommended],\r\n    files: ['**/*.{ts,tsx}'],\r\n    languageOptions: {\r\n      ecmaVersion: 2020,\r\n      globals: globals.browser,\r\n    },\r\n    plugins: {\r\n      'react-hooks': reactHooks,\r\n      'react-refresh': reactRefresh,\r\n    },\r\n    rules: {\r\n      ...reactHooks.configs.recommended.rules,\r\n      'react-refresh/only-export-components': [\r\n        'warn',\r\n        { allowConstantExport: true },\r\n      ],\r\n    },\r\n  },\r\n)\r\n",
  "index.html": "<!doctype html>\r\n<html lang=\"en\">\r\n\r\n<head>\r\n  <meta charset=\"UTF-8\" />\r\n  <link rel=\"icon\" type=\"image\" href=\"/ARP logo.png\" />\r\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n  <title>Aqua River Park</title>\r\n</head>\r\n\r\n<body>\r\n  <div id=\"root\"></div>\r\n  <script type=\"module\" src=\"/src/main.tsx\"></script>\r\n</body>\r\n\r\n</html>",
  "public\\ARP logo.png": "\u0000\u0000\u0000 ftypavif\u0000\u0000\u0000\u0000avifmif1miafMA1B\u0000\u0000\u0001�meta\u0000\u0000\u0000\u0000\u0000\u0000\u0000(hdlr\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000pict\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000libavif\u0000\u0000\u0000\u0000\u000epitm\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000,iloc\u0000\u0000\u0000\u0000D\u0000\u0000\u0002\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0000\u00054\u0000\u0000\u000b�\u0000\u0002\u0000\u0000\u0000\u0001\u0000\u0000\u0001�\u0000\u0000\u0003\u0000\u0000\u0000Biinf\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u001ainfe\u0002\u0000\u0000\u0000\u0000\u0001\u0000\u0000av01Color\u0000\u0000\u0000\u0000\u001ainfe\u0002\u0000\u0000\u0000\u0000\u0002\u0000\u0000av01Alpha\u0000\u0000\u0000\u0000\u001airef\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000eauxl\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0000\u0000�iprp\u0000\u0000\u0000�ipco\u0000\u0000\u0000\u0014ispe\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0000\u0000\u0000E\u0000\u0000\u0000\u0010pixi\u0000\u0000\u0000\u0000\u0003\b\b\b\u0000\u0000\u0000\fav1C�\u0000\f\u0000\u0000\u0000\u0000\u0013colrnclx\u0000\u0002\u0000\u0002\u0000\u0002�\u0000\u0000\u0000\u000epixi\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\fav1C�\u0000\u001c\u0000\u0000\u0000\u00008auxC\u0000\u0000\u0000\u0000urn:mpeg:mpegB:cicp:systems:auxiliary:alpha\u0000\u0000\u0000\u0000\u001eipma\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0001\u0004\u0001\u0002�\u0004\u0000\u0002\u0004\u0001\u0005�\u0007\u0000\u0000\u000f#mdat\u0012\u0000\n\n\u0000\u0000\u0000\u00037����P2�\u0006\u0010\u0000��8�A ��3��fKn������5\u001c�??�4���X�\u001e���3J�cy�.\u0013y�c\u000b=j��IMg\u0002�k���� Ą\u000e�0���\u0017��f仢\u0011�#V��pА\u0003���;.\u0019oWp��~�r�E�xdI�\u000e�A��1�]u@F_�c����]�7A�Kք7�4���d\u001f�D��+��+gg2M�f\u0013�\u000bY-\tu\u0006�H��\u0019�t=�]\u0011��\"�\u0017\u0002���\u001b\rwn=tzr\u0003>R�ΝU\f��Î�u$E�\\��|o���\u0001(?����L�\u0012�&N����ש��\u0006w��%H%[�,\u0006VD\u0007�\")~�Ψ'�\u001a��O�\u0016d.u��(\t��Ƃ\u0004\u0012o.Snd\u001f�h������I�X��\bv3eы9^4�\f�=E��~e�u����\u0018!#���;�\u0013���\u0015��T$`�DX7hM\u0014�V֜�\u0011\n�����Ŷ\u0005k'؍�m���A\u0007�DIxt�g~,�������u�pQ\u0006���\u001b~�l��7]\u0010*�����5�\u0017����Val�l�?\u0005��۶x�C�Y�=���pX�;�j��\u0005����s�d'��H�/\u0006\u0014c��B��a��o)DL\f�C\\����%����#�����qH�,��\b\u00024�y���e����GA\u001ea�\u0001\t�{�m����h����x��ߪ��H��1��=�׳\u0007\u000e�nb�o�n�S��q\n>�~��z#\rs\u001c/{���䞿\u0016w��q\u001e��Ԝ���\u0007߱�f�m�9�\u000b6\u001b]���%W�KLӈ�����P#$�\u001e�j���\u0013\u0007`��\u001f�-\";��.��\"\u0014\u0000%'�XF0�߄\ff���c8k�D3{$�Fȃ_tw1�6!�\u0015�g:2/E���X�E$\u001a\u0005�\u0005\u0019��/\r�i�2y\u0019���jF�(��rZ�VXل�QqVNM��B]4A�{\f(G�UCx�� -�\t2���\r�\u0007��\\�I\u0017\f\u000f\u000b\u001c`�3.�oЖP�\u001aXl�����g��j\u0018b��s��=Q[O��4�<��\bOS{��Q�����GS�\u0000�S\u000e��,\u0002o���Y+�\u0005�1\u0018\u0017~�\u001b��\u0012\u0000\n\n\u0000\u0000\u0000\u00037����B2�\u0017\u0010\u0000�\u0000\u0006\u0018a�\u0004\u0012��<J�r˾�a�w@�\u000f��_\u0002�TD&����U?\u0010�^Ɂ?�PZ�n�!�����\u001d�|I\u0003�E��b�lL։~�\u000e�(��UL-�@\u000b�2�/�\u000e��fmr��ZX��^�o�n���w���x��H��;=�\u00010V;T�^�X^.�U�[s�N���\u0016�{\u000bF>5����\r\u0019�[���@�!�(\u001f��Aa�Ǚ|�u\u001c\u0002\u000b�Li �p8�$�\u000f�������\bA�\u0017T�y�µҥ?\u0004��`���>_VO'e��ƀ�ǯD\b�r!�W:Q\u001cN�$z,~X�U.����\u000fk�c�e��-\u000b��11�/Tc�*\u001c!�{�}~����m�Q��;\nǞ>�T��B2|P5$[�H�a����TB�\u000b!\u001d��*���6E�6a��h0\u00033h���L`_���I\u0002;���\u0006K�9��H�!Y�>��<.J�_�7w��]'\u001e�a��\u0014��\u0007 ��6�O� Js\u0002��\u001286`�뗔TZ��_~\u0004\u0014�H�j!�n@\t�f�C�=+pFTZ�\u001bI��8�0\u0013\"\u000f[~���\\��3&�Lw\u0011Y����si�Lr�\r�#w\u00165��?�c�tT�4�>��ѯ/Ntβ�&U6\tF-�:�<0�\u0014y�\u0002�ݕ%��m�_%D�\u001a��\u0018ŝ��\u001dz�����@H$-���c\u0006S�\u001d*o\\�tڏ]��\u0015��+��EO�^8�މ�\u0010)n���}]�����\u0006Ø�ᔹ�O����t�e$\u0010.\u0015/n���W/<�3�\u0000gS>���Pv^��\u0000\u0000\u0000\u0000O\u0017����I\u0017@Io<��m�J�#Zd8�`i�y�Fٝ��s�\u0004�x�!Y�Z�EL�\u0002JB�{�a4�sZ\f�`ͯ�����+��\u0005v���h�W�u}UH��\u000ee6\u000f]UR!\b��T]E3Hd��K�\u0001�`fϮu��\u0007l\u0010d\u0019akq��Y.,�1�6�Ҏ���\u001c@���1>\u0014\u0012L}��\u0012t�FI���7��\u001b��jb������b�K�d�ᱠ\u001b|h�\t���./k����������V�)����\tD-�,/����j{�\u0014y�o�t�\u001a\u0001�\\':f�\u0001���`�\u001c�C�l����җ��Z����eT��C�ۃ�S�<�gG]iB.�7@�\u0006�s�C���N}\u0018�K�U�Rb��f�ӷ\u0015�?��8����\b���\u00180�[��\u0013\u0000t�\u0012Ӿ����\u0014�\u0006�\u0007k\u0005w�\b�AY{=�?\u0010j�I\u0018\u001ef�Tz �0��\u0011_Rya{\u0017K�1��v�D�}�|C ��\u0013�m���@Z\u001d9����q�9�ku��\u0001�\u0013\u001fx@�qB#�\u0006�ڲ\u0015љ��`�A:�b.1Fڱٓ3i�c\r�����Z�Q�r!�4�P�>�P�B�\u0000h�$����F���>j~H\u0019w���=\u0006v1�j\u00021�Ũ$-t~��\u0005��%熍��x�ւ=A늤��g\u001c\u0000�,B6s���\u001b�Nrcr��\f-�y�\u001a1��VW\raA�\u001a�\u0002:8}��\u0011�%\u001f\n\u001e�Z2\b3��\f�\u0013��\u001a,$a�\n�e\b��G\u0018�|dp\u0012�zU�e��&Ev\u0003��8)��h�\u001a8\u001d|��}�B}�&Ra�w�J�\\æ�������\u0004Ml1.ۀb�Jۊ�l�H��~1tu_k�Ǜ|�o��>պ\u0005Z�\"̵Ȏ�Z@\u0016��\u0016�\u0001|�}9I������K@�x���?b�x�\u000e��\u0006\u0011yt\u00123$��]u&\u001d��pm\u0015�ofo'ٷi�V��-\u0014\u001fr�Q\u001co�c�05o���\r/2��p�S�D6�k�|5��\u000fSw�<�;UC��Hӹ�`a[�\u001f��*���t���`��u�]��m\b[�C\u0013G|��Np\u001f����(��\u0003f�L�\u0007<\u0003�UIOq|�\u0015��4�o*E ὢ������s�y���~�9�E\u00141�Ep����\"�\u0019��\u0000��>݁%͖�ş�o�뼡���Q�l(J4zWKNo�V��;>y\u0013�\u001c_�E��x_+���I\u0019\u000f����,S�4S\u001a��$\u0010�z�t���b��k,\u0006�����E!��x\u0010\u0001|�`�\u0019i{\u001f?N�d��)�Ѫp���P���e9�\u0001��{�\u001bSb��\u0010\u0007s�,���*{�_�;7�>\\�?'@\u0001R7��G~\u0017Gؗ��?iڲ\u0016.�!z;]\u001c��ݟM:�\u0011�<+��f\t�n����J\u0014�Qq�c�w��ۆ��~}ʣ=XK� d�\u001c�\u0019��Eox�q熪1\u0003��o�h�2����\u001d\u0018��=#\u00173S��%;`_1y�*�\u000eA�cV�tƮ|C�p�Z\u001f�?�w��2|sU��C\u000b���\n}^\u0014Q�_��V��D=3�\u0001�� g�4f�Y \u001c*=L!�Kߵ��\u0000�,�NFF�wD 6���VYXͥ\u0018C\u00043�'9���K���>��\u0003���ێ�e�\u000f�`�2s���L\u0018\u001c\rnO�3F[��5�\u000b(i��_}m��\\���1p�\u001a�q�_�?l\u001d\u0014ܩQ��1�V�h\u0001\u001e�]�*\u000e����i8�Lw,��Or�:瓞\tJ�8�\u001f��`m/�N�\r*E�v�\b��\u000b���\u0015M�\u0018�3M�$��������-&�Y��.�'\u001c�d?(*\u0004{�#�Iާ��oi�y�@��KRkSe��+K<�\u0004��2Z�,\u0013Fo�O5��M\u0018��&��Q�T\u0019}&�����<�#o�ۡ;em�!�%�vj��_���3#\u0014\n�~0V�l'\u0000ٱ6����\u0001\u0004\u0000�Rh\u0002n��x�-�\u0013\t �ޞگ�3�\u0004\u001d�ǳK�n\u00199f9��\u001c\u001e�j\u0011sJ=�\\^��\u000f��!}g\r��4��,�gs�}&�#-k\u0004\u0019��J2�ۡ��aI�s����ۋoG�[-F��r@��m\u001bՔ\u0002:ϘF�Wߨd��\u000e�\b�A&UT$N�t[��\u0012�,�2�S'�H!��H�`\nTkF�\u000f[���\u0007����,\u0013%\t5Bg�6���o6\u0003��-���|0�M!��Ց.\u0001�X<{�ѣ�\u001b\u0019����@�Ma|�c3�\u0013\fl~S�\u000b�g�K�@9�I_+(\u0011��\b3�0Ih\ffw�\u001eJ�\u001d��C�\u000ff�\\\u0000L��^:f؎Z��w)7�>��Ov���\\\u0016�<��r2'[A�Ä�$}�{�����n\u001e���`\u001e}�./�&�}*�Ѡ\u0018�� �\u0005�JV�}H�AXT�\u0018�\f�7%�5\u0011�_\u0013�K�}�w��t��W�E�3ZL^�O�\u001b�\\eV�c�(!R�y��\r��6�\u0013��0p\u0016�Bo's�m2z��\f2U\u001b�q\u0019]q^4�Z�$\u001a\u0015\fV�\u0013l��aOZ8;�R�.�D��U܄\u000e\r�ȸ\u001d\u001d`\"\u0000��$�Sa�`�\\\u001a�U_p����ť��\u0001���b�H��F�\u0002\u0017�\u001e��y9��\u0016��\u0002\t\u001a�Ӹ��4����+f\u0000&�\u0005�A�hX�\u001b�R���\t���(�\u001eɼ\u0003��&������*�\nM:�U�\u0007�\u0016�\"TG�\u0010Tw�K\u001f񮑧�!��iS�;���q\u0011\b+��`+����1p��\u0017�&�oA;��U�i58B\u001e�\u0005���h5��\u0012���\u001b\u0002�a�Ca&l\u001bpٻP\u001b�{̧ɞ�\u0019�R]c��:��]\b[",
  "README.md": "# React + TypeScript + Vite\r\n\r\nThis template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.\r\n\r\nCurrently, two official plugins are available:\r\n\r\n- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh\r\n- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh\r\n\r\n## Expanding the ESLint configuration\r\n\r\nIf you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:\r\n\r\n```js\r\nexport default tseslint.config({\r\n  extends: [\r\n    // Remove ...tseslint.configs.recommended and replace with this\r\n    ...tseslint.configs.recommendedTypeChecked,\r\n    // Alternatively, use this for stricter rules\r\n    ...tseslint.configs.strictTypeChecked,\r\n    // Optionally, add this for stylistic rules\r\n    ...tseslint.configs.stylisticTypeChecked,\r\n  ],\r\n  languageOptions: {\r\n    // other options...\r\n    parserOptions: {\r\n      project: ['./tsconfig.node.json', './tsconfig.app.json'],\r\n      tsconfigRootDir: import.meta.dirname,\r\n    },\r\n  },\r\n})\r\n```\r\n\r\nYou can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:\r\n\r\n```js\r\n// eslint.config.js\r\nimport reactX from 'eslint-plugin-react-x'\r\nimport reactDom from 'eslint-plugin-react-dom'\r\n\r\nexport default tseslint.config({\r\n  plugins: {\r\n    // Add the react-x and react-dom plugins\r\n    'react-x': reactX,\r\n    'react-dom': reactDom,\r\n  },\r\n  rules: {\r\n    // other rules...\r\n    // Enable its recommended typescript rules\r\n    ...reactX.configs['recommended-typescript'].rules,\r\n    ...reactDom.configs.recommended.rules,\r\n  },\r\n})\r\n```\r\n",
  "src\\api\\axios.ts": "// frontend/src/api/axios.ts\r\nimport axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:3000/api', // 👈 Este debe apuntar al backend\r\n});\r\n\r\nexport default api;\r\n",
  "src\\App.css": "",
  "src\\App.tsx": "// src/App.tsx\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport AppRouter from \"./router/AppRouter\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { useAuthModal } from \"./store/useAuthModal\";\r\nimport AuthModal from \"./components/auth/AuthModal\";\r\nimport RouteModalHandler from \"./components/RouteModalHandler\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nfunction App() {\r\n  const { isOpen } = useAuthModal();\r\n\r\n  return (\r\n    <Router>\r\n      <RouteModalHandler />\r\n      <AppRouter />\r\n      {isOpen && <AuthModal />}\r\n      <ToastContainer position=\"top-right\" autoClose={3000} />\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
  "src\\assets\\react.svg": "<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" aria-hidden=\"true\" role=\"img\" class=\"iconify iconify--logos\" width=\"35.93\" height=\"32\" preserveAspectRatio=\"xMidYMid meet\" viewBox=\"0 0 256 228\"><path fill=\"#00D8FF\" d=\"M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z\"></path></svg>",
  "src\\components\\auth\\AuthForm.tsx": "import { useState } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { AxiosError } from \"axios\";\r\nimport api from \"../../api/axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { useAuthModal } from \"../../store/useAuthModal\";\r\nimport AuthResendModal from \"./AuthResendModal\";\r\nimport {\r\n  getPasswordScore,\r\n  capitalizeName,\r\n  validateEmailFormat,\r\n  validatePasswordSecurity,\r\n} from \"../../utils/validationHelpersForm\";\r\n\r\nimport InputWithLabel from \"../common/InputWithLabel\";\r\nimport PasswordWithStrengthInput from \"../common/PasswordWithStrengthInputForm\";\r\n\r\ninterface Props {\r\n  modalStep: \"notice\" | \"form\" | \"success\";\r\n  showModal: boolean;\r\n  modalType: \"confirm\" | \"recover\";\r\n  setFormEmail: React.Dispatch<React.SetStateAction<string>>;\r\n  setModalStep: React.Dispatch<\r\n    React.SetStateAction<\"notice\" | \"form\" | \"success\">\r\n  >;\r\n  setShowModal: React.Dispatch<React.SetStateAction<boolean>>;\r\n  setModalType: React.Dispatch<React.SetStateAction<\"confirm\" | \"recover\">>;\r\n}\r\n\r\nconst initialForm = {\r\n  fullName: \"\",\r\n  email: \"\",\r\n  phone: \"\",\r\n  password: \"\",\r\n  confirmPassword: \"\",\r\n};\r\n\r\nexport default function AuthForm({\r\n  modalStep,\r\n  showModal,\r\n  modalType,\r\n  setFormEmail,\r\n  setModalStep,\r\n  setShowModal,\r\n  setModalType,\r\n}: Props) {\r\n  const { view, closeModal, toggleView } = useAuthModal();\r\n  const isLogin = view === \"login\";\r\n  const navigate = useNavigate();\r\n\r\n  const [formData, setFormData] = useState(initialForm);\r\n  const [errors, setErrors] = useState<{ [key: string]: string }>({});\r\n  const [passwordStrength, setPasswordStrength] = useState(0);\r\n  const [resendMsg, setResendMsg] = useState(\"\");\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const handleInput = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n\r\n    const formattedValue = name === \"fullName\" ? capitalizeName(value) : value;\r\n\r\n    if (name === \"password\") setPasswordStrength(getPasswordScore(value));\r\n\r\n    setFormData((prev) => ({ ...prev, [name]: formattedValue }));\r\n    setErrors((prev) => ({ ...prev, [name]: \"\" }));\r\n  };\r\n\r\n  const validate = () => {\r\n    const errs: { [key: string]: string } = {};\r\n\r\n    if (!validateEmailFormat(formData.email)) {\r\n      errs.email = \"Correo no válido\";\r\n    }\r\n\r\n    const passwordErrors = validatePasswordSecurity(\r\n      formData.password,\r\n      formData.email\r\n    );\r\n    if (passwordErrors.length > 0) {\r\n      errs.password = passwordErrors.join(\" \");\r\n    }\r\n\r\n    if (!isLogin) {\r\n      if (!formData.fullName || formData.fullName.length < 2) {\r\n        errs.fullName = \"El nombre debe tener al menos 2 caracteres.\";\r\n      }\r\n\r\n      if (!/^[0-9]{10}$/.test(formData.phone)) {\r\n        errs.phone = \"El teléfono debe tener 10 dígitos.\";\r\n      }\r\n\r\n      if (formData.password !== formData.confirmPassword) {\r\n        errs.confirmPassword = \"Las contraseñas no coinciden.\";\r\n      }\r\n    }\r\n\r\n    setErrors(errs);\r\n    return Object.keys(errs).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (isSubmitting) return; // Evita múltiples envíos\r\n    setIsSubmitting(true);\r\n\r\n    const isValid = validate();\r\n    if (!isValid) {\r\n      setIsSubmitting(false); // 🔁 Agrega esto para volver a habilitar el botón\r\n      return;\r\n    }\r\n\r\n    try {\r\n      if (isLogin) {\r\n        const res = await api.post(\"/login\", {\r\n          email: formData.email,\r\n          password: formData.password,\r\n        });\r\n\r\n        if (!res.data.user.isConfirmed) {\r\n          const tokenExpired = res.data.tokenExpired;\r\n          setModalType(\"confirm\");\r\n          setModalStep(tokenExpired ? \"form\" : \"notice\");\r\n          setShowModal(true);\r\n          return;\r\n        }\r\n\r\n        closeModal();\r\n        toast.success(\"Login exitoso!\");\r\n        navigate(\"/\");\r\n      } else {\r\n        const res = await api.post(\"/register\", {\r\n          name: formData.fullName,\r\n          email: formData.email,\r\n          phone: formData.phone,\r\n          password: formData.password,\r\n        });\r\n\r\n        if (res.status === 200 || res.status === 201) {\r\n          toast.success(\"Registro exitoso. Revisa tu correo.\");\r\n          toggleView();\r\n        }\r\n      }\r\n    } catch (err) {\r\n      const error = err as AxiosError<{\r\n        message: string;\r\n        tokenExpired?: boolean;\r\n      }>;\r\n      const msg = error.response?.data?.message;\r\n\r\n      if (msg === \"Debes confirmar tu cuenta\") {\r\n        const tokenExpired = error.response?.data?.tokenExpired;\r\n        setModalType(\"confirm\");\r\n        setModalStep(tokenExpired ? \"form\" : \"notice\");\r\n        setShowModal(true);\r\n      } else if (msg) {\r\n        toast.error(msg);\r\n      } else {\r\n        toast.error(\"Ocurrió un error inesperado.\");\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleResend = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (isSubmitting) return; // Evita múltiples envíos\r\n    setIsSubmitting(true);\r\n    setResendMsg(\"\");\r\n\r\n    const endpoint =\r\n      modalType === \"recover\" ? \"/send-recovery\" : \"/resend-confirmation\";\r\n\r\n    try {\r\n      const res = await api.post(endpoint, {\r\n        email: formData.email,\r\n      });\r\n\r\n      setResendMsg(res.data.message);\r\n      setModalStep(\"success\");\r\n\r\n      setTimeout(() => {\r\n        toast.success(\r\n          modalType === \"recover\"\r\n            ? \"¡Enlace de recuperación enviado!\"\r\n            : \"¡Correo de confirmación reenviado!\"\r\n        );\r\n        setShowModal(false);\r\n        setResendMsg(\"\");\r\n        setFormData((prev) => ({ ...prev, email: \"\", password: \"\" }));\r\n      }, 5000);\r\n    } catch (err) {\r\n      const error = err as AxiosError<{ message: string }>;\r\n      const msg = error.response?.data?.message;\r\n\r\n      if (msg === \"La cuenta ya está confirmada\") {\r\n        toast.info(\"La cuenta ya ha sido confirmada.\");\r\n        setShowModal(false);\r\n      } else {\r\n        setResendMsg(\"Error al enviar el enlace.\");\r\n      }\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n        {!isLogin && (\r\n          <>\r\n            <InputWithLabel\r\n              label=\"\"\r\n              name=\"fullName\"\r\n              value={formData.fullName}\r\n              onChange={handleInput}\r\n              placeholder=\"Tu nombre completo\"\r\n              error={errors.fullName}\r\n            />\r\n\r\n            <InputWithLabel\r\n              label=\"\"\r\n              name=\"phone\"\r\n              value={formData.phone}\r\n              onChange={handleInput}\r\n              placeholder=\"Teléfono\"\r\n              error={errors.phone}\r\n            />\r\n          </>\r\n        )}\r\n\r\n        <InputWithLabel\r\n          label=\"\"\r\n          name=\"email\"\r\n          type=\"email\"\r\n          value={formData.email}\r\n          onChange={handleInput}\r\n          placeholder=\"Mail\"\r\n          error={errors.email}\r\n          autoFocus\r\n        />\r\n\r\n        <PasswordWithStrengthInput\r\n          value={formData.password}\r\n          onChange={handleInput}\r\n          error={errors.password}\r\n          showTooltip={!isLogin}\r\n          showStrengthBar={!isLogin}\r\n        />\r\n\r\n        {!isLogin && (\r\n          <InputWithLabel\r\n            label=\"\"\r\n            name=\"confirmPassword\"\r\n            type=\"password\"\r\n            value={formData.confirmPassword}\r\n            onChange={handleInput}\r\n            placeholder=\"Confirma tu contraseña\"\r\n            error={errors.confirmPassword}\r\n          />\r\n        )}\r\n\r\n        {isLogin && (\r\n          <div className=\"flex justify-end text-sm text-blue-600\">\r\n            <button\r\n              type=\"button\"\r\n              className=\"hover:underline\"\r\n              onClick={() => {\r\n                setModalType(\"recover\");\r\n                setModalStep(\"form\");\r\n                setShowModal(true);\r\n                setFormEmail(formData.email); // importante para usar en el modal\r\n              }}\r\n            >\r\n              Forgot Password?\r\n            </button>\r\n          </div>\r\n        )}\r\n\r\n        <button\r\n          type=\"submit\"\r\n          disabled={isSubmitting || (!isLogin && passwordStrength < 3)}\r\n          className={`w-full bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white py-2 rounded-lg hover:opacity-90 transition-all ${\r\n            isSubmitting ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n          }`}\r\n        >\r\n          {isSubmitting ? \"Conectando...\" : isLogin ? \"Sign In\" : \"Sign Up\"}\r\n        </button>\r\n\r\n        <p className=\"text-center text-sm text-gray-600 mt-4\">\r\n          {isLogin ? \"Don’t have an account?\" : \"Already have an account?\"}{\" \"}\r\n          <button\r\n            type=\"button\"\r\n            onClick={toggleView}\r\n            className=\"text-blue-600 font-semibold hover:underline\"\r\n          >\r\n            {isLogin ? \"Sign Up\" : \"Sign In\"}\r\n          </button>\r\n        </p>\r\n      </form>\r\n\r\n      <AuthResendModal\r\n        modalStep={modalStep}\r\n        showModal={showModal}\r\n        email={formData.email}\r\n        resendMsg={resendMsg}\r\n        onClose={() => setShowModal(false)}\r\n        onEmailChange={(email) => setFormData((prev) => ({ ...prev, email }))}\r\n        onResend={handleResend}\r\n        type={modalType}\r\n      />\r\n    </>\r\n  );\r\n}\r\n",
  "src\\components\\auth\\AuthModal.tsx": "import { motion, AnimatePresence } from \"framer-motion\";\r\nimport { FaTimes } from \"react-icons/fa\";\r\nimport { useAuthModal } from \"../../store/useAuthModal\";\r\nimport AuthForm from \"./AuthForm\";\r\nimport AuthSidePanel from \"./AuthSidePanel\";\r\nimport AuthResendModal from \"./AuthResendModal\";\r\nimport { useEffect, useRef, useState } from \"react\";\r\nimport api from \"../../api/axios\";\r\nimport { AxiosError } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst messages = {\r\n  login: {\r\n    title: \"Welcome Back! 👋\",\r\n    description: \"We're so excited to see you again! Enter your details to access your account.\",\r\n    sideTitle: \"New Here? 🌟\",\r\n    sideDescription: \"Join our community and discover amazing features!\",\r\n    sideButton: \"Create Account\",\r\n    submit: \"Sign In\",\r\n  },\r\n  register: {\r\n    title: \"Join Our Community! 🎉\",\r\n    description: \"Create an account and start your journey with us today.\",\r\n    sideTitle: \"One of Us? 🎈\",\r\n    sideDescription: \"Already have an account? Sign in and continue your journey!\",\r\n    sideButton: \"Sign In\",\r\n    submit: \"Sign Up\",\r\n  },\r\n};\r\n\r\nexport default function AuthModal() {\r\n  const { isOpen, closeModal, view, toggleView } = useAuthModal();\r\n  const isLogin = view === \"login\";\r\n  const modalRef = useRef<HTMLDivElement>(null);\r\n\r\n  const [formEmail, setFormEmail] = useState(\"\");\r\n  const [resendMsg, setResendMsg] = useState(\"\");\r\n  const [modalStep, setModalStep] = useState<\"notice\" | \"form\" | \"success\">(\"notice\");\r\n  const [modalType, setModalType] = useState<\"confirm\" | \"recover\">(\"confirm\");\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const closeOnOutside = (e: MouseEvent) => {\r\n      if (modalRef.current && !modalRef.current.contains(e.target as Node)) closeModal();\r\n    };\r\n    const closeOnEsc = (e: KeyboardEvent) => {\r\n      if (e.key === \"Escape\") closeModal();\r\n    };\r\n    document.addEventListener(\"mousedown\", closeOnOutside);\r\n    document.addEventListener(\"keydown\", closeOnEsc);\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", closeOnOutside);\r\n      document.removeEventListener(\"keydown\", closeOnEsc);\r\n    };\r\n  }, [closeModal]);\r\n\r\n  const handleResend = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setResendMsg(\"\");\r\n\r\n    const endpoint =\r\n      modalType === \"recover\" ? \"/send-recovery\" : \"/resend-confirmation\";\r\n\r\n    try {\r\n      const res = await api.post(endpoint, { email: formEmail });\r\n      setResendMsg(res.data.message);\r\n      setModalStep(\"success\");\r\n\r\n      setTimeout(() => {\r\n        toast.success(\r\n          modalType === \"recover\"\r\n            ? \"¡Correo de recuperación enviado!\"\r\n            : \"¡Correo reenviado!, Revisa tu bandeja...\"\r\n        );\r\n        setShowModal(false);\r\n        setResendMsg(\"\");\r\n        setFormEmail(\"\");\r\n      }, 5000);\r\n    } catch (err) {\r\n      const error = err as AxiosError<{ message: string }>;\r\n      const msg = error.response?.data?.message;\r\n\r\n      if (msg === \"La cuenta ya está confirmada\") {\r\n        toast.info(\"La cuenta ya ha sido confirmada.\");\r\n        setShowModal(false);\r\n      } else {\r\n        setResendMsg(\"Error al reenviar el enlace.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const isDesktop = typeof window !== \"undefined\" && window.innerWidth >= 768;\r\n\r\n  return (\r\n    <>\r\n      <motion.div\r\n        className=\"fixed inset-0 bg-black/40 backdrop-blur-sm z-[999] flex items-center justify-center p-4 overflow-y-auto\"\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n        exit={{ opacity: 0 }}\r\n      >\r\n        <button\r\n          onClick={closeModal}\r\n          className=\"absolute top-4 right-4 z-[1000] text-white text-2xl bg-black/50 hover:bg-black/70 p-2 rounded-full\"\r\n        >\r\n          <FaTimes />\r\n        </button>\r\n\r\n        <motion.div\r\n          ref={modalRef}\r\n          initial={{ scale: 0.95, opacity: 0 }}\r\n          animate={{ scale: 1, opacity: 1 }}\r\n          exit={{ scale: 0.9, opacity: 0 }}\r\n          transition={{ duration: 0.3 }}\r\n          className={`bg-bgLight dark:bg-gray-900 text-gray-800 dark:text-gray-100 backdrop-blur-md rounded-3xl shadow-2xl shadow-bgLight w-full max-w-4xl flex flex-col md:flex-row overflow-hidden transition-all ease-in-out duration-700 ${\r\n            isLogin ? \"md:flex-row-reverse\" : \"md:flex-row\"\r\n          }`}\r\n        >\r\n          {isDesktop && (\r\n            <AnimatePresence mode=\"wait\">\r\n              <motion.div\r\n                key={view}\r\n                initial={{ x: isLogin ? 300 : -300, opacity: 0 }}\r\n                animate={{ x: 0, opacity: 1 }}\r\n                exit={{ x: isLogin ? -300 : 300, opacity: 0 }}\r\n                transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n                className=\"hidden md:flex w-full md:w-1/2 p-6 md:p-8 flex-col justify-center text-center space-y-6 bg-white dark:bg-gray-800\"\r\n              >\r\n                <AuthSidePanel\r\n                  title={messages[view].sideTitle}\r\n                  description={messages[view].sideDescription}\r\n                  buttonText={messages[view].sideButton}\r\n                  onToggle={toggleView}\r\n                />\r\n              </motion.div>\r\n            </AnimatePresence>\r\n          )}\r\n\r\n          <AnimatePresence mode=\"wait\">\r\n            <motion.div\r\n              key={`${view}-form`}\r\n              initial={{ x: isLogin ? -300 : 300, opacity: 0 }}\r\n              animate={{ x: 0, opacity: 1 }}\r\n              exit={{ x: isLogin ? 300 : -300, opacity: 0 }}\r\n              transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n              className={`w-full md:w-1/2 p-6 md:p-8 bg-gray-50 dark:bg-gray-900 flex flex-col justify-center`}\r\n            >\r\n              <h2 className=\"text-3xl font-bold text-center mb-2 bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-transparent bg-clip-text\">\r\n                {messages[view].title}\r\n              </h2>\r\n              <p className=\"text-center text-sm text-gray-600 dark:text-gray-300 mb-4\">\r\n                {messages[view].description}\r\n              </p>\r\n\r\n              <AuthForm\r\n                modalStep={modalStep}\r\n                showModal={showModal}\r\n                modalType={modalType}\r\n                setFormEmail={setFormEmail}\r\n                setModalStep={setModalStep}\r\n                setShowModal={setShowModal}\r\n                setModalType={setModalType}\r\n              />\r\n            </motion.div>\r\n          </AnimatePresence>\r\n        </motion.div>\r\n      </motion.div>\r\n\r\n      <AuthResendModal\r\n        modalStep={modalStep}\r\n        showModal={showModal}\r\n        email={formEmail}\r\n        resendMsg={resendMsg}\r\n        onClose={() => setShowModal(false)}\r\n        onEmailChange={setFormEmail}\r\n        onResend={handleResend}\r\n        type={modalType}\r\n      />\r\n    </>\r\n  );\r\n}\r\n",
  "src\\components\\auth\\AuthResendModal.tsx": "import { useState, FormEvent } from \"react\";\r\nimport { FaCheckCircle, FaInfoCircle } from \"react-icons/fa\";\r\n\r\ninterface Props {\r\n  showModal: boolean;\r\n  modalStep: \"notice\" | \"form\" | \"success\";\r\n  email: string;\r\n  resendMsg: string;\r\n  onClose: () => void;\r\n  onEmailChange: (email: string) => void;\r\n  onResend: (e: React.FormEvent) => void;\r\n  type: \"confirm\" | \"recover\";\r\n}\r\n\r\nexport default function AuthResendModal({\r\n  showModal,\r\n  modalStep,\r\n  email,\r\n  resendMsg,\r\n  onClose,\r\n  onEmailChange,\r\n  onResend,\r\n  type,\r\n}: Props) {\r\n\r\n  const [isSending, setIsSending] = useState(false);\r\n\r\n  const handleLocalResend = async (e: FormEvent) => {\r\n    if (isSending) return;\r\n    setIsSending(true);\r\n    await onResend(e);\r\n    setIsSending(false);\r\n  };\r\n\r\n  if (!showModal) return null;\r\n\r\n  const isRecover = type === \"recover\";\r\n  const title = isRecover ? \"Recuperar Contraseña\" : \"Verifica tu cuenta\";\r\n  const formTitle = isRecover ? \"¿Necesitas un nuevo enlace?\" : \"Reenviar Enlace\";\r\n  const formDescription = isRecover ? \"Ingresa tu correo para recuperar tu contraseña.\" : \"Verificación de usuario expirada, ingresa tu correo para recibir un nuevo enlace de confirmación:\";\r\n  const successMsg =\r\n    resendMsg ||\r\n    (isRecover\r\n      ? \"Enlace de recuperación enviado con éxito. Revisa tu correo.\"\r\n      : \"Enlace de confirmación reenviado con éxito. Revisa tu correo.\");\r\n\r\n  return (\r\n    <div\r\n      className=\"fixed inset-0 bg-black/40 z-[1000] flex items-center justify-center\"\r\n      onMouseDown={onClose}\r\n    >\r\n      <div\r\n        className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-md relative text-center\"\r\n        onMouseDown={(e) => e.stopPropagation()} // Esto evita que el click cierre el modal\r\n      >\r\n        <button\r\n          onClick={onClose}\r\n          className=\"absolute top-2 right-3 text-gray-500 hover:text-red-500 text-lg font-bold\"\r\n        >\r\n          &times;\r\n        </button>\r\n\r\n        {modalStep === \"notice\" && (\r\n          <>\r\n            <FaInfoCircle className=\"text-yellow-500 text-4xl mx-auto mb-2\" />\r\n            <h2 className=\"text-xl font-bold mb-2 text-sky-600\">{title}</h2>\r\n            <p className=\"text-sm text-gray-600 mb-4\">\r\n              {isRecover\r\n                ? \"Ingresa tu correo para recuperar tu contraseña.\"\r\n                : \"Aún no has confirmado tu cuenta. Revisa tu correo para activarla.\"}\r\n            </p>\r\n          </>\r\n        )}\r\n\r\n        {modalStep === \"form\" && (\r\n          <>\r\n            <h2 className=\"text-xl font-bold mb-2 text-sky-600\">{formTitle}</h2>\r\n            <p className=\"text-sm text-gray-600 mb-4\">{formDescription}</p>\r\n            <form onSubmit={handleLocalResend} className=\"space-y-4\">\r\n              <input\r\n                type=\"email\"\r\n                placeholder=\"Tu correo\"\r\n                className=\"w-full px-4 py-2 border rounded-md\"\r\n                value={email}\r\n                onChange={(e) => onEmailChange(e.target.value)}\r\n                required\r\n              />\r\n              <button\r\n                type=\"submit\"\r\n                disabled={isSending}\r\n                className={`w-full bg-sky-600 text-white py-2 rounded hover:bg-sky-700 transition ${\r\n                  isSending ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n                }`}\r\n              >\r\n                {isSending ? \"Enviando...\" : \"Reenviar enlace\"}\r\n              </button>\r\n              {resendMsg && <p className=\"text-sm text-red-500\">{resendMsg}</p>}\r\n            </form>\r\n          </>\r\n        )}\r\n\r\n        {modalStep === \"success\" && (\r\n          <>\r\n            <FaCheckCircle className=\"text-green-500 text-4xl mx-auto mb-2\" />\r\n            <p className=\"text-green-600 text-sm font-medium\">{successMsg}</p>\r\n            <p className=\"text-sm text-gray-500 mt-2\">\r\n              Serás redirigido al login...\r\n            </p>\r\n          </>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
  "src\\components\\auth\\AuthSidePanel.tsx": "// src/components/auth/AuthSidePanel.tsx\r\nimport { motion } from \"framer-motion\";\r\n\r\ninterface Props {\r\n  title: string;\r\n  description: string;\r\n  buttonText: string;\r\n  onToggle: () => void;\r\n}\r\n\r\nexport default function AuthSidePanel({ title, description, buttonText, onToggle }: Props) {\r\n  return (\r\n    <motion.div\r\n      key={title}\r\n      initial={{ x: 300, opacity: 0 }}\r\n      animate={{ x: 0, opacity: 1 }}\r\n      exit={{ x: -300, opacity: 0 }}\r\n      transition={{ duration: 0.5, ease: \"easeInOut\" }}\r\n      className=\"w-full md:w-fit p-6 md:p-8 flex flex-col justify-center text-center space-y-6 bg-white\"\r\n    >\r\n      <h2 className=\"text-3xl md:text-4xl font-bold bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-transparent bg-clip-text\">\r\n        {title}\r\n      </h2>\r\n      <p className=\"text-gray-600\">{description}</p>\r\n      <button\r\n        onClick={onToggle}\r\n        className=\"px-6 py-3 rounded-full bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-white font-semibold hover:scale-105 transition-all\"\r\n      >\r\n        {buttonText}\r\n      </button>\r\n    </motion.div>\r\n  );\r\n}\r\n",
  "src\\components\\common\\Alert.tsx": "import React from \"react\";\r\nimport classNames from \"classnames\";\r\nimport {\r\n  FaCheckCircle,\r\n  FaExclamationTriangle,\r\n  FaInfoCircle,\r\n  FaTimesCircle,\r\n} from \"react-icons/fa\";\r\n\r\ninterface AlertProps {\r\n  type?: \"success\" | \"error\" | \"warning\" | \"info\";\r\n  message: string;\r\n  className?: string;\r\n}\r\n\r\nconst iconMap = {\r\n  success: <FaCheckCircle className=\"text-green-600 text-xl mr-2\" />,\r\n  error: <FaTimesCircle className=\"text-red-600 text-xl mr-2\" />,\r\n  warning: <FaExclamationTriangle className=\"text-yellow-600 text-xl mr-2\" />,\r\n  info: <FaInfoCircle className=\"text-blue-600 text-xl mr-2\" />,\r\n};\r\n\r\nconst Alert: React.FC<AlertProps> = ({\r\n  type = \"info\",\r\n  message,\r\n  className = \"\",\r\n}) => {\r\n  const baseStyles =\r\n    \"flex items-start gap-2 px-4 py-3 rounded-md shadow-sm text-sm font-medium\";\r\n\r\n  const typeStyles = {\r\n    success: \"bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-200\",\r\n    error: \"bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-200\",\r\n    warning: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900/20 dark:text-yellow-200\",\r\n    info: \"bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-200\",\r\n  };\r\n\r\n  return (\r\n    <div className={classNames(baseStyles, typeStyles[type], className)}>\r\n      {iconMap[type]}\r\n      <span>{message}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Alert;\r\n",
  "src\\components\\common\\Avatar.tsx": "import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface AvatarProps {\r\n  name?: string;\r\n  imageUrl?: string;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  status?: \"online\" | \"offline\" | \"busy\";\r\n  className?: string;\r\n}\r\n\r\nconst sizeClasses = {\r\n  sm: \"w-8 h-8 text-sm\",\r\n  md: \"w-10 h-10 text-base\",\r\n  lg: \"w-14 h-14 text-lg\",\r\n};\r\n\r\nconst statusColors = {\r\n  online: \"bg-green-500\",\r\n  offline: \"bg-gray-400\",\r\n  busy: \"bg-red-500\",\r\n};\r\n\r\nexport const Avatar: React.FC<AvatarProps> = ({\r\n  name,\r\n  imageUrl,\r\n  size = \"md\",\r\n  status,\r\n  className = \"\",\r\n}) => {\r\n  const initials = name\r\n    ? name\r\n        .split(\" \")\r\n        .map((n) => n[0])\r\n        .join(\"\")\r\n        .toUpperCase()\r\n        .slice(0, 2)\r\n    : \"?\";\r\n\r\n  return (\r\n    <div className={classNames(\"relative inline-block\", className)}>\r\n      <div\r\n        className={classNames(\r\n          \"rounded-full bg-gray-200 dark:bg-gray-700 flex items-center justify-center overflow-hidden text-white font-semibold\",\r\n          sizeClasses[size]\r\n        )}\r\n      >\r\n        {imageUrl ? (\r\n          <img\r\n            src={imageUrl}\r\n            alt={name}\r\n            className=\"w-full h-full object-cover\"\r\n          />\r\n        ) : (\r\n          <span>{initials}</span>\r\n        )}\r\n      </div>\r\n\r\n      {status && (\r\n        <span\r\n          className={classNames(\r\n            \"absolute bottom-0 right-0 w-3 h-3 rounded-full ring-2 ring-white dark:ring-gray-900\",\r\n            statusColors[status]\r\n          )}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Avatar;\r\n",
  "src\\components\\common\\Breadcrumb.tsx": "import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { FaChevronRight } from \"react-icons/fa\";\r\n\r\ninterface BreadcrumbItem {\r\n  label: string;\r\n  path?: string;\r\n  isCurrent?: boolean;\r\n}\r\n\r\ninterface BreadcrumbProps {\r\n  items: BreadcrumbItem[];\r\n  className?: string;\r\n}\r\n\r\nconst Breadcrumb: React.FC<BreadcrumbProps> = ({ items, className = \"\" }) => {\r\n  return (\r\n    <nav\r\n      className={`text-sm text-gray-600 dark:text-gray-300 ${className}`}\r\n      aria-label=\"breadcrumb\"\r\n    >\r\n      <ol className=\"flex flex-wrap items-center space-x-2\">\r\n        {items.map((item, idx) => (\r\n          <li key={idx} className=\"flex items-center\">\r\n            {item.path && !item.isCurrent ? (\r\n              <Link\r\n                to={item.path}\r\n                className=\"hover:underline text-blue-600 dark:text-blue-400\"\r\n              >\r\n                {item.label}\r\n              </Link>\r\n            ) : (\r\n              <span className=\"font-semibold text-gray-900 dark:text-white\">\r\n                {item.label}\r\n              </span>\r\n            )}\r\n            {idx < items.length - 1 && (\r\n              <FaChevronRight className=\"mx-2 text-xs text-gray-400\" />\r\n            )}\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Breadcrumb;\r\n",
  "src\\components\\common\\Button.tsx": "import React from \"react\";\r\nimport { Spinner } from \"./Spinner\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  variant?: \"primary\" | \"secondary\" | \"danger\" | \"outline\";\r\n  isLoading?: boolean;\r\n  fullWidth?: boolean;\r\n}\r\n\r\nconst Button: React.FC<ButtonProps> = ({\r\n  children,\r\n  variant = \"primary\",\r\n  isLoading = false,\r\n  fullWidth = false,\r\n  className,\r\n  ...props\r\n}) => {\r\n  const baseStyles =\r\n    \"inline-flex items-center justify-center px-4 py-2 rounded-md font-medium transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2\";\r\n\r\n  const variantStyles = {\r\n    primary:\r\n      \"bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500 dark:bg-blue-500 dark:hover:bg-blue-600\",\r\n    secondary:\r\n      \"bg-gray-200 text-gray-900 hover:bg-gray-300 focus:ring-gray-400 dark:bg-gray-700 dark:text-white dark:hover:bg-gray-600\",\r\n    danger:\r\n      \"bg-red-600 text-white hover:bg-red-700 focus:ring-red-500 dark:bg-red-500 dark:hover:bg-red-600\",\r\n    outline:\r\n      \"border border-gray-300 text-gray-700 hover:bg-gray-100 focus:ring-gray-400 dark:border-gray-600 dark:text-white dark:hover:bg-gray-700\",\r\n  };\r\n\r\n  const computedClasses = classNames(\r\n    baseStyles,\r\n    variantStyles[variant],\r\n    {\r\n      \"w-full\": fullWidth,\r\n      \"opacity-50 cursor-not-allowed\": props.disabled || isLoading,\r\n    },\r\n    className\r\n  );\r\n\r\n  return (\r\n    <button className={computedClasses} disabled={props.disabled || isLoading} {...props}>\r\n      {isLoading && <Spinner className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n",
  "src\\components\\common\\Card.tsx": "import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface CardProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  title?: string;\r\n  subtitle?: string;\r\n  footer?: React.ReactNode;\r\n  children: React.ReactNode;\r\n  shadow?: boolean;\r\n  hoverable?: boolean;\r\n  rounded?: boolean;\r\n  bordered?: boolean;\r\n}\r\n\r\nconst Card: React.FC<CardProps> = ({\r\n  title,\r\n  subtitle,\r\n  footer,\r\n  children,\r\n  className,\r\n  shadow = true,\r\n  hoverable = false,\r\n  rounded = true,\r\n  bordered = false,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        \"bg-white dark:bg-bgDark text-textDark dark:text-textLight transition-all duration-300\",\r\n        {\r\n          \"shadow-md\": shadow,\r\n          \"hover:shadow-lg hover:scale-[1.01] transform transition-all\":\r\n            hoverable,\r\n          \"rounded-lg\": rounded,\r\n          \"border border-gray-200 dark:border-gray-700\": bordered,\r\n        },\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      {(title || subtitle) && (\r\n        <div className=\"p-4 border-b border-gray-100 dark:border-gray-700\">\r\n          {title && <h2 className=\"text-lg font-semibold\">{title}</h2>}\r\n          {subtitle && (\r\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\r\n              {subtitle}\r\n            </p>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"p-4\">{children}</div>\r\n\r\n      {footer && (\r\n        <div className=\"px-4 py-3 border-t border-gray-100 dark:border-gray-700\">\r\n          {footer}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n",
  "src\\components\\common\\CardGrid.tsx": "import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface CardGridProps {\r\n  children: React.ReactNode;\r\n  columns?: number; // número de columnas base (por defecto 1 en móvil, luego responsive)\r\n  gap?: string; // espacio entre tarjetas (por defecto 'gap-6')\r\n  className?: string;\r\n}\r\n\r\nconst CardGrid: React.FC<CardGridProps> = ({\r\n  children,\r\n  columns = 1,\r\n  gap = \"gap-6\",\r\n  className = \"\",\r\n}) => {\r\n  const gridCols = {\r\n    1: \"grid-cols-1\",\r\n    2: \"sm:grid-cols-2\",\r\n    3: \"sm:grid-cols-2 md:grid-cols-3\",\r\n    4: \"sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4\",\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={classNames(\r\n        \"grid w-full\",\r\n        gap,\r\n        gridCols[columns as keyof typeof gridCols],\r\n        className\r\n      )}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardGrid;\r\n",
  "src\\components\\common\\CustomToast.tsx": "import { toast, ToastOptions } from \"react-toastify\";\r\n\r\nconst baseOptions: ToastOptions = {\r\n  position: \"top-right\",\r\n  autoClose: 4000,\r\n  pauseOnHover: true,\r\n  draggable: true,\r\n  closeOnClick: true,\r\n};\r\n\r\nexport const showSuccess = (message: string, options?: ToastOptions) => {\r\n  toast.success(message, { ...baseOptions, ...options });\r\n};\r\n\r\nexport const showError = (message: string, options?: ToastOptions) => {\r\n  toast.error(message, { ...baseOptions, ...options });\r\n};\r\n\r\nexport const showInfo = (message: string, options?: ToastOptions) => {\r\n  toast.info(message, { ...baseOptions, ...options });\r\n};\r\n\r\nexport const showWarning = (message: string, options?: ToastOptions) => {\r\n  toast.warn(message, { ...baseOptions, ...options });\r\n};\r\n",
  "src\\components\\common\\DropdownMenu.tsx": "import { Link } from \"react-router-dom\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\n\r\ninterface Props {\r\n  visible: boolean;\r\n  menuKey: string;\r\n  labels: string[];\r\n  onLinkClick: () => void;\r\n}\r\n\r\nexport const DropdownMenu: React.FC<Props> = ({\r\n  visible,\r\n  menuKey,\r\n  labels,\r\n  onLinkClick,\r\n}) => {\r\n  return (\r\n    <AnimatePresence>\r\n      {visible && (\r\n        <motion.div\r\n          initial={{ opacity: 0, scale: 0.95 }}\r\n          animate={{ opacity: 1, scale: 1 }}\r\n          exit={{ opacity: 0, scale: 0.95 }}\r\n          transition={{ duration: 0.2, ease: \"easeOut\" }}\r\n          className=\"absolute left-1/2 transform -translate-x-1/2 top-full mt-2 w-56 max-h-[70vh] overflow-y-auto backdrop-blur-md bg-bgLight/30 dark:bg-bgDark/40 text-textDark dark:text-textLight rounded-xl shadow-xl ring-1 ring-bgLight/25 z-50\"\r\n        >\r\n          {labels.map((label, idx) => (\r\n            <Link\r\n              key={idx}\r\n              to={`/${menuKey}#${label.toLowerCase().replace(/\\s+/g, \"-\")}`}\r\n              onClick={onLinkClick}\r\n              className=\"block px-4 py-2 text-sm font-semibold hover:bg-accent2/80 hover:text-white dark:hover:bg-bgLight/80 dark:hover:text-textDark/90 transition-all duration-200\"\r\n            >\r\n              {label}\r\n            </Link>\r\n          ))}\r\n        </motion.div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n};\r\n",
  "src\\components\\common\\FormField.tsx": "import React from \"react\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface FormFieldProps {\r\n  label: string;\r\n  name: string;\r\n  type?: string;\r\n  value: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n  icon?: React.ReactNode;\r\n  error?: string;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  autoComplete?: string;\r\n}\r\n\r\nconst FormField: React.FC<FormFieldProps> = ({\r\n  label,\r\n  name,\r\n  type = \"text\",\r\n  value,\r\n  onChange,\r\n  placeholder = \"\",\r\n  icon,\r\n  error,\r\n  required = false,\r\n  disabled = false,\r\n  autoComplete,\r\n}) => {\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <label\r\n        htmlFor={name}\r\n        className=\"block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1\"\r\n      >\r\n        {label} {required && <span className=\"text-red-500\">*</span>}\r\n      </label>\r\n\r\n      <div className=\"relative\">\r\n        {icon && (\r\n          <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 pointer-events-none\">\r\n            {icon}\r\n          </div>\r\n        )}\r\n\r\n        <input\r\n          type={type}\r\n          name={name}\r\n          id={name}\r\n          value={value}\r\n          onChange={onChange}\r\n          placeholder={placeholder}\r\n          disabled={disabled}\r\n          autoComplete={autoComplete}\r\n          className={classNames(\r\n            \"w-full border rounded-md py-2 px-3 focus:outline-none focus:ring-2\",\r\n            {\r\n              \"pl-10\": icon,\r\n              \"border-gray-300 focus:ring-blue-500\":\r\n                !error && !disabled,\r\n              \"border-red-500 focus:ring-red-500\": error,\r\n              \"bg-gray-100 cursor-not-allowed\": disabled,\r\n              \"dark:bg-gray-800 dark:text-white dark:border-gray-600\": true,\r\n            }\r\n          )}\r\n        />\r\n      </div>\r\n\r\n      {error && (\r\n        <p className=\"text-red-500 text-sm mt-1 font-medium\">{error}</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormField;\r\n",
  "src\\components\\common\\Input.tsx": "import React from \"react\";\r\nimport { twMerge } from \"tailwind-merge\";\r\n\r\ninterface InputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label?: string;\r\n  error?: string;\r\n  icon?: React.ReactNode;\r\n  fullWidth?: boolean;\r\n}\r\n\r\nconst Input: React.FC<InputProps> = ({\r\n  label,\r\n  error,\r\n  icon,\r\n  fullWidth = true,\r\n  className,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div className={twMerge(\"mb-4\", fullWidth ? \"w-full\" : \"\", className)}>\r\n      {label && (\r\n        <label className=\"block text-sm font-medium text-gray-700 dark:text-textLight mb-1\">\r\n          {label}\r\n        </label>\r\n      )}\r\n\r\n      <div className=\"relative\">\r\n        {icon && (\r\n          <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-500 dark:text-gray-300\">\r\n            {icon}\r\n          </div>\r\n        )}\r\n        <input\r\n          {...props}\r\n          className={twMerge(\r\n            \"appearance-none block w-full px-3 py-2 border rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent text-sm\",\r\n            icon ? \"pl-10\" : \"\",\r\n            error\r\n              ? \"border-red-500 focus:ring-red-500\"\r\n              : \"border-gray-300 dark:border-gray-600 dark:bg-bgDark dark:text-textLight\",\r\n            props.disabled ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n          )}\r\n        />\r\n      </div>\r\n\r\n      {error && (\r\n        <p className=\"text-sm text-red-600 mt-1 font-medium\">{error}</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n",
  "src\\components\\common\\InputWithLabel.tsx": "import React from \"react\";\r\n\r\ninterface Props extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  label: string;\r\n  name: string;\r\n  error?: string;\r\n}\r\n\r\nconst InputWithLabel: React.FC<Props> = ({\r\n  label,\r\n  name,\r\n  error,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <label\r\n        htmlFor={name}\r\n        className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-1 flex items-center gap-2\"\r\n      >\r\n        {label}\r\n      </label>\r\n\r\n      <input\r\n        id={name}\r\n        name={name}\r\n        className=\"input-style outline-none dark:bg-gray-900 dark:text-white dark:border-gray-700\"\r\n        {...props}\r\n      />\r\n\r\n      {error && <p className=\"text-red-500 text-sm mt-1\">{error}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputWithLabel;\r\n",
  "src\\components\\common\\Modal.tsx": "import React from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { FaTimes } from \"react-icons/fa\";\r\n\r\ninterface ModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  title?: string;\r\n  children: React.ReactNode;\r\n  size?: \"sm\" | \"md\" | \"lg\";\r\n  hideCloseButton?: boolean;\r\n}\r\n\r\nconst sizeClasses = {\r\n  sm: \"max-w-sm\",\r\n  md: \"max-w-md\",\r\n  lg: \"max-w-2xl\",\r\n};\r\n\r\nconst Modal: React.FC<ModalProps> = ({\r\n  isOpen,\r\n  onClose,\r\n  title,\r\n  children,\r\n  size = \"md\",\r\n  hideCloseButton = false,\r\n}) => {\r\n  return (\r\n    <AnimatePresence>\r\n      {isOpen && (\r\n        <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black/60 backdrop-blur-sm\">\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -30 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: 20 }}\r\n            transition={{ duration: 0.3 }}\r\n            className={`bg-white dark:bg-bgDark text-textDark dark:text-textLight rounded-lg shadow-lg w-full ${sizeClasses[size]} relative px-6 py-5`}\r\n          >\r\n            {!hideCloseButton && (\r\n              <button\r\n                className=\"absolute top-3 right-4 text-gray-400 hover:text-red-500 transition\"\r\n                onClick={onClose}\r\n                aria-label=\"Cerrar modal\"\r\n              >\r\n                <FaTimes />\r\n              </button>\r\n            )}\r\n\r\n            {title && (\r\n              <h2 className=\"text-xl font-semibold mb-4 text-center\">\r\n                {title}\r\n              </h2>\r\n            )}\r\n\r\n            <div>{children}</div>\r\n          </motion.div>\r\n        </div>\r\n      )}\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n",
  "src\\components\\common\\PasswordField.tsx": "import React, { useState } from \"react\";\r\nimport classNames from \"classnames\";\r\nimport { FaEye, FaEyeSlash } from \"react-icons/fa\";\r\n\r\ninterface PasswordFieldProps {\r\n  label: string;\r\n  name: string;\r\n  value: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  placeholder?: string;\r\n  error?: string;\r\n  required?: boolean;\r\n  autoComplete?: string;\r\n}\r\n\r\nconst PasswordField: React.FC<PasswordFieldProps> = ({\r\n  label,\r\n  name,\r\n  value,\r\n  onChange,\r\n  placeholder = \"••••••••\",\r\n  error,\r\n  required = false,\r\n  autoComplete = \"current-password\",\r\n}) => {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  return (\r\n    <div className=\"mb-4\">\r\n      <label\r\n        htmlFor={name}\r\n        className=\"block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1\"\r\n      >\r\n        {label} {required && <span className=\"text-red-500\">*</span>}\r\n      </label>\r\n\r\n      <div className=\"relative\">\r\n        <input\r\n          id={name}\r\n          name={name}\r\n          type={showPassword ? \"text\" : \"password\"}\r\n          value={value}\r\n          onChange={onChange}\r\n          placeholder={placeholder}\r\n          autoComplete={autoComplete}\r\n          className={classNames(\r\n            \"w-full border rounded-md py-2 px-3 pr-10 focus:outline-none focus:ring-2\",\r\n            {\r\n              \"border-gray-300 focus:ring-blue-500\": !error,\r\n              \"border-red-500 focus:ring-red-500\": !!error,\r\n              \"dark:bg-gray-800 dark:text-white dark:border-gray-600\": true,\r\n            }\r\n          )}\r\n        />\r\n\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => setShowPassword((prev) => !prev)}\r\n          className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 dark:text-gray-300\"\r\n          aria-label=\"Mostrar u ocultar contraseña\"\r\n        >\r\n          {showPassword ? <FaEyeSlash /> : <FaEye />}\r\n        </button>\r\n      </div>\r\n\r\n      {error && (\r\n        <p className=\"text-red-500 text-sm mt-1 font-medium\">{error}</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordField;\r\n",
  "src\\components\\common\\PasswordWithStrengthInputForm.tsx": "import { useState } from \"react\";\r\nimport { FaEye, FaEyeSlash, FaInfoCircle } from \"react-icons/fa\";\r\nimport {\r\n  getPasswordScore,\r\n  getStrengthLabel,\r\n} from \"../../utils/validationHelpersForm\";\r\n\r\ninterface Props {\r\n  value: string;\r\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\r\n  error?: string;\r\n  showTooltip?: boolean;\r\n  showStrengthBar?: boolean;\r\n  autoFocus?: boolean;\r\n  name?: string;\r\n  placeholder?: string;\r\n}\r\n\r\nexport default function PasswordWithStrengthInput({\r\n  value,\r\n  onChange,\r\n  error,\r\n  showTooltip = true,\r\n  showStrengthBar = true,\r\n  autoFocus = false,\r\n  name = \"password\",\r\n  placeholder = \"Password\",\r\n}: Props) {\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const score = getPasswordScore(value);\r\n  const label = getStrengthLabel(score);\r\n\r\n  return (\r\n    <div className=\"relative mb-4\">\r\n      <div className=\"absolute flex justify-start mb-1 top-[-14px] left-[4px]\">\r\n        {showTooltip && (\r\n          <div className=\"relative group inline-block\">\r\n            <FaInfoCircle\r\n              className=\"text-blue-500 dark:text-blue-400 cursor-pointer p-0.5\"\r\n              tabIndex={0} // para accesibilidad en teclado\r\n            />\r\n            <div className=\"absolute z-30 top-full right-[-260px] mt-2 w-72 md:w-64 text-xs bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-800 dark:text-gray-200 p-2 rounded shadow-md opacity-0 invisible group-hover:opacity-100 group-hover:visible group-focus-within:opacity-100 group-focus-within:visible transition-opacity duration-200 pointer-events-none\">\r\n              Usa mínimo 8 caracteres, una mayúscula, un número y un símbolo especial. No uses tu correo ni contraseñas anteriores.\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <input\r\n        type={showPassword ? \"text\" : \"password\"}\r\n        name={name}\r\n        value={value}\r\n        onChange={onChange}\r\n        placeholder={placeholder}\r\n        autoFocus={autoFocus}\r\n        className=\"input-style pr-10 outline-none dark:bg-gray-900 dark:text-white dark:border-gray-700\"\r\n      />\r\n\r\n      <button\r\n        type=\"button\"\r\n        onClick={() => setShowPassword(!showPassword)}\r\n        className=\"absolute right-3 top-[20px] text-gray-600 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition\"\r\n        tabIndex={-1}\r\n      >\r\n        {showPassword ? <FaEyeSlash /> : <FaEye />}\r\n      </button>\r\n\r\n      {error && <p className=\"text-red-500 text-sm mt-1\">{error}</p>}\r\n\r\n      {showStrengthBar && (\r\n        <div className=\"mt-2\">\r\n          <div className=\"flex gap-1\">\r\n            {[...Array(4)].map((_, i) => (\r\n              <div\r\n                key={i}\r\n                className={`h-2 flex-1 rounded ${\r\n                  i < score ? label.bar : \"bg-gray-200 dark:bg-gray-600\"\r\n                }`}\r\n              />\r\n            ))}\r\n          </div>\r\n          {score > 0 && (\r\n            <p className={`text-sm mt-1 ${label.color}`}>Fuerza: {label.text}</p>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n",
  "src\\components\\common\\Spinner.tsx": "import React from \"react\";\r\n\r\ninterface SpinnerProps {\r\n  size?: number;\r\n  className?: string;\r\n  color?: string;\r\n}\r\n\r\nexport const Spinner: React.FC<SpinnerProps> = ({\r\n  size = 24,\r\n  className = \"\",\r\n  color = \"var(--color-primary)\", // Puedes usar cualquier variable de tu theme\r\n}) => {\r\n  return (\r\n    <svg\r\n      className={`animate-spin ${className}`}\r\n      width={size}\r\n      height={size}\r\n      viewBox=\"0 0 24 24\"\r\n      style={{ color }}\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n    >\r\n      <circle\r\n        className=\"opacity-25\"\r\n        cx=\"12\"\r\n        cy=\"12\"\r\n        r=\"10\"\r\n        stroke=\"currentColor\"\r\n        strokeWidth=\"4\"\r\n      ></circle>\r\n      <path\r\n        className=\"opacity-75\"\r\n        fill=\"currentColor\"\r\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\r\n      ></path>\r\n    </svg>\r\n  );\r\n};\r\n",
  "src\\components\\common\\ToastNotification.tsx": "import { ToastContainer } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst ToastNotification = () => {\r\n  return (\r\n    <ToastContainer\r\n      position=\"top-right\"\r\n      autoClose={5000}\r\n      hideProgressBar={false}\r\n      newestOnTop={false}\r\n      closeOnClick\r\n      rtl={false}\r\n      pauseOnFocusLoss\r\n      draggable\r\n      pauseOnHover\r\n      theme=\"colored\" // Puedes cambiar a \"light\" o \"dark\"\r\n      toastClassName={() =>\r\n        \"bg-white dark:bg-bgDark text-textDark dark:text-textLight rounded shadow-md px-4 py-3\"\r\n      }\r\n      className=\"text-sm font-medium\"\r\n      progressClassName={() => \"bg-[var(--color-primary)]\"}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ToastNotification;\r\n",
  "src\\components\\NavMenu.tsx": "import { Link } from \"react-router-dom\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport {\r\n  ChevronDownIcon,\r\n  PlusIcon,\r\n  MinusIcon,\r\n} from \"@heroicons/react/20/solid\";\r\nimport { useState, useRef, useEffect } from \"react\";\r\n\r\ninterface Props {\r\n  isLoggedIn: boolean;\r\n  userRole: string;\r\n  mobileMenuOpen: boolean;\r\n  handleLinkClick: () => void;\r\n}\r\n\r\nexport const NavMenu: React.FC<Props> = ({\r\n  isLoggedIn,\r\n  userRole,\r\n  mobileMenuOpen,\r\n  handleLinkClick,\r\n}) => {\r\n  const [hoveredMenu, setHoveredMenu] = useState<string | null>(null);\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n\r\n  const menus = [\r\n    { label: \"Inicio\", to: \"/\" },\r\n    { label: \"Precios\", to: \"/precios\" },\r\n  ];\r\n\r\n  const dropdowns = {\r\n    mas: [\"Galeria\", \"Horarios\", \"Eventos\", \"Blog\", \"Reserva\"],\r\n    servicios: [\r\n      \"Piscinas y Tobogán\",\r\n      \"Bosque Perdido de los Dinosaurios\",\r\n      \"Botes y Juegos de Mesa\",\r\n      \"Zona VIP\",\r\n      \"Restaurantes\",\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      if (\r\n        mobileMenuOpen &&\r\n        menuRef.current &&\r\n        !menuRef.current.contains(event.target as Node)\r\n      ) {\r\n        setHoveredMenu(null);\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"mousedown\", handleClickOutside);\r\n    return () => document.removeEventListener(\"mousedown\", handleClickOutside);\r\n  }, [mobileMenuOpen]);\r\n\r\n  return (\r\n    <div\r\n      ref={menuRef}\r\n      className={`flex transition-all duration-300 ${\r\n        mobileMenuOpen\r\n          ? \"flex-col items-center space-y-2 mt-4 text-center\"\r\n          : \"flex-row items-center gap-6\"\r\n      } w-full md:w-auto justify-center`}\r\n    >\r\n      {/* Enlaces simples */}\r\n      {menus.map((item, idx) => (\r\n        <Link\r\n          key={idx}\r\n          to={item.to}\r\n          onClick={handleLinkClick}\r\n          className=\"hover:text-accent1 font-medium transition-colors duration-200\"\r\n        >\r\n          {item.label}\r\n        </Link>\r\n      ))}\r\n\r\n      {/* Menús desplegables */}\r\n      {(Object.keys(dropdowns) as Array<keyof typeof dropdowns>).map((key) => (\r\n        <div\r\n          key={key}\r\n          className={`relative group ${mobileMenuOpen ? \"w-full\" : \"w-auto\"}`}\r\n          onMouseEnter={() => !mobileMenuOpen && setHoveredMenu(key)}\r\n          onMouseLeave={() => !mobileMenuOpen && setHoveredMenu(null)}\r\n        >\r\n          <button\r\n            onClick={() =>\r\n              mobileMenuOpen\r\n                ? setHoveredMenu((prev) => (prev === key ? null : key))\r\n                : null\r\n            }\r\n            className=\"flex items-center justify-between gap-1 w-full font-medium capitalize hover:text-accent1 transition duration-200\"\r\n          >\r\n            {key}\r\n            {mobileMenuOpen ? (\r\n              hoveredMenu === key ? (\r\n                <MinusIcon className=\"h-5 w-5 transition-all duration-300 text-accent1\" />\r\n              ) : (\r\n                <PlusIcon className=\"h-5 w-5 transition-all duration-300\" />\r\n              )\r\n            ) : (\r\n              <motion.div\r\n                animate={{\r\n                  rotate: hoveredMenu === key ? 180 : 0,\r\n                }}\r\n                style={{\r\n                  color:\r\n                    hoveredMenu === key\r\n                      ? \"var(--color-accent1)\"\r\n                      : \"var(--color-textLight)\",\r\n                }}\r\n                transition={{ duration: 0.3 }}\r\n              >\r\n                <ChevronDownIcon className=\"h-5 w-5 text-current transition-all duration-300\" />\r\n              </motion.div>\r\n            )}\r\n          </button>\r\n\r\n          <AnimatePresence initial={false}>\r\n            {hoveredMenu === key && (\r\n              <motion.div\r\n                key={key}\r\n                initial={{ height: 0, opacity: 0 }}\r\n                animate={{ height: \"auto\", opacity: 1 }}\r\n                exit={{ height: 0, opacity: 0 }}\r\n                transition={{ duration: 0.3, ease: \"easeInOut\" }}\r\n                className={`overflow-hidden ${\r\n                  mobileMenuOpen\r\n                    ? \"w-full mt-1\"\r\n                    : \"absolute left-1/2 -translate-x-1/2 top-full mt-2 w-56\"\r\n                } backdrop-blur-md bg-bgLight/30 dark:bg-bgDark/40 text-textDark dark:text-textLight rounded-xl shadow-xl ring-1 ring-bgLight/25 z-50`}\r\n              >\r\n                {dropdowns[key].map((label, idx) => (\r\n                  <Link\r\n                    key={idx}\r\n                    to={`/${key}#${label.toLowerCase().replace(/\\s+/g, \"-\")}`}\r\n                    onClick={handleLinkClick}\r\n                    className=\"block px-4 py-2 text-sm font-semibold hover:bg-accent2/80 hover:text-textLight/90 dark:hover:bg-bgLight/80 dark:hover:text-textDark/90 transition-all duration-200\"\r\n                  >\r\n                    {label}\r\n                  </Link>\r\n                ))}\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n      ))}\r\n\r\n      {/* Links para cliente logueado */}\r\n      {isLoggedIn && userRole === \"client\" && (\r\n        <>\r\n          <Link\r\n            to=\"/compras\"\r\n            onClick={handleLinkClick}\r\n            className=\"hover:text-accent1 transition font-medium\"\r\n          >\r\n            Mis Compras\r\n          </Link>\r\n          <Link\r\n            to=\"/perfil\"\r\n            onClick={handleLinkClick}\r\n            className=\"hover:text-accent1 transition font-medium\"\r\n          >\r\n            Mi Perfil\r\n          </Link>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n",
  "src\\components\\RouteModalHandler.tsx": "// src/components/RouteModalHandler.tsx\r\nimport { useEffect } from \"react\";\r\nimport { useLocation, useNavigate } from \"react-router-dom\";\r\nimport { useAuthModal } from \"../store/useAuthModal\";\r\n\r\nconst RouteModalHandler = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { openModal, isOpen } = useAuthModal();\r\n\r\n  // Abre el modal cuando entra a /login o /register\r\n  useEffect(() => {\r\n    if (location.pathname === \"/login\") {\r\n      openModal(\"login\");\r\n    } else if (location.pathname === \"/register\") {\r\n      openModal(\"register\");\r\n    }\r\n  }, [location.pathname, openModal]);\r\n\r\n  // Si se cierra el modal estando en /login o /register, redirige al home\r\n  useEffect(() => {\r\n    if (\r\n      !isOpen &&\r\n      (location.pathname === \"/login\" || location.pathname === \"/register\")\r\n    ) {\r\n      navigate(\"/\");\r\n    }\r\n  }, [isOpen, location.pathname, navigate]);\r\n\r\n  return null;\r\n};\r\n\r\nexport default RouteModalHandler;\r\n",
  "src\\components\\ThemeToggle.tsx": "import { useTheme } from '../hooks/useTheme';\r\nimport { FaSun, FaMoon } from 'react-icons/fa';\r\n\r\nexport const ThemeToggle = () => {\r\n  const { darkMode, toggleDarkMode } = useTheme();\r\n\r\n  return (\r\n    <button\r\n      onClick={toggleDarkMode}\r\n      className=\"p-2 rounded-lg bg-gray-200 dark:bg-gray-700 transition-colors\"\r\n      aria-label={darkMode ? 'Activar modo claro' : 'Activar modo oscuro'}\r\n    >\r\n      {darkMode ? <FaSun className=\"text-yellow-400\" /> : <FaMoon className=\"text-gray-700\" />}\r\n    </button>\r\n  );\r\n};\r\n",
  "src\\context\\AuthContext.tsx": "// AuthContext.tsx\r\nimport { createContext } from 'react';\r\nexport const AuthContext = createContext(null);",
  "src\\context\\ThemeContext.tsx": "import { createContext } from 'react';\r\n\r\n// Definir tipos\r\nexport interface ThemeContextType {\r\n  darkMode: boolean;\r\n  toggleDarkMode: () => void;\r\n}\r\n\r\n// Crear y exportar el contexto\r\nexport const ThemeContext = createContext<ThemeContextType>({\r\n  darkMode: false,\r\n  toggleDarkMode: () => {},\r\n});\r\n",
  "src\\context\\ThemeProvider.tsx": "import { useState, useEffect, ReactNode } from 'react';\r\nimport { ThemeContext } from './ThemeContext';\r\n\r\ninterface ThemeProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport function ThemeProvider({ children }: ThemeProviderProps) {\r\n  const [darkMode, setDarkMode] = useState<boolean>(() => {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    return savedTheme === 'dark';\r\n  });\r\n\r\n  useEffect(() => {\r\n    document.documentElement.classList.toggle('dark', darkMode);\r\n    localStorage.setItem('theme', darkMode ? 'dark' : 'light');\r\n  }, [darkMode]);\r\n\r\n  const toggleDarkMode = () => {\r\n    setDarkMode(prev => !prev);\r\n  };\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\r\n      {children}\r\n    </ThemeContext.Provider>\r\n  );\r\n}\r\n",
  "src\\hooks\\useAuth.ts": "import { useEffect, useState } from \"react\";\r\n\r\nexport const useAuth = () => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [userRole, setUserRole] = useState<\"admin\" | \"client\">(\"client\");\r\n\r\n  useEffect(() => {\r\n    const token = localStorage.getItem(\"token\");\r\n    setIsLoggedIn(!!token);\r\n\r\n    // Puedes agregar lógica real aquí con JWT decode, etc.\r\n    if (token) {\r\n      const payload = JSON.parse(atob(token.split(\".\")[1]));\r\n      setUserRole(payload.role || \"client\");\r\n    }\r\n  }, []);\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    window.location.href = \"/login\";\r\n  };\r\n\r\n  return { isLoggedIn, userRole, logout };\r\n};\r\n",
  "src\\hooks\\useTheme.ts": "import { useContext } from 'react';\r\nimport { ThemeContext } from '../context/ThemeContext';\r\n\r\nexport const useTheme = () => {\r\n  return useContext(ThemeContext);\r\n};",
  "src\\index.css": "@import \"tailwindcss\";\r\n\r\n@layer theme, base, components, utilities;\r\n\r\n/* Ignorar alertas de error, ya que es una versión reciente de TailwindCSS */\r\n@custom-variant dark (&:where(.dark, .dark *));\r\n\r\n@theme {\r\n    --color-primary: #00b1e8;\r\n    --color-secondary: #f26c1d;\r\n    --color-hoverSecondary:#fc843d;\r\n    --color-accent1: #ffda00;\r\n    --color-accent2: #4c2882;\r\n    --color-textDark: #333333;\r\n    --color-textLight: #f5f5f5;\r\n    --color-bgLight: #f5f5f5;\r\n    --color-bgDark: #333333;\r\n    --color-facebook: #1877f2;\r\n    --color-instagram: #e1306c;\r\n    --color-whatsapp: #25d366;\r\n    --color-tiktok: #f5f5f5;\r\n    --color-youtube: #ff0000;\r\n}\r\n\r\n.input-style {\r\n    @apply mt-1 w-full px-4 py-2 border-2 border-gray-200 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-300;\r\n}\r\n  ",
  "src\\layout\\Container.tsx": "const Container = ({ children }: { children: React.ReactNode }) => {\r\n    return <div className=\"max-w-7xl mx-auto px-4\">{children}</div>;\r\n  };\r\n  \r\n  export default Container;\r\n  ",
  "src\\layout\\DashboardLayout.tsx": "import Sidebar from \"../layout/navigation/Sidebar\";\r\nimport HeaderMobile from \"../layout/navigation/HeaderMobile\";\r\nimport { ReactNode, useState } from \"react\";\r\ninterface Props {\r\n  children: ReactNode;\r\n}\r\n\r\nconst DashboardLayout = ({ children }: Props) => {\r\n  const [isSidebarOpen, setSidebarOpen] = useState(true);\r\n\r\n  return (\r\n    <div className=\"flex h-screen bg-bgLight dark:bg-bgDark transition-colors\">\r\n      <Sidebar isOpen={isSidebarOpen} />\r\n      <div className=\"flex flex-col flex-1\">\r\n        <HeaderMobile onToggleSidebar={() => setSidebarOpen(!isSidebarOpen)} />\r\n        <main className=\"flex-1 overflow-y-auto p-4\">{children}</main>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DashboardLayout;",
  "src\\layout\\navigation\\Footer.tsx": "import {\r\n    FaMapMarkerAlt,\r\n    FaClock,\r\n    FaFacebook,\r\n    FaInstagram,\r\n    FaWhatsapp,\r\n    FaTiktok,\r\n    FaYoutube,\r\n  } from \"react-icons/fa\";\r\n  import { Link } from \"react-router-dom\";\r\n  \r\n  const Footer = () => {\r\n    return (\r\n      <footer className=\"bg-accent2 text-white py-16 mt-8\">\r\n        <div className=\"container mx-auto px-4 grid grid-cols-1 md:grid-cols-4 gap-8 text-center md:text-left transition-all duration-300\">\r\n          {/* Logo + Descripción */}\r\n          <div className=\"flex flex-col items-center md:items-start\">\r\n            <Link to=\"/\" className=\"flex items-center gap-2\">\r\n              <img\r\n                src=\"../../../public/ARP logo.png\"\r\n                alt=\"Logo de Aqua River Park\"\r\n                className=\"h-20 mb-4 drop-shadow-xl\"\r\n              />\r\n            </Link>\r\n            <p className=\"text-sm opacity-90 max-w-xs\">\r\n              Un parque acuático temático con diversión para toda la familia.\r\n            </p>\r\n          </div>\r\n  \r\n          {/* Enlaces rápidos */}\r\n          <div>\r\n            <h3 className=\"text-xl font-bold mb-4 text-accent1\">Enlaces Rápidos</h3>\r\n            <ul className=\"space-y-2\">\r\n              {[\r\n                { href: \"#inicio\", text: \"Inicio\" },\r\n                { href: \"#atracciones\", text: \"Atracciones\" },\r\n                { href: \"#horarios\", text: \"Horarios\" },\r\n                { href: \"#promociones\", text: \"Promociones\" },\r\n              ].map((item, index) => (\r\n                <li key={index}>\r\n                  <a\r\n                    href={item.href}\r\n                    className=\"hover:text-primary transition-colors\"\r\n                  >\r\n                    {item.text}\r\n                  </a>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n  \r\n          {/* Información de contacto */}\r\n          <div>\r\n            <h3 className=\"text-xl font-bold mb-4 text-accent1\">Contacto</h3>\r\n            <ul className=\"space-y-2 text-sm\">\r\n              <li className=\"flex items-center justify-center md:justify-start\">\r\n                <FaMapMarkerAlt className=\"mr-2 text-secondary\" />\r\n                Calle Principal 123, Ciudad\r\n              </li>\r\n              <li className=\"flex items-center justify-center md:justify-start\">\r\n                <FaClock className=\"mr-2 text-secondary\" />\r\n                9:00 AM - 5:00 PM\r\n              </li>\r\n            </ul>\r\n          </div>\r\n  \r\n          {/* Redes Sociales */}\r\n          <div>\r\n            <h3 className=\"text-xl font-bold mb-4 text-accent1\">Redes Sociales</h3>\r\n            <div className=\"flex justify-center md:justify-start space-x-4\">\r\n              {[\r\n                { icon: FaFacebook, color: \"facebook\", title: \"Facebook\" },\r\n                { icon: FaInstagram, color: \"instagram\", title: \"Instagram\" },\r\n                { icon: FaWhatsapp, color: \"whatsapp\", title: \"Whatsapp\" },\r\n                { icon: FaTiktok, color: \"tiktok\", title: \"TikTok\" },\r\n                { icon: FaYoutube, color: \"youtube\", title: \"YouTube\" },\r\n              ].map(({ icon: Icon, color, title }, index) => (\r\n                <a\r\n                  key={index}\r\n                  href=\"#\"\r\n                  className=\"transition-all transform hover:scale-110\"\r\n                  title={title}\r\n                  style={{\r\n                    color: `var(--color-${color})`,\r\n                    textShadow: `0 0 6px var(--color-${color})`,\r\n                  }}\r\n                >\r\n                  <Icon size={24} />\r\n                </a>\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n  \r\n        {/* Pie de página */}\r\n        <div className=\"mt-10 text-center text-xs text-white/70\">\r\n          © {new Date().getFullYear()} Aqua River Park. Todos los derechos reservados.\r\n        </div>\r\n      </footer>\r\n    );\r\n  };\r\n  \r\n  export default Footer;\r\n  ",
  "src\\layout\\navigation\\Header.tsx": "import { Link, useLocation, useNavigate } from \"react-router-dom\";\r\nimport { FaUserCircle, FaBars, FaTimes } from \"react-icons/fa\";\r\nimport { Menu, MenuButton, MenuItem } from \"@headlessui/react\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { ThemeToggle } from \"../../components/ThemeToggle\";\r\nimport { useAuth } from \"../../hooks/useAuth\";\r\nimport { useEffect, useState, useRef } from \"react\";\r\nimport { NavMenu } from \"../../components/NavMenu\";\r\nimport { useAuthModal } from \"../../store/useAuthModal\"; // <-- store Zustand\r\n\r\nconst Header: React.FC = () => {\r\n  const { isLoggedIn, logout, userRole } = useAuth();\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\r\n  const menuRef = useRef<HTMLDivElement>(null);\r\n  const { openModal } = useAuthModal(); // <-- usar Zustand\r\n\r\n  const dropdownItems = {\r\n    client: [\r\n      { label: \"Perfil\", path: \"/perfil\" },\r\n      { label: \"Ajustes\", path: \"/ajustes\" },\r\n      { label: \"Compras\", path: \"/compras\" },\r\n    ],\r\n    admin: [\r\n      { label: \"Dashboard\", path: \"/admin\" },\r\n      { label: \"Perfil\", path: \"/perfil\" },\r\n      { label: \"Ajustes\", path: \"/ajustes\" },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    setMobileMenuOpen(false);\r\n  }, [location]);\r\n\r\n  useEffect(() => {\r\n    if (isLoggedIn && userRole === \"admin\") {\r\n      navigate(\"/admin\");\r\n    }\r\n  }, [isLoggedIn, userRole, navigate]);\r\n\r\n  const handleLinkClick = () => setMobileMenuOpen(false);\r\n\r\n  return (\r\n    <header className=\"bg-primary dark:bg-bgDark text-white shadow-md sticky top-0 z-50 transition-colors duration-300 ease-in-out\">\r\n      <div className=\"max-w-[1400px] mx-auto px-4 md:px-8\">\r\n        <div className=\"flex items-center justify-between h-16 md:h-20\">\r\n          {/* Logo y Toggle */}\r\n          <div className=\"flex items-center gap-3\">\r\n            <button\r\n              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}\r\n              className=\"md:hidden text-2xl transition-transform hover:scale-110\"\r\n              aria-label=\"Abrir menú\"\r\n            >\r\n              {mobileMenuOpen ? <FaTimes /> : <FaBars />}\r\n            </button>\r\n\r\n            <Link\r\n              to=\"/\"\r\n              className=\"flex items-center gap-2 transition-transform hover:scale-105\"\r\n            >\r\n              <img\r\n                src=\"/ARP logo.png\"\r\n                alt=\"Logo\"\r\n                className=\"h-10 w-auto drop-shadow\"\r\n              />\r\n              <span className=\"font-bold text-lg\">Aqua River Park</span>\r\n            </Link>\r\n          </div>\r\n\r\n          {/* Menú de navegación (desktop) */}\r\n          <nav className=\"hidden md:flex items-center gap-6 justify-center\">\r\n            <NavMenu\r\n              isLoggedIn={isLoggedIn}\r\n              userRole={userRole}\r\n              mobileMenuOpen={false}\r\n              handleLinkClick={handleLinkClick}\r\n            />\r\n          </nav>\r\n\r\n          {/* Iconos a la derecha */}\r\n          <div className=\"flex items-center gap-4\">\r\n            <ThemeToggle />\r\n            {isLoggedIn ? (\r\n              <Menu as=\"div\" className=\"relative\">\r\n                <MenuButton className=\"flex items-center transition-transform hover:scale-110\">\r\n                  <FaUserCircle className=\"text-3xl\" />\r\n                </MenuButton>\r\n                <AnimatePresence>\r\n                  <motion.div\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    exit={{ opacity: 0, y: 10 }}\r\n                    transition={{ duration: 0.2 }}\r\n                    className=\"absolute right-0 mt-2 w-48 bg-white dark:bg-bgDark rounded-md shadow-lg z-50 ring-1 ring-black/10 divide-y divide-gray-200 dark:divide-gray-700\"\r\n                  >\r\n                    <div className=\"py-1\">\r\n                      {(dropdownItems[userRole] || []).map((item, idx) => (\r\n                        <MenuItem key={idx}>\r\n                          {({ active }) => (\r\n                            <Link\r\n                              to={item.path}\r\n                              className={`block px-4 py-2 text-sm transition-all duration-200 ${\r\n                                active\r\n                                  ? \"bg-gray-100 dark:bg-gray-700 text-primary\"\r\n                                  : \"text-gray-700 dark:text-white\"\r\n                              }`}\r\n                            >\r\n                              {item.label}\r\n                            </Link>\r\n                          )}\r\n                        </MenuItem>\r\n                      ))}\r\n                    </div>\r\n                    <div className=\"py-1\">\r\n                      <MenuItem>\r\n                        {({ active }) => (\r\n                          <button\r\n                            onClick={logout}\r\n                            className={`block w-full text-left px-4 py-2 text-sm transition-all duration-200 ${\r\n                              active\r\n                                ? \"bg-red-100 dark:bg-red-600 text-red-700\"\r\n                                : \"text-red-500\"\r\n                            }`}\r\n                          >\r\n                            Cerrar sesión\r\n                          </button>\r\n                        )}\r\n                      </MenuItem>\r\n                    </div>\r\n                  </motion.div>\r\n                </AnimatePresence>\r\n              </Menu>\r\n            ) : (\r\n              <>\r\n                {/* Mobile icon */}\r\n                <button\r\n                  onClick={() => openModal(\"login\")}\r\n                  aria-label=\"Iniciar sesión\"\r\n                  className=\"md:hidden text-2xl hover:text-accent1 transition-transform\"\r\n                >\r\n                  <FaUserCircle />\r\n                </button>\r\n\r\n                {/* Desktop button */}\r\n                <button\r\n                  onClick={() => openModal(\"login\")}\r\n                  className=\"hidden md:inline-block bg-secondary hover:bg-hoverSecondary px-4 py-2 rounded-md text-white transition-colors duration-300 text-sm\"\r\n                >\r\n                  Iniciar sesión\r\n                </button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Menú móvil deslizable */}\r\n      <AnimatePresence>\r\n        {mobileMenuOpen && (\r\n          <motion.div\r\n            ref={menuRef}\r\n            initial={{ y: -20, opacity: 0 }}\r\n            animate={{ y: 0, opacity: 1 }}\r\n            exit={{ y: -20, opacity: 0 }}\r\n            transition={{ duration: 0.3 }}\r\n            className=\"md:hidden px-6 py-4 bg-primary dark:bg-bgDark space-y-3 shadow-md\"\r\n          >\r\n            <NavMenu\r\n              isLoggedIn={isLoggedIn}\r\n              userRole={userRole}\r\n              mobileMenuOpen={true}\r\n              handleLinkClick={handleLinkClick}\r\n            />\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n",
  "src\\layout\\navigation\\HeaderMobile.tsx": "import { useEffect } from \"react\";\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { FaBars, FaSun, FaMoon, FaUserCircle } from \"react-icons/fa\";\r\nimport { Menu, MenuButton, MenuItem } from \"@headlessui/react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { useAuth } from \"../../hooks/useAuth\";\r\nimport { useTheme } from \"../../hooks/useTheme\";\r\n\r\ninterface HeaderMobileProps {\r\n  onToggleSidebar?: () => void;\r\n}\r\n\r\nconst HeaderMobile: React.FC<HeaderMobileProps> = ({ onToggleSidebar }) => {\r\n  const { darkMode, toggleDarkMode } = useTheme();\r\n  const { isLoggedIn, logout, userRole } = useAuth();\r\n  const location = useLocation();\r\n\r\n  const dropdownItems: Record<string, { label: string; path: string }[]> = {\r\n    client: [\r\n      { label: \"Perfil\", path: \"/perfil\" },\r\n      { label: \"Ajustes\", path: \"/ajustes\" },\r\n    ],\r\n    admin: [\r\n      { label: \"Dashboard\", path: \"/admin\" },\r\n      { label: \"Perfil\", path: \"/perfil\" },\r\n    ],\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Podrías cerrar modales o limpiar algún estado aquí si lo deseas\r\n  }, [location]);\r\n\r\n  return (\r\n    <header className=\"bg-primary dark:bg-bgDark text-white px-4 py-3 flex items-center justify-between shadow-md sticky top-0 z-50\">\r\n      {/* Sidebar toggle + Logo */}\r\n      <div className=\"flex items-center gap-3\">\r\n        {onToggleSidebar && (\r\n          <button onClick={onToggleSidebar} className=\"text-white text-xl\">\r\n            <FaBars />\r\n          </button>\r\n        )}\r\n        <Link to=\"/\" className=\"flex items-center gap-2\">\r\n          <img src=\"/ARP logo.png\" alt=\"Logo\" className=\"h-8\" />\r\n          <span className=\"font-semibold text-base\">Aqua River Park</span>\r\n        </Link>\r\n      </div>\r\n\r\n      {/* Dark mode + Auth */}\r\n      <div className=\"flex items-center gap-4\">\r\n        <button\r\n          onClick={toggleDarkMode}\r\n          className=\"p-2 rounded-full bg-white/20 hover:bg-white/30 transition\"\r\n          title={darkMode ? \"Modo claro\" : \"Modo oscuro\"}\r\n        >\r\n          {darkMode ? <FaSun /> : <FaMoon />}\r\n        </button>\r\n\r\n        {isLoggedIn ? (\r\n          <Menu as=\"div\" className=\"relative\">\r\n            <MenuButton className=\"flex items-center\">\r\n              <FaUserCircle className=\"text-2xl\" />\r\n            </MenuButton>\r\n            <AnimatePresence>\r\n              <motion.div\r\n                initial={{ opacity: 0, y: 10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                exit={{ opacity: 0, y: 10 }}\r\n                transition={{ duration: 0.2 }}\r\n                className=\"absolute right-0 mt-2 w-44 bg-white dark:bg-bgDark rounded-md shadow-lg z-50 ring-1 ring-black/10\"\r\n              >\r\n                <div className=\"py-1\">\r\n                  {(dropdownItems[userRole] || []).map(\r\n                    (item, idx: number) => (\r\n                      <MenuItem key={idx}>\r\n                        {({ active }: { active: boolean }) => (\r\n                          <Link\r\n                            to={item.path}\r\n                            className={`block px-4 py-2 text-sm ${\r\n                              active\r\n                                ? \"bg-gray-100 dark:bg-gray-700 text-primary\"\r\n                                : \"text-gray-800 dark:text-white\"\r\n                            }`}\r\n                          >\r\n                            {item.label}\r\n                          </Link>\r\n                        )}\r\n                      </MenuItem>\r\n                    )\r\n                  )}\r\n                </div>\r\n                <div className=\"py-1\">\r\n                  <MenuItem>\r\n                    {({ active }: { active: boolean }) => (\r\n                      <button\r\n                        onClick={logout}\r\n                        className={`block w-full text-left px-4 py-2 text-sm ${\r\n                          active\r\n                            ? \"bg-red-100 dark:bg-red-600 text-red-700\"\r\n                            : \"text-red-500\"\r\n                        }`}\r\n                      >\r\n                        Cerrar sesión\r\n                      </button>\r\n                    )}\r\n                  </MenuItem>\r\n                </div>\r\n              </motion.div>\r\n            </AnimatePresence>\r\n          </Menu>\r\n        ) : (\r\n          <Link\r\n            to=\"/login\"\r\n            className=\"bg-secondary hover:bg-hoverSecondary px-3 py-1.5 rounded-md text-white text-sm transition\"\r\n          >\r\n            Acceder\r\n          </Link>\r\n        )}\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default HeaderMobile;\r\n",
  "src\\layout\\navigation\\MiniFooter.tsx": "// src/components/navigation/MiniFooter.tsx\r\n\r\nconst MiniFooter = () => {\r\n    return (\r\n      <footer className=\"bg-accent2 text-white text-xs py-3 px-4 text-center shadow-md\">\r\n        <span className=\"block md:inline\">\r\n          © {new Date().getFullYear()} Aqua River Park\r\n        </span>\r\n        <span className=\"hidden md:inline mx-2\">|</span>\r\n        <span className=\"block md:inline text-white/80\">\r\n          Todos los derechos reservados\r\n        </span>\r\n      </footer>\r\n    );\r\n  };\r\n  \r\n  export default MiniFooter;\r\n  ",
  "src\\layout\\navigation\\Sidebar.tsx": "// src/layout/navigation/Sidebar.tsx\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { FaHome, FaUser, FaCog } from \"react-icons/fa\";\r\nimport classNames from \"classnames\";\r\n\r\ninterface SidebarProps {\r\n  isOpen: boolean;\r\n}\r\n\r\nconst menuItems = [\r\n  { label: \"Inicio\", path: \"/\", icon: <FaHome /> },\r\n  { label: \"Perfil\", path: \"/perfil\", icon: <FaUser /> },\r\n  { label: \"Configuración\", path: \"/ajustes\", icon: <FaCog /> },\r\n];\r\n\r\nconst Sidebar = ({ isOpen }: SidebarProps) => {\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <aside\r\n      className={classNames(\r\n        \"h-screen bg-accent2 text-white transition-all duration-300 flex flex-col\",\r\n        isOpen ? \"w-64\" : \"w-16\"\r\n      )}\r\n    >\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-center md:justify-between px-4 py-4 border-b border-white/10\">\r\n        {isOpen && <h1 className=\"text-lg font-bold\">Aqua River</h1>}\r\n      </div>\r\n\r\n      {/* Menu */}\r\n      <nav className=\"flex-1 overflow-y-auto mt-4 space-y-2\">\r\n        {menuItems.map((item, index) => (\r\n          <Link\r\n            to={item.path}\r\n            key={index}\r\n            className={classNames(\r\n              \"flex items-center gap-3 px-4 py-2 rounded-md mx-2 transition-colors\",\r\n              location.pathname === item.path\r\n                ? \"bg-accent1 text-textDark font-semibold\"\r\n                : \"hover:bg-white/10\"\r\n            )}\r\n          >\r\n            <span className=\"text-lg\">{item.icon}</span>\r\n            {isOpen && <span className=\"text-sm\">{item.label}</span>}\r\n          </Link>\r\n        ))}\r\n      </nav>\r\n\r\n      {/* Footer */}\r\n      {isOpen && (\r\n        <div className=\"px-4 py-4 text-xs text-gray-300 border-t border-white/10\">\r\n          © {new Date().getFullYear()} Aqua River Park\r\n        </div>\r\n      )}\r\n    </aside>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n",
  "src\\layout\\PublicLayout.tsx": "import Header from \"../layout/navigation/Header\";\r\nimport Footer from \"../layout/navigation/Footer\";\r\n// import { ReactNode } from \"react\";\r\n\r\n// interface Props {\r\n//   children: ReactNode;\r\n// }\r\n\r\nconst PublicLayout = ({ children }: { children: React.ReactNode }) => {\r\n  return (\r\n    <div className=\"flex flex-col min-h-screen bg-bgLight dark:bg-bgDark transition-colors\">\r\n      <Header />\r\n      <main className=\"flex-grow\">{children}</main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PublicLayout;\r\n",
  "src\\main.tsx": "// frontend/src/main.tsx\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom/client\";\r\nimport App from \"./App\";\r\nimport \"./index.css\";\r\nimport { ThemeProvider } from \"./context/ThemeProvider\";\r\n\r\nReactDOM.createRoot(document.getElementById(\"root\")!).render(\r\n<ThemeProvider>\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n    </ThemeProvider>\r\n);\r\n",
  "src\\pages\\ConfirmAccount.tsx": "",
  "src\\pages\\ConfirmationMail.tsx": "import { useEffect, useState } from \"react\";\r\nimport { useParams, useNavigate } from \"react-router-dom\";\r\nimport api from \"../api/axios\";\r\nimport { AxiosError } from \"axios\";\r\nimport { FaCheckCircle, FaTimesCircle, FaInfoCircle } from \"react-icons/fa\";\r\nimport { useAuthModal } from \"../store/useAuthModal\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ConfirmationMail = () => {\r\n  const { token } = useParams();\r\n  const navigate = useNavigate();\r\n  const { openModal } = useAuthModal();\r\n\r\n  const queryParams = new URLSearchParams(window.location.search);\r\n  const emailFromQuery = queryParams.get(\"email\");\r\n\r\n  const [message, setMessage] = useState(\"Confirmando...\");\r\n  const [type, setType] = useState<\"success\" | \"info\" | \"error\">(\"info\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [email, setEmail] = useState(emailFromQuery || \"\");\r\n  const [resendMsg, setResendMsg] = useState(\"\");\r\n  const [resendSuccess, setResendSuccess] = useState(false);\r\n  const [isSending, setIsSending] = useState(false); // ✅ Bloqueo de clics\r\n\r\n  useEffect(() => {\r\n    const confirmAccount = async () => {\r\n      try {\r\n        const res = await api.get(`/confirm/${token}?email=${emailFromQuery}`);\r\n        const { message } = res.data;\r\n\r\n        setMessage(message);\r\n        setType(\"success\");\r\n\r\n        if (\r\n          message === \"Cuenta confirmada exitosamente.\" ||\r\n          message === \"La cuenta ya ha sido confirmada.\"\r\n        ) {\r\n          toast.success(message);\r\n          setTimeout(() => {\r\n            navigate(\"/\");\r\n            openModal(\"login\");\r\n          }, 2500);\r\n        }\r\n      } catch (err) {\r\n        const error = err as AxiosError<{ message: string }>;\r\n        const msg = error.response?.data?.message;\r\n\r\n        if (msg === \"Token inválido o expirado\") {\r\n          setMessage(\"El enlace ya fue utilizado o ha expirado.\");\r\n          setType(\"info\");\r\n          setShowModal(true);\r\n        } else {\r\n          setMessage(\"Ocurrió un error al confirmar tu cuenta.\");\r\n          setType(\"error\");\r\n        }\r\n      }\r\n    };\r\n\r\n    confirmAccount();\r\n  }, [token, emailFromQuery, navigate, openModal]);\r\n\r\n  const handleResend = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (isSending) return;\r\n\r\n    setIsSending(true);\r\n    setResendMsg(\"\");\r\n\r\n    try {\r\n      const res = await api.post(\"/resend-confirmation\", { email });\r\n      toast.success(\"¡Correo reenviado correctamente!\");\r\n      setResendMsg(res.data.message);\r\n      setResendSuccess(true);\r\n\r\n      setTimeout(() => {\r\n        setShowModal(false);\r\n        setResendMsg(\"\");\r\n        setEmail(\"\");\r\n        setResendSuccess(false);\r\n        navigate(\"/\");\r\n        openModal(\"login\");\r\n      }, 3000);\r\n    } catch (err) {\r\n      const error = err as AxiosError<{ message: string }>;\r\n      const msg =\r\n        error.response?.data?.message || \"Error al reenviar el correo\";\r\n      setResendMsg(msg);\r\n      toast.error(msg);\r\n    } finally {\r\n      setIsSending(false);\r\n    }\r\n  };\r\n\r\n  const renderIcon = () => {\r\n    if (type === \"success\")\r\n      return <FaCheckCircle className=\"text-green-500 text-4xl mb-4 mx-auto\" />;\r\n    if (type === \"error\")\r\n      return <FaTimesCircle className=\"text-red-500 text-4xl mb-4 mx-auto\" />;\r\n    return <FaInfoCircle className=\"text-yellow-500 text-4xl mb-4 mx-auto\" />;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-100 px-4\">\r\n        <div className=\"bg-white shadow-md rounded-lg p-6 w-full max-w-md text-center\">\r\n          {renderIcon()}\r\n          <h1 className=\"text-2xl font-bold mb-2\">Confirmación de Cuenta</h1>\r\n          <p\r\n            className={`text-base ${\r\n              type === \"success\"\r\n                ? \"text-green-600\"\r\n                : type === \"error\"\r\n                ? \"text-red-500\"\r\n                : \"text-yellow-600\"\r\n            }`}\r\n          >\r\n            {message}\r\n          </p>\r\n        </div>\r\n      </div>\r\n\r\n      {showModal && (\r\n        <div className=\"fixed inset-0 bg-black/70 bg-opacity-40 flex items-center justify-center z-50\">\r\n          <div className=\"bg-white rounded-lg shadow-lg p-8 w-full max-w-md relative\">\r\n            {!resendSuccess && (\r\n              <button\r\n                onClick={() => setShowModal(false)}\r\n                className=\"absolute top-2 right-3 text-gray-500 hover:text-red-500 text-lg font-bold\"\r\n              >\r\n                &times;\r\n              </button>\r\n            )}\r\n            <h2 className=\"text-xl font-bold text-center mb-4 text-sky-600\">\r\n              ¿Necesitas un nuevo enlace?\r\n            </h2>\r\n            {!resendSuccess ? (\r\n              <>\r\n                <p className=\"text-sm text-gray-600 text-center mb-4\">\r\n                  Ingresa tu correo para recibir un nuevo enlace de\r\n                  confirmación:\r\n                </p>\r\n                <form onSubmit={handleResend} className=\"space-y-4\">\r\n                  <input\r\n                    type=\"email\"\r\n                    placeholder=\"Tu correo\"\r\n                    value={email}\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-sky-500\"\r\n                    required\r\n                  />\r\n                  <button\r\n                    type=\"submit\"\r\n                    disabled={isSending}\r\n                    className={`w-full bg-sky-600 text-white py-2 rounded-md hover:bg-sky-700 transition ${\r\n                      isSending ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n                    }`}\r\n                  >\r\n                    {isSending ? \"Enviando...\" : \"Reenviar enlace\"}\r\n                  </button>\r\n                  {resendMsg && (\r\n                    <p className=\"text-sm text-center text-red-500 mt-2\">\r\n                      {resendMsg}\r\n                    </p>\r\n                  )}\r\n                </form>\r\n              </>\r\n            ) : (\r\n              <div className=\"text-center\">\r\n                <FaCheckCircle className=\"text-green-500 text-4xl mx-auto mb-2\" />\r\n                <p className=\"text-green-600 text-sm font-medium\">\r\n                  {resendMsg}\r\n                </p>\r\n                <p className=\"text-sm text-gray-500 mt-2\">\r\n                  Redirigiendo al inicio de sesión...\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ConfirmationMail;\r\n",
  "src\\pages\\Dashboard.tsx": "import { useEffect, useState } from \"react\";\r\nimport api from \"../api/axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst Dashboard = () => {\r\n  const [user, setUser] = useState<{ name: string; role: string } | null>(null);\r\n  const [error, setError] = useState(\"\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const token = localStorage.getItem(\"token\");\r\n        if (!token) {\r\n          navigate(\"/login\");\r\n          return;\r\n        }\r\n\r\n        const res = await api.get(\"/dashboard\", {\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        setUser({ name: res.data.message.split(\" \")[1], role: res.data.role });\r\n      } catch (err: unknown) {\r\n        if (err instanceof Error && (err as { response?: { status: number } }).response?.status === 403) {\r\n          setError(\"No tienes permisos para acceder al dashboard.\");\r\n        } else {\r\n          setError(\"Acceso no autorizado. Redirigiendo...\");\r\n          setTimeout(() => navigate(\"/login\"), 2000);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, [navigate]);\r\n\r\n  const handleLogout = () => {\r\n    localStorage.removeItem(\"token\");\r\n    navigate(\"/login\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-lg mx-auto mt-20\">\r\n      <h1 className=\"text-3xl font-bold mb-4\">Dashboard</h1>\r\n      {error && <p className=\"text-red-500\">{error}</p>}\r\n      {user && (\r\n        <>\r\n          <p className=\"text-lg mb-4\">\r\n            Bienvenido <strong>{user.name}</strong>. Tu rol es:{\" \"}\r\n            <strong>{user.role}</strong>\r\n          </p>\r\n          <button\r\n            onClick={handleLogout}\r\n            className=\"bg-red-500 text-white px-4 py-2 rounded\"\r\n          >\r\n            Cerrar sesión\r\n          </button>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n",
  "src\\pages\\Home.tsx": "import { FC, useState } from \"react\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useForm, SubmitHandler } from \"react-hook-form\";\r\nimport { FaShieldAlt, FaSwimmer, FaTree, FaUtensils, FaTicketAlt } from \"react-icons/fa\";\r\nimport { IconType } from \"react-icons\";\r\n\r\ninterface Benefit {\r\n  icon: IconType;\r\n  title: string;\r\n  description: string;\r\n}\r\n\r\ninterface Attraction {\r\n  name: string;\r\n  image: string;\r\n  description: string;\r\n}\r\n\r\ninterface InvoiceFormInputs {\r\n  cedula: string;\r\n  email: string;\r\n  phone: string;\r\n  invoiceNumber: string;\r\n}\r\n\r\nconst benefits: Benefit[] = [\r\n  {\r\n    icon: FaShieldAlt,\r\n    title: \"Seguridad Total\",\r\n    description: \"Medidas de seguridad y personal capacitado\",\r\n  },\r\n  {\r\n    icon: FaSwimmer,\r\n    title: \"Diversión Acuática\",\r\n    description: \"Múltiples piscinas y atracciones\",\r\n  },\r\n  {\r\n    icon: FaTree,\r\n    title: \"Naturaleza Viva\",\r\n    description: \"Senderos ecológicos y áreas verdes\",\r\n  },\r\n  {\r\n    icon: FaUtensils,\r\n    title: \"Gastronomía Local\",\r\n    description: \"Restaurantes con opciones variadas\",\r\n  },\r\n];\r\n\r\nconst attractions: Attraction[] = [\r\n  {\r\n    name: \"Piscinas Temperadas\",\r\n    image: \"https://images.unsplash.com/photo-1576013551627-0cc20b96c2a7\",\r\n    description: \"Piscinas con temperatura controlada para todas las edades\",\r\n  },\r\n  {\r\n    name: \"Tobogán Racer\",\r\n    image: \"https://images.unsplash.com/photo-1562204839-c264b63f0bdd\",\r\n    description: \"Toboganes de alta velocidad y gran seguridad\",\r\n  },\r\n  {\r\n    name: \"Bosque de Dinosaurios\",\r\n    image: \"https://images.unsplash.com/photo-1582728810357-5c15d21de3df\",\r\n    description: \"Ruta temática con réplicas animatrónicas\",\r\n  },\r\n  {\r\n    name: \"Zona Infantil\",\r\n    image: \"https://images.unsplash.com/photo-1590056792628-84c449b3a41b\",\r\n    description: \"Área segura y divertida para los más pequeños\",\r\n  },\r\n];\r\n\r\nconst schedule = [\r\n  { day: \"Jueves\", hours: \"9 a.m.–5 p.m.\" },\r\n  { day: \"Viernes\", hours: \"9 a.m.–5 p.m.\" },\r\n  { day: \"Sábado\", hours: \"9 a.m.–5 p.m.\" },\r\n  { day: \"Domingo\", hours: \"9 a.m.–5 p.m.\" },\r\n  { day: \"Lunes\", hours: \"Cerrado\" },\r\n  { day: \"Martes\", hours: \"Cerrado\" },\r\n  { day: \"Miércoles\", hours: \"Cerrado\" },\r\n];\r\n\r\nconst Home: FC = () => {\r\n  const { register, handleSubmit, reset } = useForm<InvoiceFormInputs>();\r\n  const [invoices, setInvoices] = useState<InvoiceFormInputs[]>([]);\r\n\r\n  const onSubmit: SubmitHandler<InvoiceFormInputs> = (data) => {\r\n    if (invoices.find((inv) => inv.invoiceNumber === data.invoiceNumber)) return;\r\n    setInvoices((prev) => [...prev, data]);\r\n    reset();\r\n  };\r\n\r\n  const freeTickets = Math.floor(invoices.length / 5);\r\n\r\n  return (\r\n    <main className=\"bg-white text-[#333] font-sans\">\r\n      {/* HERO */}\r\n      <section className=\"relative h-screen\">\r\n        <video autoPlay muted loop className=\"absolute inset-0 w-full h-full object-cover\">\r\n          <source src=\"/videos/hero.mp4\" type=\"video/mp4\" />\r\n        </video>\r\n        <div className=\"absolute inset-0 bg-gradient-to-b from-black/70 to-black/30 flex items-center justify-center text-white\">\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ duration: 1 }}\r\n            className=\"text-center px-4\"\r\n          >\r\n            <h1 className=\"text-6xl md:text-8xl font-bold mb-8\">\r\n              Bienvenido a <span className=\"text-[#00B1E8]\">Aqua River Park</span>\r\n            </h1>\r\n            <motion.button\r\n              whileHover={{ scale: 1.05 }}\r\n              transition={{ type: \"spring\", stiffness: 300 }}\r\n              className=\"bg-[#F26C1D] hover:bg-[#00B1E8] text-white font-bold py-4 px-10 rounded-full shadow-lg transition-all duration-300\"\r\n            >\r\n              Reserva Ahora\r\n            </motion.button>\r\n          </motion.div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* BENEFICIOS */}\r\n      <section className=\"py-24 bg-[#F5F5F5] px-6\">\r\n        <h2 className=\"text-5xl font-bold text-center mb-20 text-[#333]\">\r\n          ¿Por qué <span className=\"text-[#00B1E8]\">Elegirnos</span>?\r\n        </h2>\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-10 max-w-6xl mx-auto\">\r\n          {benefits.map((benefit, i) => {\r\n            const Icon = benefit.icon;\r\n            return (\r\n              <motion.div\r\n                key={i}\r\n                initial={{ opacity: 0, y: 30 }}\r\n                whileInView={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: i * 0.2, duration: 0.5 }}\r\n                className=\"p-10 bg-white rounded-2xl shadow-xl text-center hover:scale-105 hover:bg-[#4C2882] group transition-all duration-300 border\"\r\n              >\r\n                <Icon className=\"text-4xl text-[#00B1E8] mb-6 group-hover:text-white transition-colors duration-300\" />\r\n                <h3 className=\"text-2xl font-bold mb-2 group-hover:text-white\">{benefit.title}</h3>\r\n                <p className=\"text-gray-600 group-hover:text-white/90\">{benefit.description}</p>\r\n              </motion.div>\r\n            );\r\n          })}\r\n        </div>\r\n      </section>\r\n\r\n      {/* ATRACCIONES */}\r\n      <section className=\"py-24 bg-white\">\r\n        <h2 className=\"text-5xl font-bold text-center mb-20 text-[#333]\">\r\n          Nuestras <span className=\"text-[#00B1E8]\">Atracciones</span>\r\n        </h2>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 max-w-6xl mx-auto px-6\">\r\n          {attractions.map((attr, i) => (\r\n            <motion.div\r\n              key={i}\r\n              initial={{ opacity: 0, scale: 0.9 }}\r\n              whileInView={{ opacity: 1, scale: 1 }}\r\n              transition={{ delay: i * 0.2, duration: 0.5 }}\r\n              className=\"relative overflow-hidden rounded-2xl shadow-xl group\"\r\n            >\r\n              <img\r\n                src={attr.image}\r\n                alt={attr.name}\r\n                className=\"w-full h-72 object-cover transition-transform duration-700 group-hover:scale-110\"\r\n              />\r\n              <div className=\"absolute inset-0 bg-[#4C2882]/90 opacity-0 group-hover:opacity-100 transition duration-500 flex items-center justify-center text-white text-center px-4\">\r\n                <div>\r\n                  <h3 className=\"text-2xl font-bold\">{attr.name}</h3>\r\n                  <p>{attr.description}</p>\r\n                </div>\r\n              </div>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n\r\n      {/* REGISTRO DE FACTURAS */}\r\n      <section className=\"py-24 bg-[#F5F5F5] px-6\">\r\n        <h2 className=\"text-5xl font-bold text-center mb-16 text-[#333]\">\r\n          Registra tus <span className=\"text-[#00B1E8]\">Facturas</span>\r\n        </h2>\r\n        <div className=\"max-w-2xl mx-auto bg-white p-10 rounded-2xl shadow-xl\">\r\n          <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-6\">\r\n            <input {...register(\"cedula\", { required: true })} placeholder=\"Cédula\" className=\"input-style\" />\r\n            <input {...register(\"email\", { required: true })} type=\"email\" placeholder=\"Correo electrónico\" className=\"input-style\" />\r\n            <input {...register(\"phone\", { required: true })} placeholder=\"Teléfono\" className=\"input-style\" />\r\n            <input {...register(\"invoiceNumber\", { required: true })} placeholder=\"Número de Factura\" className=\"input-style\" />\r\n            <button type=\"submit\" className=\"w-full bg-[#4C2882] hover:bg-[#00B1E8] text-white py-3 rounded-lg font-semibold shadow-lg transition-all\">\r\n              Registrar Factura\r\n            </button>\r\n          </form>\r\n          {freeTickets > 0 && (\r\n            <div className=\"mt-6 bg-[#F5F5F5] p-6 rounded-xl text-center font-bold text-[#F26C1D] flex justify-center items-center gap-3\">\r\n              <FaTicketAlt className=\"text-2xl animate-pulse\" />\r\n              <span>¡Has ganado {freeTickets} ticket{freeTickets > 1 ? \"s\" : \"\"} gratis!</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </section>\r\n\r\n      {/* HORARIO */}\r\n      <section className=\"py-24 bg-white\">\r\n        <h2 className=\"text-5xl font-bold text-center mb-10 text-[#333]\">Horario de Atención</h2>\r\n        <div className=\"max-w-md mx-auto bg-[#F5F5F5] rounded-2xl shadow-lg overflow-hidden\">\r\n          {schedule.map((s, i) => (\r\n            <motion.div\r\n              key={i}\r\n              whileHover={{ backgroundColor: \"#4C2882\", color: \"#fff\" }}\r\n              className=\"flex justify-between px-6 py-4 border-b border-gray-200 transition-all\"\r\n            >\r\n              <span className=\"font-medium\">{s.day}</span>\r\n              <span>{s.hours}</span>\r\n            </motion.div>\r\n          ))}\r\n        </div>\r\n      </section>\r\n\r\n      {/* UBICACIÓN */}\r\n      <section className=\"py-24 bg-[#F5F5F5]\">\r\n        <h2 className=\"text-5xl font-bold text-center mb-10 text-[#333]\">Nuestra <span className=\"text-[#00B1E8]\">Ubicación</span></h2>\r\n        <div className=\"max-w-5xl mx-auto h-96 rounded-2xl overflow-hidden shadow-2xl\">\r\n          <iframe\r\n            src=\"https://www.google.com/maps/embed?pb=...\" // cambia por el correcto\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            className=\"border-0\"\r\n            allowFullScreen\r\n            loading=\"lazy\"\r\n          ></iframe>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n",
  "src\\pages\\Login.tsx": "// import { useEffect, useState } from \"react\";\r\n// import api from \"../api/axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { FaEye, FaEyeSlash, FaCheckCircle, FaInfoCircle } from \"react-icons/fa\";\r\n// import { toast } from \"react-toastify\";\r\n// import { AxiosError } from \"axios\";\r\n\r\n// const Login = () => {\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const [showPassword, setShowPassword] = useState(false);\r\n//   const [showModal, setShowModal] = useState(false);\r\n//   const [modalStep, setModalStep] = useState<\"notice\" | \"form\" | \"success\">(\r\n//     \"notice\"\r\n//   );\r\n//   const [resendMsg, setResendMsg] = useState(\"\");\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     const confirmed = sessionStorage.getItem(\"confirmationSuccess\");\r\n//     if (confirmed) {\r\n//       toast.success(\r\n//         \"¡Cuenta confirmada con éxito! Ahora puedes iniciar sesión.\"\r\n//       );\r\n//       sessionStorage.removeItem(\"confirmationSuccess\");\r\n//     }\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     const successMsg = sessionStorage.getItem(\"toastSuccess\");\r\n//     if (successMsg) {\r\n//       toast.success(successMsg);\r\n//       sessionStorage.removeItem(\"toastSuccess\");\r\n//     }\r\n//   }, []);\r\n\r\n//   const handleSubmit = async (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n//     setError(\"\");\r\n\r\n//     try {\r\n//       const res = await api.post(\"/login\", { email, password });\r\n//       localStorage.setItem(\"token\", res.data.token);\r\n//       navigate(\"/dashboard\");\r\n//     } catch (err) {\r\n//       const error = err as AxiosError<{\r\n//         message: string;\r\n//         tokenExpired?: boolean;\r\n//       }>;\r\n//       const msg = error.response?.data?.message;\r\n\r\n//       if (msg === \"Debes confirmar tu cuenta\") {\r\n//         const expired = error.response?.data?.tokenExpired;\r\n//         setModalStep(expired ? \"form\" : \"notice\");\r\n//         setShowModal(true);\r\n//       } else {\r\n//         setError(\"Credenciales incorrectas\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   const handleResend = async (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n//     setResendMsg(\"\");\r\n\r\n//     try {\r\n//       const res = await api.post(\"/resend-confirmation\", { email });\r\n//       setResendMsg(res.data.message);\r\n//       setModalStep(\"success\");\r\n\r\n//       setTimeout(() => {\r\n//         toast.success(\"¡Correo reenviado!, Revisa tu bandeja...\");\r\n//         setShowModal(false);\r\n//         setResendMsg(\"\");\r\n//         setEmail(\"\");\r\n//         setPassword(\"\");\r\n//       }, 5000);\r\n//     } catch (err) {\r\n//       const error = err as AxiosError<{ message: string }>;\r\n//       const msg = error.response?.data?.message;\r\n\r\n//       if (msg === \"La cuenta ya está confirmada\") {\r\n//         toast.info(\"La cuenta ya ha sido confirmada.\");\r\n//         setShowModal(false);\r\n//       } else {\r\n//         setResendMsg(\"Error al reenviar el enlace.\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <div className=\"max-w-sm mx-auto mt-8\">\r\n//         <h1 className=\"text-2xl font-bold mb-4\">Iniciar sesión</h1>\r\n//         <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//           <input\r\n//             type=\"email\"\r\n//             placeholder=\"Correo\"\r\n//             className=\"w-full border p-2\"\r\n//             value={email}\r\n//             onChange={(e) => setEmail(e.target.value)}\r\n//             required\r\n//           />\r\n//           <div className=\"relative\">\r\n//             <input\r\n//               type={showPassword ? \"text\" : \"password\"}\r\n//               placeholder=\"Contraseña\"\r\n//               className=\"w-full border p-2 pr-10\"\r\n//               value={password}\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//               required\r\n//             />\r\n//             <button\r\n//               type=\"button\"\r\n//               onClick={() => setShowPassword(!showPassword)}\r\n//               className=\"absolute top-1/2 right-3 transform -translate-y-1/2 text-gray-500\"\r\n//             >\r\n//               {showPassword ? <FaEyeSlash /> : <FaEye />}\r\n//             </button>\r\n//           </div>\r\n//           <button\r\n//             type=\"submit\"\r\n//             className=\"w-full bg-blue-500 text-white p-2 rounded\"\r\n//           >\r\n//             Entrar\r\n//           </button>\r\n//           {error && <p className=\"text-red-500 text-sm\">{error}</p>}\r\n//           <p className=\"text-sm mt-2\">\r\n//             ¿No tienes una cuenta?{\" \"}\r\n//             <a href=\"/register\" className=\"text-blue-500 underline\">\r\n//               Regístrate aquí\r\n//             </a>\r\n//           </p>\r\n//         </form>\r\n//       </div>\r\n\r\n//       {showModal && (\r\n//         <div className=\"fixed inset-0 bg-black/70 flex items-center justify-center z-50\">\r\n//           <div className=\"bg-white rounded-lg shadow-lg p-6 w-full max-w-md relative text-center\">\r\n//             <button\r\n//               onClick={() => setShowModal(false)}\r\n//               className=\"absolute top-2 right-3 text-gray-500 hover:text-red-500 text-lg font-bold\"\r\n//             >\r\n//               &times;\r\n//             </button>\r\n\r\n//             {modalStep === \"notice\" && (\r\n//               <>\r\n//                 <FaInfoCircle className=\"text-yellow-500 text-4xl mx-auto mb-2\" />\r\n//                 <h2 className=\"text-xl font-bold mb-2 text-sky-600\">\r\n//                   Verifica tu cuenta\r\n//                 </h2>\r\n//                 <p className=\"text-sm text-gray-600 mb-4\">\r\n//                   Aún no has confirmado tu cuenta. Revisa tu correo para\r\n//                   activarla.\r\n//                 </p>\r\n//               </>\r\n//             )}\r\n\r\n//             {modalStep === \"form\" && (\r\n//               <>\r\n//                 <h2 className=\"text-xl font-bold mb-2 text-sky-600\">\r\n//                   Reenviar Enlace\r\n//                 </h2>\r\n//                 <form onSubmit={handleResend} className=\"space-y-4\">\r\n//                   <input\r\n//                     type=\"email\"\r\n//                     placeholder=\"Tu correo\"\r\n//                     className=\"w-full px-4 py-2 border rounded-md\"\r\n//                     value={email}\r\n//                     onChange={(e) => setEmail(e.target.value)}\r\n//                     required\r\n//                   />\r\n//                   <button\r\n//                     type=\"submit\"\r\n//                     className=\"w-full bg-sky-600 text-white py-2 rounded-md hover:bg-sky-700\"\r\n//                   >\r\n//                     Reenviar\r\n//                   </button>\r\n//                   {resendMsg && (\r\n//                     <p className=\"text-sm text-red-500\">{resendMsg}</p>\r\n//                   )}\r\n//                 </form>\r\n//               </>\r\n//             )}\r\n\r\n//             {modalStep === \"success\" && (\r\n//               <>\r\n//                 <FaCheckCircle className=\"text-green-500 text-4xl mx-auto mb-2\" />\r\n//                 <p className=\"text-green-600 text-sm font-medium\">\r\n//                   {resendMsg}\r\n//                 </p>\r\n//                 <p className=\"text-sm text-gray-500 mt-2\">\r\n//                   Serás redirigido al login...\r\n//                 </p>\r\n//               </>\r\n//             )}\r\n//           </div>\r\n//         </div>\r\n//       )}\r\n//     </>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n",
  "src\\pages\\NotFound.tsx": "import { Link } from \"react-router-dom\";\r\nimport { motion } from \"framer-motion\";\r\nimport { useCallback, useEffect, useState } from \"react\";\r\nimport Particles from \"react-tsparticles\";\r\nimport { loadSlim } from \"tsparticles-slim\"; // ✅ MÁS LIVIANO Y FUNCIONAL\r\nimport type { Engine } from \"tsparticles-engine\";\r\n\r\nconst NotFound = () => {\r\n  const [isDark, setIsDark] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const match = window.matchMedia(\"(prefers-color-scheme: dark)\");\r\n    setIsDark(match.matches);\r\n    const listener = (e: MediaQueryListEvent) => setIsDark(e.matches);\r\n    match.addEventListener(\"change\", listener);\r\n    return () => match.removeEventListener(\"change\", listener);\r\n  }, []);\r\n\r\n  const particlesInit = useCallback(async (engine: Engine) => {\r\n    await loadSlim(engine); // ✅ Ya no usamos loadFull\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"relative h-screen w-full flex items-center justify-center px-4 bg-white dark:bg-gray-900 text-gray-800 dark:text-white overflow-hidden\">\r\n      <Particles\r\n        id=\"tsparticles\"\r\n        init={particlesInit}\r\n        className=\"absolute inset-0 z-0\"\r\n        options={{\r\n          fullScreen: false,\r\n          background: { color: { value: \"transparent\" } },\r\n          particles: {\r\n            number: { value: 60 },\r\n            color: { value: isDark ? \"#ffffff\" : \"#0ea5e9\" },\r\n            shape: { type: \"circle\" },\r\n            opacity: { value: 0.4 },\r\n            size: { value: 3 },\r\n            move: {\r\n              enable: true,\r\n              speed: 1.5,\r\n              direction: \"none\",\r\n              outModes: \"out\",\r\n            },\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"z-10 text-center mt-2\">\r\n        <motion.h1\r\n          className=\"text-[8rem] sm:text-[10rem] font-black tracking-tight leading-none\"\r\n          initial={{ scale: 0 }}\r\n          animate={{ scale: 1 }}\r\n          transition={{ duration: 0.6 }}\r\n        >\r\n          404\r\n        </motion.h1>\r\n\r\n        <motion.h2\r\n          className=\"text-3xl sm:text-4xl font-semibold mt-2\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.3 }}\r\n        >\r\n          ¡Ups! Página no encontrada 😢\r\n        </motion.h2>\r\n\r\n        <motion.p\r\n          className=\"mt-4 max-w-md mx-auto text-gray-600 dark:text-gray-300 text-base sm:text-lg\"\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ delay: 0.5 }}\r\n        >\r\n          Tal vez escribiste mal la dirección o esta página ya no existe.\r\n        </motion.p>\r\n\r\n        <motion.div\r\n          className=\"mt-6 flex gap-4 justify-center flex-col sm:flex-row\"\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.8 }}\r\n        >\r\n          <Link\r\n            to=\"/\"\r\n            className=\"px-6 py-3 bg-gradient-to-r from-blue-600 to-purple-600 text-white font-semibold rounded-md hover:scale-105 transition-transform\"\r\n          >\r\n            Ir al inicio\r\n          </Link>\r\n          <Link\r\n            to=\"/dashboard\"\r\n            className=\"px-6 py-3 border border-gray-400 text-gray-700 dark:text-gray-200 dark:border-gray-500 rounded-md hover:bg-gray-200 dark:hover:bg-gray-700 transition-all\"\r\n          >\r\n            Ir al panel\r\n          </Link>\r\n        </motion.div>\r\n\r\n        <motion.div\r\n          className=\"mt-4\"\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ delay: 1.2 }}\r\n        >\r\n          <img\r\n            src=\"https://illustrations.popsy.co/violet/crashed-error.svg\"\r\n            alt=\"Ilustración de error\"\r\n            className=\"w-64 sm:w-96 mx-auto fill-indigo-500 drop-shadow-2xl drop-shadow-indigo-500/50\"\r\n          />\r\n        </motion.div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n",
  "src\\pages\\Register.tsx": "// import { useState } from \"react\";\r\n// import api from \"../api/axios\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const Register = () => {\r\n//   const [name, setName] = useState(\"\");\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [phone, setPhone] = useState(\"\");\r\n//   const [error, setError] = useState(\"\");\r\n//   const navigate = useNavigate();\r\n\r\n//   const handleSubmit = async (e: React.FormEvent) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       await api.post(\"/register\", { name, email, password, phone });\r\n//       alert(\"Registro exitoso. Revisa tu correo para confirmar tu cuenta.\");\r\n//       navigate(\"/login\");\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       setError(\"Error al registrarse. Puede que el correo ya exista.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"max-w-sm mx-auto mt-8\">\r\n//       <h1 className=\"text-2xl font-bold mb-4\">Registro</h1>\r\n//       <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n//         <input\r\n//           type=\"text\"\r\n//           placeholder=\"Nombre\"\r\n//           className=\"w-full border p-2\"\r\n//           value={name}\r\n//           onChange={(e) => setName(e.target.value)}\r\n//         />\r\n//         <input\r\n//           type=\"email\"\r\n//           placeholder=\"Correo\"\r\n//           className=\"w-full border p-2\"\r\n//           value={email}\r\n//           onChange={(e) => setEmail(e.target.value)}\r\n//         />\r\n//         <input\r\n//           type=\"tel\"\r\n//           placeholder=\"Teléfono\"\r\n//           className=\"w-full border p-2\"\r\n//           value={phone}\r\n//           onChange={(e) => setPhone(e.target.value)}\r\n//         />\r\n//         <input\r\n//           type=\"password\"\r\n//           placeholder=\"Contraseña\"\r\n//           className=\"w-full border p-2\"\r\n//           value={password}\r\n//           onChange={(e) => setPassword(e.target.value)}\r\n//         />\r\n//         <button\r\n//           type=\"submit\"\r\n//           className=\"w-full bg-green-600 text-white p-2 rounded\"\r\n//         >\r\n//           Registrarse\r\n//         </button>\r\n//         {error && <p className=\"text-red-500 text-sm\">{error}</p>}\r\n//         <p className=\"text-sm mt-2\">\r\n//           ¿Ya tienes una cuenta?{\" \"}\r\n//           <a href=\"/login\" className=\"text-blue-500 underline\">\r\n//             Inicia sesión aquí\r\n//           </a>\r\n//         </p>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Register;\r\n",
  "src\\pages\\ResetPassword.tsx": "import { useEffect, useState } from \"react\";\r\nimport { useSearchParams, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport api from \"../api/axios\";\r\nimport { useAuthModal } from \"../store/useAuthModal\";\r\nimport {\r\n  validatePasswordSecurity,\r\n} from \"../utils/validationHelpersForm\";\r\nimport PasswordWithStrengthInput from \"../components/common/PasswordWithStrengthInputForm\";\r\nimport InputWithLabel from \"../components/common/InputWithLabel\";\r\n\r\nexport default function ResetPassword() {\r\n  const [searchParams] = useSearchParams();\r\n  const token = searchParams.get(\"token\") || \"\";\r\n  const email = searchParams.get(\"email\") || \"\";\r\n  const navigate = useNavigate();\r\n  const { openModal } = useAuthModal();\r\n\r\n  const [password, setPassword] = useState(\"\");\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [passwordError, setPasswordError] = useState(\"\");\r\n  const [confirmPasswordError, setConfirmPasswordError] = useState(\"\");\r\n  const [loading, setLoading] = useState(true);\r\n  const [valid, setValid] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n  const [resend, setResend] = useState(false);\r\n  const [isSending, setIsSending] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const validateToken = async () => {\r\n      try {\r\n        const res = await api.post(\"/check-token-status\", { token });\r\n        setValid(res.data.valid);\r\n        if (!res.data.valid) setError(\"El enlace ha expirado o es inválido.\");\r\n      } catch {\r\n        setError(\"Error al validar el enlace.\");\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    if (token) validateToken();\r\n    else {\r\n      setError(\"Token no proporcionado.\");\r\n      setLoading(false);\r\n    }\r\n  }, [token]);\r\n\r\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newPassword = e.target.value;\r\n    setPassword(newPassword);\r\n\r\n    const errors = validatePasswordSecurity(newPassword, email);\r\n    setPasswordError(errors.length > 0 ? errors.join(\" \") : \"\");\r\n\r\n    if (confirmPassword && confirmPassword !== newPassword) {\r\n      setConfirmPasswordError(\"Las contraseñas no coinciden.\");\r\n    } else {\r\n      setConfirmPasswordError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleConfirmPasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newConfirm = e.target.value;\r\n    setConfirmPassword(newConfirm);\r\n    if (password !== newConfirm) {\r\n      setConfirmPasswordError(\"Las contraseñas no coinciden.\");\r\n    } else {\r\n      setConfirmPasswordError(\"\");\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (isSending) return;\r\n    setIsSending(true);\r\n\r\n    const passwordErrors = validatePasswordSecurity(password, email);\r\n    if (passwordErrors.length > 0) {\r\n      toast.warning(passwordErrors.join(\" \"));\r\n      setIsSending(false);\r\n      return;\r\n    }\r\n\r\n    if (password !== confirmPassword) {\r\n      toast.error(\"Las contraseñas no coinciden\");\r\n      setIsSending(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await api.post(`/reset-password/${token}`, { password });\r\n      toast.success(\"Contraseña actualizada correctamente\");\r\n\r\n      setTimeout(() => {\r\n        navigate(\"/\");\r\n        openModal(\"login\");\r\n      }, 2000);\r\n    } catch {\r\n      toast.error(\"Error al actualizar la contraseña\");\r\n    } finally {\r\n      setIsSending(false);\r\n    }\r\n  };\r\n\r\n  const handleResend = async () => {\r\n    if (isSending) return;\r\n    setIsSending(true);\r\n\r\n    try {\r\n      await api.post(\"/send-recovery\", { email });\r\n      toast.success(\"Se envió un nuevo enlace de recuperación\");\r\n      setResend(true);\r\n    } catch {\r\n      toast.error(\"No se pudo reenviar el correo\");\r\n    } finally {\r\n      setIsSending(false);\r\n    }\r\n  };\r\n\r\n  if (loading) return <p className=\"text-center mt-8 dark:text-white\">Cargando...</p>;\r\n\r\n  if (!valid) {\r\n    return (\r\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-100 dark:bg-bgDark px-4\">\r\n        <div className=\"bg-white dark:bg-bgLight/10 shadow-md rounded-lg p-6 w-full max-w-md text-center\">\r\n          <h2 className=\"text-xl font-semibold text-red-600 dark:text-red-400 mb-4\">{error}</h2>\r\n          {!resend && email ? (\r\n            <>\r\n              <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4\">\r\n                Puedes reenviar el enlace a: <strong>{email}</strong>\r\n              </p>\r\n              <button\r\n                onClick={handleResend}\r\n                disabled={isSending}\r\n                className={`bg-sky-600 text-white px-4 py-2 rounded hover:bg-sky-700 transition ${\r\n                  isSending ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n                }`}\r\n              >\r\n                {isSending ? \"Enviando...\" : \"Reenviar enlace\"}\r\n              </button>\r\n            </>\r\n          ) : resend ? (\r\n            <p className=\"text-green-600 dark:text-green-400\">\r\n              Enlace reenviado. Revisa tu correo.\r\n            </p>\r\n          ) : (\r\n            <p className=\"text-sm text-gray-500 dark:text-gray-300\">\r\n              Solicita un nuevo enlace desde \"Olvidé mi contraseña\".\r\n            </p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100 dark:bg-bgDark px-4\">\r\n      <form\r\n        onSubmit={handleSubmit}\r\n        className=\"bg-white dark:bg-bgLight/10 shadow-md rounded-lg p-6 w-full max-w-md\"\r\n      >\r\n        <h2 className=\"text-2xl font-bold mb-4 text-center text-sky-600 dark:text-textLight\">\r\n          Nueva Contraseña\r\n        </h2>\r\n        <p className=\"text-sm text-gray-600 dark:text-gray-300 mb-4 text-center\">\r\n          Ingresa una nueva contraseña para tu cuenta.\r\n        </p>\r\n\r\n        <PasswordWithStrengthInput\r\n          value={password}\r\n          onChange={handlePasswordChange}\r\n          error={passwordError}\r\n          showTooltip={true}\r\n          showStrengthBar={true}\r\n        />\r\n\r\n        <InputWithLabel\r\n          label=\"Confirmar contraseña\"\r\n          name=\"confirmPassword\"\r\n          type=\"password\"\r\n          value={confirmPassword}\r\n          onChange={handleConfirmPasswordChange}\r\n          placeholder=\"Confirma tu contraseña\"\r\n          error={confirmPasswordError}\r\n        />\r\n\r\n        <button\r\n          type=\"submit\"\r\n          disabled={isSending || passwordError !== \"\" || confirmPasswordError !== \"\"}\r\n          className={`w-full bg-sky-600 text-white py-2 rounded hover:bg-sky-700 transition ${\r\n            isSending ? \"opacity-50 cursor-not-allowed\" : \"\"\r\n          }`}\r\n        >\r\n          {isSending ? \"Actualizando...\" : \"Actualizar contraseña\"}\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n",
  "src\\router\\AppRouter.tsx": "// src/router/AppRouter.tsx\r\nimport { Routes, Route } from \"react-router-dom\";\r\nimport Home from \"../pages/Home\";\r\nimport Dashboard from \"../pages/Dashboard\";\r\nimport ConfirmationMail from \"../pages/ConfirmationMail\";\r\nimport ResetPassword from \"../pages/ResetPassword\";\r\nimport NotFound from \"../pages/NotFound\";\r\nimport PublicLayout from \"../layout/PublicLayout\";\r\nimport DashboardLayout from \"../layout/DashboardLayout\";\r\nimport PrivateRoute from \"../utils/PrivateRoute\";\r\n\r\nconst AppRouter = () => (\r\n  <Routes>\r\n    <Route\r\n      path=\"/\"\r\n      element={\r\n        <PublicLayout>\r\n          <Home />\r\n        </PublicLayout>\r\n      }\r\n    />\r\n    <Route\r\n      path=\"/login\"\r\n      element={\r\n        <PublicLayout>\r\n          <Home />\r\n        </PublicLayout>\r\n      }\r\n    />\r\n    <Route\r\n      path=\"/register\"\r\n      element={\r\n        <PublicLayout>\r\n          <Home />\r\n        </PublicLayout>\r\n      }\r\n    />\r\n    <Route\r\n      path=\"/confirm/:token\"\r\n      element={\r\n        <PublicLayout>\r\n          <ConfirmationMail />\r\n        </PublicLayout>\r\n      }\r\n    />\r\n    <Route\r\n      path=\"/reset-password\"\r\n      element={\r\n        <PublicLayout>\r\n          <ResetPassword />\r\n        </PublicLayout>\r\n      }\r\n    />\r\n\r\n    <Route\r\n      path=\"/dashboard\"\r\n      element={\r\n        <PrivateRoute>\r\n          <DashboardLayout>\r\n            <Dashboard />\r\n          </DashboardLayout>\r\n        </PrivateRoute>\r\n      }\r\n    />\r\n\r\n    <Route path=\"*\" element={<NotFound />} />\r\n  </Routes>\r\n);\r\n\r\nexport default AppRouter;\r\n",
  "src\\store\\useAuthModal.ts": "import { create } from \"zustand\";\r\n\r\ninterface AuthModalState {\r\n  isOpen: boolean;\r\n  view: \"login\" | \"register\";\r\n  openModal: (view?: \"login\" | \"register\") => void;\r\n  closeModal: () => void;\r\n  toggleView: () => void;\r\n}\r\n\r\nexport const useAuthModal = create<AuthModalState>((set) => ({\r\n  isOpen: false,\r\n  view: \"login\",\r\n  openModal: (view = \"login\") => set({ isOpen: true, view }),\r\n  closeModal: () => set({ isOpen: false }),\r\n  toggleView: () =>\r\n    set((state) => ({\r\n      view: state.view === \"login\" ? \"register\" : \"login\",\r\n    })),\r\n}));\r\n",
  "src\\utils\\auth.ts": "export const isAuthenticated = () => true;\r\n",
  "src\\utils\\PrivateRoute.tsx": "import { Navigate } from 'react-router-dom';\r\n\r\nimport { ReactNode } from 'react';\r\n\r\nconst PrivateRoute = ({ children }: { children: ReactNode }) => {\r\n  const token = localStorage.getItem('token');\r\n  return token ? children : <Navigate to=\"/login\" replace />;\r\n};\r\n\r\nexport default PrivateRoute;",
  "src\\utils\\validationHelpersForm.ts": "// Capitaliza cada palabra\r\nexport const capitalizeName = (name: string) => {\r\n    return name\r\n        .toLowerCase()\r\n        .split(\" \")\r\n        .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\r\n        .join(\" \");\r\n};\r\n\r\n\r\n// Devuelve el puntaje de seguridad de la contraseña\r\nexport const getPasswordScore = (password: string) => {\r\n    let score = 0;\r\n    if (password.length >= 8) score++;\r\n    if (/[A-Z]/.test(password)) score++;\r\n    if (/[0-9]/.test(password)) score++;\r\n    if (/[^A-Za-z0-9]/.test(password)) score++;\r\n    return score;\r\n};\r\n\r\n\r\n// Valida el formato de la dirección de correo electrónico\r\nexport const validateEmailFormat = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\n// Valida la seguridad de la contraseña\r\nexport const validatePasswordSecurity = (password: string, email: string): string[] => {\r\n    const errors: string[] = [];\r\n\r\n    if (password.length < 8) {\r\n        errors.push(\"Debe tener al menos 8 caracteres.\");\r\n    }\r\n    if (!/[A-Z]/.test(password)) {\r\n        errors.push(\"Debe incluir al menos una letra mayúscula.\");\r\n    }\r\n    if (!/[a-z]/.test(password)) {\r\n        errors.push(\"Debe incluir al menos una letra minúscula.\");\r\n    }\r\n    if (!/[0-9]/.test(password)) {\r\n        errors.push(\"Debe incluir al menos un número.\");\r\n    }\r\n    if (!/[^A-Za-z0-9]/.test(password)) {\r\n        errors.push(\"Debe incluir al menos un símbolo.\");\r\n    }\r\n    if (password.toLowerCase() === email.toLowerCase()) {\r\n        errors.push(\"La contraseña no puede ser igual al correo electrónico.\");\r\n    }\r\n\r\n    return errors;\r\n};\r\n\r\n// Devuelve el texto, color y clase CSS según el puntaje de la contraseña\r\nexport const getStrengthLabel = (score: number) => {\r\n    switch (score) {\r\n      case 0:\r\n      case 1:\r\n        return {\r\n          text: \"Débil\",\r\n          color: \"text-red-500 dark:text-red-400\",\r\n          bar: \"bg-red-500 dark:bg-red-400\",\r\n        };\r\n      case 2:\r\n        return {\r\n          text: \"Media\",\r\n          color: \"text-yellow-500 dark:text-yellow-400\",\r\n          bar: \"bg-yellow-400 dark:bg-yellow-300\",\r\n        };\r\n      case 3:\r\n        return {\r\n          text: \"Fuerte\",\r\n          color: \"text-blue-500 dark:text-blue-400\",\r\n          bar: \"bg-blue-500 dark:bg-blue-400\",\r\n        };\r\n      case 4:\r\n        return {\r\n          text: \"Muy fuerte\",\r\n          color: \"text-green-600 dark:text-green-400\",\r\n          bar: \"bg-green-500 dark:bg-green-400\",\r\n        };\r\n      default:\r\n        return {\r\n          text: \"\",\r\n          color: \"\",\r\n          bar: \"bg-gray-200 dark:bg-gray-600\",\r\n        };\r\n    }\r\n  };\r\n  \r\n\r\n",
  "src\\vite-env.d.ts": "/// <reference types=\"vite/client\" />\r\n",
  "tsconfig.app.json": "{\r\n  \"compilerOptions\": {\r\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.app.tsbuildinfo\",\r\n    \"target\": \"ES2020\",\r\n    \"useDefineForClassFields\": true,\r\n    \"lib\": [\"ES2020\", \"DOM\", \"DOM.Iterable\"],\r\n    \"module\": \"ESNext\",\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"isolatedModules\": true,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n    \"jsx\": \"react-jsx\",\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noUncheckedSideEffectImports\": true\r\n  },\r\n  \"include\": [\"src\", \"../backend/src/utils/sanitize.ts\"]\r\n}\r\n",
  "tsconfig.node.json": "{\r\n  \"compilerOptions\": {\r\n    \"tsBuildInfoFile\": \"./node_modules/.tmp/tsconfig.node.tsbuildinfo\",\r\n    \"target\": \"ES2022\",\r\n    \"lib\": [\"ES2023\"],\r\n    \"module\": \"ESNext\",\r\n    \"skipLibCheck\": true,\r\n\r\n    /* Bundler mode */\r\n    \"moduleResolution\": \"bundler\",\r\n    \"allowImportingTsExtensions\": true,\r\n    \"isolatedModules\": true,\r\n    \"moduleDetection\": \"force\",\r\n    \"noEmit\": true,\r\n\r\n    /* Linting */\r\n    \"strict\": true,\r\n    \"noUnusedLocals\": true,\r\n    \"noUnusedParameters\": true,\r\n    \"noFallthroughCasesInSwitch\": true,\r\n    \"noUncheckedSideEffectImports\": true\r\n  },\r\n  \"include\": [\"vite.config.ts\"]\r\n}\r\n",
  "vite.config.ts": "// import { defineConfig } from \"vite\";\r\nimport react from \"@vitejs/plugin-react\";\r\nimport tailwindcss from \"@tailwindcss/vite\";\r\nimport { defineConfig } from \"vitest/config\";\r\n\r\n// https://vite.dev/config/\r\nexport default defineConfig({\r\n  plugins: [react(), tailwindcss()],\r\n  test: {\r\n    globals: true,\r\n    environment: \"node\",\r\n  },\r\n});\r\n"
}